{
  "hints": {
    "createApplication(address,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateMigrationAdmin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateMaxStake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTreasuryAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateCommision(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateCommisionAmount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateConsenusRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateMinimumBalance(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePaidCommision(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToToken(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payCommision(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkToNFD(uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLST(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLST(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pickupAlgoRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnLST(axfer,pay,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "lstTokenId": {
          "type": "uint64",
          "key": "lstTokenId"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "commisionPercentage": {
          "type": "uint64",
          "key": "commisionPercentage"
        },
        "lstBalance": {
          "type": "uint64",
          "key": "lstBalance"
        },
        "circulatingLST": {
          "type": "uint64",
          "key": "circulatingLST"
        },
        "treasuryAddress": {
          "type": "bytes",
          "key": "treasuryAddress"
        },
        "commisionAmount": {
          "type": "uint64",
          "key": "commisionAmount"
        },
        "totalConsensusRewards": {
          "type": "uint64",
          "key": "totalConsensusRewards"
        },
        "maxStake": {
          "type": "uint64",
          "key": "maxStake"
        },
        "migrationAdmin": {
          "type": "bytes",
          "key": "migrationAdmin"
        },
        "paidCommision": {
          "type": "uint64",
          "key": "paidCommision"
        },
        "contractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "InjectedRewardsPoolConsensus",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "treasuryAddress",
            "type": "address"
          },
          {
            "name": "migrationAdmin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "lstTokenId",
            "type": "uint64"
          },
          {
            "name": "commision",
            "type": "uint64"
          },
          {
            "name": "payTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMigrationAdmin",
        "args": [
          {
            "name": "migrationAdmin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMaxStake",
        "args": [
          {
            "name": "maxStake",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTreasuryAddress",
        "args": [
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateCommision",
        "args": [
          {
            "name": "commision",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateCommisionAmount",
        "args": [
          {
            "name": "commisionAmount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateConsenusRewards",
        "args": [
          {
            "name": "totalConsensusRewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMinimumBalance",
        "args": [
          {
            "name": "minimumBalance",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatePaidCommision",
        "args": [
          {
            "name": "paidCommision",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToToken",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "tokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payCommision",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "args": [
          {
            "name": "feePayment",
            "type": "pay"
          },
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "linkToNFD",
        "args": [
          {
            "name": "nfdAppId",
            "type": "uint64"
          },
          {
            "name": "nfdName",
            "type": "string"
          },
          {
            "name": "nfdRegistryAppId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLST",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeLST",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pickupAlgoRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnLST",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "acceptMigration",
        "args": [
          {
            "name": "algoTransfer",
            "type": "pay"
          },
          {
            "name": "lstTransfer",
            "type": "axfer"
          },
          {
            "name": "lstBalance",
            "type": "uint64"
          },
          {
            "name": "totalStaked",
            "type": "uint64"
          },
          {
            "name": "circulatingLST",
            "type": "uint64"
          },
          {
            "name": "totalConsensusRewards",
            "type": "uint64"
          },
          {
            "name": "commisionAmount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "migrateContract",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}