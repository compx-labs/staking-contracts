{
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateMinStakePeriod(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMBRForPoolCreation()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectRewards(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectAlgoRewards(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pickupAlgoRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkToNFD(uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLST(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintLST(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "minStakePeriodForRewards": {
          "type": "uint64",
          "key": "minStakePeriodForRewards"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "algoInjectedRewards": {
          "type": "uint64",
          "key": "algoInjectedRewards"
        },
        "injectedASARewards": {
          "type": "uint64",
          "key": "injectedASARewards"
        },
        "lastRewardInjectionTime": {
          "type": "uint64",
          "key": "lastRewardInjectionTime"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "freeze": {
          "type": "bytes",
          "key": "freeze"
        },
        "totalConsensusRewards": {
          "type": "uint64",
          "key": "totalConsensusRewards"
        },
        "lstTokenId": {
          "type": "uint64",
          "key": "lstTokenId"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 11
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "InjectedRewardsPoolConsensus",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          },
          {
            "name": "minStakePeriodForRewards",
            "type": "uint64"
          },
          {
            "name": "lstTokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMinStakePeriod",
        "args": [
          {
            "name": "minStakePeriodForRewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMBRForPoolCreation",
        "args": [],
        "returns": {
          "type": "(uint64)"
        }
      },
      {
        "name": "initStorage",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectAlgoRewards",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pickupAlgoRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFreeze",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "args": [
          {
            "name": "feePayment",
            "type": "pay"
          },
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "linkToNFD",
        "args": [
          {
            "name": "nfdAppId",
            "type": "uint64"
          },
          {
            "name": "nfdName",
            "type": "string"
          },
          {
            "name": "nfdRegistryAppId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLST",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mintLST",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}