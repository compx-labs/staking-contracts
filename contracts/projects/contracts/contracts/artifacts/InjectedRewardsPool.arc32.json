{
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMBRForPoolCreation()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectRewards(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "injectedASARewards": {
          "type": "uint64",
          "key": "injectedASARewards"
        },
        "lastRewardInjectionTime": {
          "type": "uint64",
          "key": "lastRewardInjectionTime"
        },
        "lastAccrualTime": {
          "type": "uint64",
          "key": "lastAccrualTime"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "contractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "InjectedRewardsPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "desc": "Initializes the staking pool application with the specified staked asset and reward asset.\n\n\nSets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset\nand reward asset if necesary.\nOnly the admin address can call this function.",
        "args": [
          {
            "name": "stakedAssetId",
            "type": "uint64",
            "desc": "The asset ID of the token to be staked in the pool."
          },
          {
            "name": "rewardAssetId",
            "type": "uint64",
            "desc": "The asset ID of the token to be distributed as rewards."
          },
          {
            "name": "initialBalanceTxn",
            "type": "pay",
            "desc": "The payment transaction providing the initial minimum balance for the contract."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMBRForPoolCreation",
        "args": [],
        "returns": {
          "type": "(uint64)"
        }
      },
      {
        "name": "initStorage",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}