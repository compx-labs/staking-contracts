{
  "hints": {
    "createApplication(address,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolActive()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRewardParams(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectedASARewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePaidASARewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectedxUSDRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTreasuryAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatexUSDFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectorAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateNumStakers(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePoolEnding(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFeeWaived()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMBRForPoolCreation()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectRewards(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pickupRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectxUSD(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "xUSDAssetId": {
          "type": "uint64",
          "key": "xUSDAssetId"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "injectedASARewards": {
          "type": "uint64",
          "key": "injectedASARewards"
        },
        "paidASARewards": {
          "type": "uint64",
          "key": "paidASARewards"
        },
        "injectedxUSDRewards": {
          "type": "uint64",
          "key": "injectedxUSDRewards"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "injectorAddress": {
          "type": "bytes",
          "key": "injectorAddress"
        },
        "treasuryAddress": {
          "type": "bytes",
          "key": "treasuryAddress"
        },
        "xUSDFee": {
          "type": "uint64",
          "key": "xUSDFee"
        },
        "feeWaived": {
          "type": "bytes",
          "key": "feeWaived"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "freeze": {
          "type": "bytes",
          "key": "freeze"
        },
        "poolActive": {
          "type": "bytes",
          "key": "poolActive"
        },
        "poolEnding": {
          "type": "bytes",
          "key": "poolEnding"
        },
        "rewardFrequency": {
          "type": "uint64",
          "key": "rewardFrequency"
        },
        "rewardPerInjection": {
          "type": "uint64",
          "key": "rewardPerInjection"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "totalRewards"
        },
        "lastInjectionTime": {
          "type": "uint64",
          "key": "lastInjectionTime"
        },
        "contractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        },
        "injectionType": {
          "type": "uint64",
          "key": "injectionType"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 7,
      "num_uints": 16
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "PermissionlessInjectedRewardsPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "injectorAddress",
            "type": "address"
          },
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          },
          {
            "name": "xUSDFee",
            "type": "uint64"
          },
          {
            "name": "xUSDAssetID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPoolActive",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setRewardParams",
        "args": [
          {
            "name": "totalRewards",
            "type": "uint64"
          },
          {
            "name": "rewardFrequency",
            "type": "uint64"
          },
          {
            "name": "rewardPerInjection",
            "type": "uint64"
          },
          {
            "name": "injectionType",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectedASARewards",
        "args": [
          {
            "name": "injectedASARewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatePaidASARewards",
        "args": [
          {
            "name": "paidASARewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectedxUSDRewards",
        "args": [
          {
            "name": "injectedxUSDRewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTreasuryAddress",
        "args": [
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatexUSDFee",
        "args": [
          {
            "name": "xUSDFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectorAddress",
        "args": [
          {
            "name": "injectorAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateNumStakers",
        "args": [
          {
            "name": "numStakers",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateFreeze",
        "args": [
          {
            "name": "freeze",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatePoolEnding",
        "args": [
          {
            "name": "poolEnding",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFeeWaived",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMBRForPoolCreation",
        "args": [],
        "returns": {
          "type": "(uint64)"
        }
      },
      {
        "name": "initStorage",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pickupRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectxUSD",
        "args": [
          {
            "name": "xUSDTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFreeze",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}