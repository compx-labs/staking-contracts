{
  "hints": {
    "createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "optInToAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateParams(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewards(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewardsAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setPrices(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stake(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "adminUnstake(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "staked": {
          "type": "uint64",
          "key": "staked"
        },
        "unlockTime": {
          "type": "uint64",
          "key": "unlockTime"
        },
        "stakeDuration": {
          "type": "uint64",
          "key": "stakeDuration"
        },
        "stakeStartTime": {
          "type": "uint64",
          "key": "stakeStartTime"
        },
        "userStakingWeight": {
          "type": "uint64",
          "key": "userStakingWeight"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rewardRate"
        },
        "accruedRewards": {
          "type": "uint64",
          "key": "accruedRewards"
        },
        "lastUpdateTime": {
          "type": "uint64",
          "key": "lastUpdateTime"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "minLockUp": {
          "type": "uint64",
          "key": "minLockUp"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "totalRewards"
        },
        "contractDuration": {
          "type": "uint64",
          "key": "contractDuration"
        },
        "contractStartTimestamp": {
          "type": "uint64",
          "key": "contractStartTimestamp"
        },
        "contractEndTimestamp": {
          "type": "uint64",
          "key": "contractEndTimestamp"
        },
        "totalStakingWeight": {
          "type": "bytes",
          "key": "totalStakingWeight"
        },
        "remainingRewards": {
          "type": "uint64",
          "key": "remainingRewards"
        },
        "stakeTokenPrice": {
          "type": "uint64",
          "key": "stakeTokenPrice"
        },
        "rewardTokenPrice": {
          "type": "uint64",
          "key": "rewardTokenPrice"
        },
        "oracleAdminAddress": {
          "type": "bytes",
          "key": "oracleAdminAddress"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "rewardsAvailablePerTick": {
          "type": "uint64",
          "key": "rewardsAvailablePerTick"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 8
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "CompXStaking",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAsset",
            "type": "uint64"
          },
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          },
          {
            "name": "startTimestamp",
            "type": "uint64"
          },
          {
            "name": "oracleAdmin",
            "type": "address"
          },
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateParams",
        "args": [
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewardsAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeRewards",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrices",
        "args": [
          {
            "name": "stakeTokenPrice",
            "type": "uint64"
          },
          {
            "name": "rewardTokenPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "lockPeriod",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "adminUnstake",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}