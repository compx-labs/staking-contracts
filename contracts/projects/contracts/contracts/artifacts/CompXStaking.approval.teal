#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64,uint64,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 6
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// startTimestamp: uint64
	txna ApplicationArgs 5
	btoi

	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64,address)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minLockUp: uint64, contractDuration: uint64, startTimestamp: uint64, adminAddress: Address): void
createApplication:
	proto 6 0

	// contracts/CompXStaking.algo.ts:60
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:61
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:62
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -3 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:63
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:64
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:65
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:66
	// this.contractStartTimestamp.value = startTimestamp
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	frame_dig -5 // startTimestamp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:67
	// this.contractEndTimestamp.value = startTimestamp + contractDuration
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	frame_dig -5 // startTimestamp: uint64
	frame_dig -4 // contractDuration: uint64
	+
	app_global_put

	// contracts/CompXStaking.algo.ts:68
	// this.totalStakingWeight.value = 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:69
	// this.remainingRewards.value = 0
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:70
	// this.rewardsAvailablePerTick.value = 0
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:71
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -6 // adminAddress: Address
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:75
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:76
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:77
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:78
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:79
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:80
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:81
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/CompXStaking.algo.ts:85
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:87
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:88
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:89
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:90
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:91
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64,uint64)void
*abi_route_updateParams:
	// contractDuration: uint64
	txna ApplicationArgs 2
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64,uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minLockUp: uint64, contractDuration: uint64): void
updateParams:
	proto 2 0

	// contracts/CompXStaking.algo.ts:97
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/CompXStaking.algo.ts:99
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -1 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:100
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -2 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:101
	// this.contractEndTimestamp.value = this.contractStartTimestamp.value + contractDuration
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	+
	app_global_put

	// *if0_condition
	// contracts/CompXStaking.algo.ts:102
	// this.totalRewards.value > 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	int 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts/CompXStaking.algo.ts:103
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / contractDuration
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	/
	app_global_put

*if0_end:
	retsub

// addRewards(axfer,uint64)void
*abi_route_addRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for addRewards must be a axfer transaction
	assert

	// execute addRewards(axfer,uint64)void
	callsub addRewards
	int 1
	return

// addRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
addRewards:
	proto 2 0

	// contracts/CompXStaking.algo.ts:108
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:109
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:110
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:112
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:118
	// this.totalRewards.value += quantity
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:119
	// this.remainingRewards.value += quantity
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:120
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put
	retsub

// addRewardsAlgo(pay,uint64)void
*abi_route_addRewardsAlgo:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for addRewardsAlgo must be a pay transaction
	assert

	// execute addRewardsAlgo(pay,uint64)void
	callsub addRewardsAlgo
	int 1
	return

// addRewardsAlgo(payTxn: PayTxn, quantity: uint64): void
addRewardsAlgo:
	proto 2 0

	// contracts/CompXStaking.algo.ts:124
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:125
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:126
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:128
	// verifyPayTxn(payTxn, {
	//       sender: this.app.creator,
	//       receiver: this.app.address,
	//       amount: quantity,
	//     })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:134
	// this.totalRewards.value += payTxn.amount
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:135
	// this.remainingRewards.value += payTxn.amount
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:136
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put
	retsub

// removeRewards(uint64)void
*abi_route_removeRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeRewards(uint64)void
	callsub removeRewards
	int 1
	return

// removeRewards(quantity: uint64): void
removeRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/CompXStaking.algo.ts:140
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can remove rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can remove rewards
	assert

	// contracts/CompXStaking.algo.ts:141
	// assert(this.remainingRewards.value >= quantity, 'Insufficient rewards')
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // quantity: uint64
	>=

	// Insufficient rewards
	assert

	// contracts/CompXStaking.algo.ts:143
	// rewardsToRemove = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // rewardsToRemove: uint64

	// *if1_condition
	// contracts/CompXStaking.algo.ts:144
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/CompXStaking.algo.ts:145
	// rewardsToRemove = this.remainingRewards.value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_bury 0 // rewardsToRemove: uint64

*if1_end:
	// *if2_condition
	// contracts/CompXStaking.algo.ts:147
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if2_else

	// *if2_consequent
	// contracts/CompXStaking.algo.ts:148
	// sendPayment({
	//         amount: rewardsToRemove,
	//         receiver: this.app.creator,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:149
	// amount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:150
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:151
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:152
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts/CompXStaking.algo.ts:155
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: rewardsToRemove,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:156
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:157
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:158
	// assetAmount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:159
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:160
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// contracts/CompXStaking.algo.ts:163
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	int 0
	==
	bz *if3_else

	// *if3_consequent
	// contracts/CompXStaking.algo.ts:164
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:165
	// this.remainingRewards.value = 0
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:166
	// this.rewardsAvailablePerTick.value = 0
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	int 0
	app_global_put
	b *if3_end

*if3_else:
	// contracts/CompXStaking.algo.ts:168
	// this.totalRewards.value -= rewardsToRemove
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig 0 // rewardsToRemove: uint64
	-
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:169
	// this.remainingRewards.value = this.totalRewards.value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	app_global_put

	// contracts/CompXStaking.algo.ts:170
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put

*if3_end:
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:175
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/CompXStaking.algo.ts:176
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert

	// *if4_condition
	// contracts/CompXStaking.algo.ts:178
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if4_end

	// *if4_consequent
	// contracts/CompXStaking.algo.ts:179
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:180
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:181
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:182
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:183
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:184
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// contracts/CompXStaking.algo.ts:185
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// *if5_condition
	// contracts/CompXStaking.algo.ts:188
	// this.stakedAssetId.value !== 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=
	bz *if5_end

	// *if5_consequent
	// contracts/CompXStaking.algo.ts:189
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:190
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:191
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:192
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:193
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:194
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if5_end:
	// contracts/CompXStaking.algo.ts:199
	// sendPayment({
	//       amount: (this.adminAddress.value.balance - this.adminAddress.value.minBalance),
	//       receiver: this.adminAddress.value,
	//       sender: this.app.address,
	//       fee: 1_000,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:200
	// amount: (this.adminAddress.value.balance - this.adminAddress.value.minBalance)
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	acct_params_get AcctBalance
	pop
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:201
	// receiver: this.adminAddress.value
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:202
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:203
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// stake(axfer,uint64,uint64,uint64,uint64)void
*abi_route_stake:
	// userRewardRate: uint64
	txna ApplicationArgs 4
	btoi

	// userStakingWeight: uint64
	txna ApplicationArgs 3
	btoi

	// lockPeriod: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 4 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64,uint64,uint64,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64, lockPeriod: uint64, userStakingWeight: uint64, userRewardRate: uint64): void
stake:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/CompXStaking.algo.ts:215
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/CompXStaking.algo.ts:216
	// assert(lockPeriod >= this.minLockUp.value, 'Lock period too short')
	frame_dig -3 // lockPeriod: uint64
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	>=

	// Lock period too short
	assert

	// contracts/CompXStaking.algo.ts:217
	// assert(currentTimeStamp + lockPeriod < this.contractEndTimestamp.value, 'Lock period too long')
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<

	// Lock period too long
	assert

	// contracts/CompXStaking.algo.ts:218
	// assert(currentTimeStamp <= this.contractEndTimestamp.value, 'Contract has ended')
	frame_dig 0 // currentTimeStamp: uint64
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<=

	// Contract has ended
	assert

	// contracts/CompXStaking.algo.ts:219
	// assert(this.staked(this.txn.sender).value === 0, 'User already staked')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	==

	// User already staked
	assert

	// contracts/CompXStaking.algo.ts:220
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/CompXStaking.algo.ts:222
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:228
	// this.staked(this.txn.sender).value = stakeTxn.assetAmount
	txn Sender
	byte 0x7374616b6564 // "staked"
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	app_local_put

	// contracts/CompXStaking.algo.ts:229
	// this.stakeDuration(this.txn.sender).value = lockPeriod
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	frame_dig -3 // lockPeriod: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:230
	// this.userStakingWeight(this.txn.sender).value = userStakingWeight
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig -4 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:231
	// this.totalStakingWeight.value += this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:233
	// this.totalStaked.value += this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:234
	// this.rewardRate(this.txn.sender).value = userRewardRate
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -5 // userRewardRate: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:235
	// this.stakeStartTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:236
	// this.userStakingWeight(this.txn.sender).value = userStakingWeight
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig -4 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:237
	// this.unlockTime(this.txn.sender).value = currentTimeStamp + lockPeriod
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	app_local_put

	// contracts/CompXStaking.algo.ts:238
	// this.lastUpdateTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put
	retsub

// setRewardRate(address,uint64,uint64)void
*abi_route_setRewardRate:
	// userStakingWeight: uint64
	txna ApplicationArgs 3
	btoi

	// userRewardRate: uint64
	txna ApplicationArgs 2
	btoi

	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (userAddress) for setRewardRate must be a address
	assert

	// execute setRewardRate(address,uint64,uint64)void
	callsub setRewardRate
	int 1
	return

// setRewardRate(userAddress: Address, userRewardRate: uint64, userStakingWeight: uint64): void
setRewardRate:
	proto 3 0

	// contracts/CompXStaking.algo.ts:242
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can set reward rate')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can set reward rate
	assert

	// contracts/CompXStaking.algo.ts:244
	// this.totalStakingWeight.value -= this.userStakingWeight(userAddress).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:245
	// this.rewardRate(userAddress).value = userRewardRate
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig -2 // userRewardRate: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:246
	// this.userStakingWeight(userAddress).value = userStakingWeight
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig -3 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:247
	// this.totalStakingWeight.value += this.userStakingWeight(userAddress).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put
	retsub

// accrueRewards(address)void
*abi_route_accrueRewards:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for accrueRewards must be a address
	assert

	// execute accrueRewards(address)void
	callsub accrueRewards
	int 1
	return

// accrueRewards(userAddress: Address): void
accrueRewards:
	proto 1 0

	// contracts/CompXStaking.algo.ts:251
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can accrue rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can accrue rewards
	assert

	// contracts/CompXStaking.algo.ts:252
	// assert(this.unlockTime(this.txn.sender).value > (globals.latestTimestamp), 'unlock time reached')
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	app_local_get
	global LatestTimestamp
	>

	// unlock time reached
	assert

	// contracts/CompXStaking.algo.ts:254
	// this.accruedRewards(userAddress).value += (this.rewardRate(userAddress).value * (globals.latestTimestamp - this.lastUpdateTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	app_local_get
	-
	*
	+
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:255
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	global LatestTimestamp
	app_local_put
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	int 1
	return

// unstake(): void
unstake:
	proto 0 0

	// contracts/CompXStaking.algo.ts:259
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// No staked assets
	assert

	// contracts/CompXStaking.algo.ts:260
	// assert(this.unlockTime(this.txn.sender).value < (globals.latestTimestamp), 'unlock time not reached')
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	app_local_get
	global LatestTimestamp
	<

	// unlock time not reached
	assert

	// *if6_condition
	// contracts/CompXStaking.algo.ts:262
	// this.staked(this.txn.sender).value > 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>
	bz *if6_end

	// *if6_consequent
	// *if7_condition
	// contracts/CompXStaking.algo.ts:263
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if7_else

	// *if7_consequent
	// contracts/CompXStaking.algo.ts:264
	// sendPayment({
	//           amount: this.staked(this.txn.sender).value,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:265
	// amount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:266
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:267
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:268
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if7_end

*if7_else:
	// contracts/CompXStaking.algo.ts:271
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           sender: this.app.address,
	//           assetAmount: this.staked(this.txn.sender).value,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:272
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:273
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:274
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:275
	// assetAmount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:276
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if7_end:

*if6_end:
	// *if8_condition
	// contracts/CompXStaking.algo.ts:280
	// this.accruedRewards(this.txn.sender).value > 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>
	bz *if8_end

	// *if8_consequent
	// *if9_condition
	// contracts/CompXStaking.algo.ts:281
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if9_else

	// *if9_consequent
	// contracts/CompXStaking.algo.ts:282
	// sendPayment({
	//           amount: this.accruedRewards(this.txn.sender).value,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:283
	// amount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:284
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:285
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:286
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if9_end

*if9_else:
	// contracts/CompXStaking.algo.ts:289
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           assetAmount: this.accruedRewards(this.txn.sender).value,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:290
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:291
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:292
	// assetAmount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:293
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:294
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if9_end:

*if8_end:
	// contracts/CompXStaking.algo.ts:300
	// this.totalStakingWeight.value -= this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:301
	// this.remainingRewards.value -= this.accruedRewards(this.txn.sender).value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	-
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:302
	// this.totalStaked.value -= this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:304
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:305
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:306
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:307
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:308
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:309
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:310
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:311
	// this.totalRewardsPaid(this.txn.sender).value += this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x746f74616c5265776172647350616964 // "totalRewardsPaid"
	app_local_get
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	+
	txn Sender
	byte 0x746f74616c5265776172647350616964 // "totalRewardsPaid"
	uncover 2
	app_local_put
	retsub

// adminUnstake(address)void
*abi_route_adminUnstake:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for adminUnstake must be a address
	assert

	// execute adminUnstake(address)void
	callsub adminUnstake
	int 1
	return

// adminUnstake(userAddress: Address): void
adminUnstake:
	proto 1 0

	// contracts/CompXStaking.algo.ts:315
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can unstake via this method')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can unstake via this method
	assert

	// *if10_condition
	// contracts/CompXStaking.algo.ts:317
	// this.staked(userAddress).value > 0
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>
	bz *if10_end

	// *if10_consequent
	// *if11_condition
	// contracts/CompXStaking.algo.ts:318
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if11_else

	// *if11_consequent
	// contracts/CompXStaking.algo.ts:319
	// sendPayment({
	//           amount: this.staked(userAddress).value,
	//           receiver: userAddress,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:320
	// amount: this.staked(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:321
	// receiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:322
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:323
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if11_end

*if11_else:
	// contracts/CompXStaking.algo.ts:326
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: userAddress,
	//           sender: this.app.address,
	//           assetAmount: this.staked(userAddress).value,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:327
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:328
	// assetReceiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:329
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:330
	// assetAmount: this.staked(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:331
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if11_end:

*if10_end:
	// *if12_condition
	// contracts/CompXStaking.algo.ts:335
	// this.accruedRewards(userAddress).value > 0
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>
	bz *if12_end

	// *if12_consequent
	// *if13_condition
	// contracts/CompXStaking.algo.ts:336
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if13_else

	// *if13_consequent
	// contracts/CompXStaking.algo.ts:337
	// sendPayment({
	//           amount: this.accruedRewards(userAddress).value,
	//           receiver: userAddress,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:338
	// amount: this.accruedRewards(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:339
	// receiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:340
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:341
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if13_end

*if13_else:
	// contracts/CompXStaking.algo.ts:344
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//           assetReceiver: userAddress,
	//           assetAmount: this.accruedRewards(userAddress).value,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:345
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:346
	// assetReceiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:347
	// assetAmount: this.accruedRewards(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:348
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:349
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if13_end:

*if12_end:
	// contracts/CompXStaking.algo.ts:355
	// this.totalStakingWeight.value -= this.userStakingWeight(userAddress).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:356
	// this.remainingRewards.value -= this.accruedRewards(userAddress).value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	-
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:357
	// this.totalStaked.value -= this.staked(userAddress).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:359
	// this.staked(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:360
	// this.accruedRewards(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:361
	// this.rewardRate(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:362
	// this.unlockTime(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:363
	// this.userStakingWeight(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:364
	// this.stakeDuration(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:365
	// this.stakeStartTime(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:366
	// this.totalRewardsPaid(userAddress).value += this.accruedRewards(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x746f74616c5265776172647350616964 // "totalRewardsPaid"
	app_local_get
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	+
	frame_dig -1 // userAddress: Address
	byte 0x746f74616c5265776172647350616964 // "totalRewardsPaid"
	uncover 2
	app_local_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(uint64)void"
	method "updateParams(uint64,uint64)void"
	method "addRewards(axfer,uint64)void"
	method "addRewardsAlgo(pay,uint64)void"
	method "removeRewards(uint64)void"
	method "stake(axfer,uint64,uint64,uint64,uint64)void"
	method "setRewardRate(address,uint64,uint64)void"
	method "accrueRewards(address)void"
	method "unstake()void"
	method "adminUnstake(address)void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_addRewards *abi_route_addRewardsAlgo *abi_route_removeRewards *abi_route_stake *abi_route_setRewardRate *abi_route_accrueRewards *abi_route_unstake *abi_route_adminUnstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err