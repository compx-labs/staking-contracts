#pragma version 9
intcblock 0 1 1000000000000000 1_000 4 100 16 32 128 98
bytecblock 0x6163637275656452657761726473 0x756e6c6f636b54696d65 0x6c61737455706461746554696d65 0x7374616b6564 0x72656d61696e696e6752657761726473 0x746f74616c52657761726473 0x72657761726452617465 0x746f74616c5374616b696e67576569676874 0x 0x757365725374616b696e67576569676874 0x72657761726441737365744964 0x746f74616c5374616b6564 0x72657761726473417661696c61626c655065725469636b 0x636f6e74726163744475726174696f6e 0x7374616b654475726174696f6e 0x61646d696e41646472657373 0x7374616b65537461727454696d65 0x7374616b656441737365744964 0x6d696e4c6f636b5570 0x636f6e7472616374456e6454696d657374616d70 0x726577617264546f6b656e5072696365 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x7374616b65546f6b656e5072696365 0x636f6e7472616374537461727454696d657374616d70 0x6f7261636c6541646d696e41646472657373

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 7
	dup
	len
	intc 7 // 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// oracleAdmin: address
	txna ApplicationArgs 6
	dup
	len
	intc 7 // 32
	==

	// argument 1 (oracleAdmin) for createApplication must be a address
	assert

	// startTimestamp: uint64
	txna ApplicationArgs 5
	btoi

	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minLockUp: uint64, contractDuration: uint64, startTimestamp: uint64, oracleAdmin: Address, adminAddress: Address): void
createApplication:
	proto 7 0

	// contracts/CompXStaking.algo.ts:65
	// this.stakedAssetId.value = stakedAsset
	bytec 17 //  "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:66
	// this.rewardAssetId.value = rewardAsset
	bytec 10 //  "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:67
	// this.minLockUp.value = minLockUp
	bytec 18 //  "minLockUp"
	frame_dig -3 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:68
	// this.totalRewards.value = 0
	bytec 5 //  "totalRewards"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:69
	// this.totalStaked.value = 0
	bytec 11 //  "totalStaked"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:70
	// this.contractDuration.value = contractDuration
	bytec 13 //  "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:71
	// this.contractStartTimestamp.value = startTimestamp
	bytec 23 //  "contractStartTimestamp"
	frame_dig -5 // startTimestamp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:72
	// this.contractEndTimestamp.value = startTimestamp + contractDuration
	bytec 19 //  "contractEndTimestamp"
	frame_dig -5 // startTimestamp: uint64
	frame_dig -4 // contractDuration: uint64
	+
	app_global_put

	// contracts/CompXStaking.algo.ts:73
	// this.totalStakingWeight.value = 0 as uint128
	bytec 7 //  "totalStakingWeight"
	pushbytes 0x00000000000000000000000000000000
	app_global_put

	// contracts/CompXStaking.algo.ts:74
	// this.remainingRewards.value = 0
	bytec 4 //  "remainingRewards"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:75
	// this.oracleAdminAddress.value = oracleAdmin
	bytec 24 //  "oracleAdminAddress"
	frame_dig -6 // oracleAdmin: Address
	app_global_put

	// contracts/CompXStaking.algo.ts:76
	// this.stakeTokenPrice.value = 0
	bytec 22 //  "stakeTokenPrice"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:77
	// this.rewardTokenPrice.value = 0
	bytec 20 //  "rewardTokenPrice"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:78
	// this.rewardsAvailablePerTick.value = 0
	bytec 12 //  "rewardsAvailablePerTick"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:79
	// this.adminAddress.value = adminAddress
	bytec 15 //  "adminAddress"
	frame_dig -7 // adminAddress: Address
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 1 // 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:83
	// this.staked(this.txn.sender).value = 0
	txn Sender
	bytec 3 //  "staked"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:84
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	bytec 1 //  "unlockTime"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:85
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	bytec 16 //  "stakeStartTime"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:86
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	bytec 14 //  "stakeDuration"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:87
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	bytec 9 //  "userStakingWeight"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:88
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	bytec 6 //  "rewardRate"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:89
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	bytec 0 //  "accruedRewards"
	intc 0 // 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	intc 1 // 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/CompXStaking.algo.ts:94
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:96
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:97
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:98
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:99
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:100
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64,uint64)void
*abi_route_updateParams:
	// contractDuration: uint64
	txna ApplicationArgs 2
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64,uint64)void
	callsub updateParams
	intc 1 // 1
	return

// updateParams(minLockUp: uint64, contractDuration: uint64): void
updateParams:
	proto 2 0

	// contracts/CompXStaking.algo.ts:106
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/CompXStaking.algo.ts:108
	// this.minLockUp.value = minLockUp
	bytec 18 //  "minLockUp"
	frame_dig -1 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:109
	// this.contractDuration.value = contractDuration
	bytec 13 //  "contractDuration"
	frame_dig -2 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:110
	// this.contractEndTimestamp.value = this.contractStartTimestamp.value + contractDuration
	bytec 19 //  "contractEndTimestamp"
	bytec 23 //  "contractStartTimestamp"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	+
	app_global_put

	// *if0_condition
	// contracts/CompXStaking.algo.ts:111
	// this.totalRewards.value > 0
	bytec 5 //  "totalRewards"
	app_global_get
	intc 0 // 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts/CompXStaking.algo.ts:112
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / contractDuration
	bytec 12 //  "rewardsAvailablePerTick"
	bytec 5 //  "totalRewards"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	/
	app_global_put

*if0_end:
	retsub

// addRewards(axfer,uint64)void
*abi_route_addRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 1 (rewardTxn) for addRewards must be a axfer transaction
	assert

	// execute addRewards(axfer,uint64)void
	callsub addRewards
	intc 1 // 1
	return

// addRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
addRewards:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 8 // 0x

	// contracts/CompXStaking.algo.ts:117
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:118
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	bytec 18 //  "minLockUp"
	app_global_get
	intc 0 // 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:119
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	bytec 13 //  "contractDuration"
	app_global_get
	intc 0 // 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:121
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 10 //  "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:127
	// this.totalRewards.value += rewardTxn.assetAmount
	bytec 5 //  "totalRewards"
	app_global_get
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	bytec 5 //  "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:128
	// this.remainingRewards.value += rewardTxn.assetAmount
	bytec 4 //  "remainingRewards"
	app_global_get
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	bytec 4 //  "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:129
	// maxRewardsPerTick = wideRatio([quantity, PRECISION], [this.contractDuration.value, PRECISION])
	frame_dig -2 // quantity: uint64
	intc 2 // 1000000000000000
	mulw
	bytec 13 //  "contractDuration"
	app_global_get
	intc 2 // 1000000000000000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // maxRewardsPerTick: uint64

	// contracts/CompXStaking.algo.ts:130
	// this.rewardsAvailablePerTick.value = ((maxRewardsPerTick / 100) * 98)
	bytec 12 //  "rewardsAvailablePerTick"
	frame_dig 0 // maxRewardsPerTick: uint64
	intc 5 // 100
	/
	intc 9 // 98
	*
	app_global_put
	retsub

// addRewardsAlgo(pay,uint64)void
*abi_route_addRewardsAlgo:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 1 (payTxn) for addRewardsAlgo must be a pay transaction
	assert

	// execute addRewardsAlgo(pay,uint64)void
	callsub addRewardsAlgo
	intc 1 // 1
	return

// addRewardsAlgo(payTxn: PayTxn, quantity: uint64): void
addRewardsAlgo:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 8 // 0x

	// contracts/CompXStaking.algo.ts:134
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:135
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	bytec 18 //  "minLockUp"
	app_global_get
	intc 0 // 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:136
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	bytec 13 //  "contractDuration"
	app_global_get
	intc 0 // 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:138
	// verifyPayTxn(payTxn, {
	//       sender: this.app.creator,
	//       receiver: this.app.address,
	//       amount: quantity,
	//     })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:144
	// this.totalRewards.value += payTxn.amount
	bytec 5 //  "totalRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	bytec 5 //  "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:145
	// this.remainingRewards.value += payTxn.amount
	bytec 4 //  "remainingRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	bytec 4 //  "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:146
	// maxRewardsPerTick = wideRatio([this.totalRewards.value, PRECISION], [this.contractDuration.value, PRECISION])
	bytec 5 //  "totalRewards"
	app_global_get
	intc 2 // 1000000000000000
	mulw
	bytec 13 //  "contractDuration"
	app_global_get
	intc 2 // 1000000000000000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // maxRewardsPerTick: uint64

	// contracts/CompXStaking.algo.ts:147
	// this.rewardsAvailablePerTick.value = ((maxRewardsPerTick / 100) * 98)
	bytec 12 //  "rewardsAvailablePerTick"
	frame_dig 0 // maxRewardsPerTick: uint64
	intc 5 // 100
	/
	intc 9 // 98
	*
	app_global_put
	retsub

// removeRewards(uint64)void
*abi_route_removeRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeRewards(uint64)void
	callsub removeRewards
	intc 1 // 1
	return

// removeRewards(quantity: uint64): void
removeRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 8 // 0x
	dup

	// contracts/CompXStaking.algo.ts:151
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can remove rewards')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can remove rewards
	assert

	// contracts/CompXStaking.algo.ts:152
	// assert(this.remainingRewards.value >= quantity, 'Insufficient rewards')
	bytec 4 //  "remainingRewards"
	app_global_get
	frame_dig -1 // quantity: uint64
	>=

	// Insufficient rewards
	assert

	// contracts/CompXStaking.algo.ts:154
	// rewardsToRemove = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // rewardsToRemove: uint64

	// *if1_condition
	// contracts/CompXStaking.algo.ts:155
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	intc 0 // 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/CompXStaking.algo.ts:156
	// rewardsToRemove = this.remainingRewards.value
	bytec 4 //  "remainingRewards"
	app_global_get
	frame_bury 0 // rewardsToRemove: uint64

*if1_end:
	// *if2_condition
	// contracts/CompXStaking.algo.ts:158
	// this.rewardAssetId.value === 0
	bytec 10 //  "rewardAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if2_else

	// *if2_consequent
	// contracts/CompXStaking.algo.ts:159
	// sendPayment({
	//         amount: rewardsToRemove,
	//         receiver: this.app.creator,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:160
	// amount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:161
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:162
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:163
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts/CompXStaking.algo.ts:166
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: rewardsToRemove,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:167
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 10 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:168
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:169
	// assetAmount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:170
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:171
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// contracts/CompXStaking.algo.ts:174
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	intc 0 // 0
	==
	bz *if3_else

	// *if3_consequent
	// contracts/CompXStaking.algo.ts:175
	// this.totalRewards.value = 0
	bytec 5 //  "totalRewards"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:176
	// this.remainingRewards.value = 0
	bytec 4 //  "remainingRewards"
	intc 0 // 0
	app_global_put

	// contracts/CompXStaking.algo.ts:177
	// this.rewardsAvailablePerTick.value = 0
	bytec 12 //  "rewardsAvailablePerTick"
	intc 0 // 0
	app_global_put
	b *if3_end

*if3_else:
	// contracts/CompXStaking.algo.ts:179
	// this.totalRewards.value -= rewardsToRemove
	bytec 5 //  "totalRewards"
	app_global_get
	frame_dig 0 // rewardsToRemove: uint64
	-
	bytec 5 //  "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:180
	// this.remainingRewards.value = this.totalRewards.value
	bytec 4 //  "remainingRewards"
	bytec 5 //  "totalRewards"
	app_global_get
	app_global_put

	// contracts/CompXStaking.algo.ts:181
	// maxRewardsPerTick = wideRatio([this.totalRewards.value, PRECISION], [this.contractDuration.value])
	bytec 5 //  "totalRewards"
	app_global_get
	intc 2 // 1000000000000000
	mulw
	intc 0 // 0
	bytec 13 //  "contractDuration"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // maxRewardsPerTick: uint64

	// contracts/CompXStaking.algo.ts:182
	// this.rewardsAvailablePerTick.value = ((maxRewardsPerTick / 100) * 98) / PRECISION
	bytec 12 //  "rewardsAvailablePerTick"
	frame_dig 1 // maxRewardsPerTick: uint64
	intc 5 // 100
	/
	intc 9 // 98
	*
	intc 2 // 1000000000000000
	/
	app_global_put

*if3_end:
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 1 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:187
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/CompXStaking.algo.ts:188
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	bytec 11 //  "totalStaked"
	app_global_get
	intc 0 // 0
	==

	// Staked assets still exist
	assert
	retsub

// setPrices(uint64,uint64)void
*abi_route_setPrices:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrices(uint64,uint64)void
	callsub setPrices
	intc 1 // 1
	return

// setPrices(stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
setPrices:
	proto 2 0

	// contracts/CompXStaking.algo.ts:220
	// assert(this.txn.sender === this.oracleAdminAddress.value, 'Only oracle admin can set prices')
	txn Sender
	bytec 24 //  "oracleAdminAddress"
	app_global_get
	==

	// Only oracle admin can set prices
	assert

	// contracts/CompXStaking.algo.ts:221
	// assert(stakeTokenPrice > 0, 'Invalid stake token price')
	frame_dig -1 // stakeTokenPrice: uint64
	intc 0 // 0
	>

	// Invalid stake token price
	assert

	// contracts/CompXStaking.algo.ts:222
	// assert(rewardTokenPrice > 0, 'Invalid reward token price')
	frame_dig -2 // rewardTokenPrice: uint64
	intc 0 // 0
	>

	// Invalid reward token price
	assert

	// contracts/CompXStaking.algo.ts:224
	// this.stakeTokenPrice.value = stakeTokenPrice
	bytec 22 //  "stakeTokenPrice"
	frame_dig -1 // stakeTokenPrice: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:225
	// this.rewardTokenPrice.value = rewardTokenPrice
	bytec 20 //  "rewardTokenPrice"
	frame_dig -2 // rewardTokenPrice: uint64
	app_global_put
	retsub

// calculateRewardRateAndGetUserStakingWeight(userAddress: Address): void
calculateRewardRateAndGetUserStakingWeight:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 8 // 0x
	dupn 5

	// *if4_condition
	// contracts/CompXStaking.algo.ts:230
	// this.userStakingWeight(userAddress).value > 0
	frame_dig -1 // userAddress: Address
	bytec 9 //  "userStakingWeight"
	app_local_get
	intc 0 // 0
	>
	bz *if4_end

	// *if4_consequent
	// contracts/CompXStaking.algo.ts:231
	// this.totalStakingWeight.value = this.totalStakingWeight.value - (this.userStakingWeight(userAddress).value as uint128)
	bytec 7 //  "totalStakingWeight"
	dup
	app_global_get
	frame_dig -1 // userAddress: Address
	bytec 9 //  "userStakingWeight"
	app_local_get
	itob
	b-
	dup
	bitlen
	intc 8 // 128
	<=

	// this.totalStakingWeight.value - (this.userStakingWeight(userAddress).value as uint128) overflowed 128 bits
	assert
	bytec 21 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 6 // 16
	-
	swap
	substring3
	app_global_put

*if4_end:
	// contracts/CompXStaking.algo.ts:233
	// normalisedAmount = wideRatio([this.staked(userAddress).value, this.stakeTokenPrice.value], [this.rewardTokenPrice.value])
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	app_local_get
	bytec 22 //  "stakeTokenPrice"
	app_global_get
	mulw
	intc 0 // 0
	bytec 20 //  "rewardTokenPrice"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:234
	// userStakingWeight = wideRatio([normalisedAmount, this.stakeDuration(userAddress).value], [1])
	frame_dig 0 // normalisedAmount: uint64
	frame_dig -1 // userAddress: Address
	bytec 14 //  "stakeDuration"
	app_local_get
	mulw
	intc 0 // 0
	intc 1 // 1
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:235
	// this.userStakingWeight(userAddress).value = userStakingWeight
	frame_dig -1 // userAddress: Address
	bytec 9 //  "userStakingWeight"
	frame_dig 1 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:236
	// this.totalStakingWeight.value = this.totalStakingWeight.value + (userStakingWeight as uint128)
	bytec 7 //  "totalStakingWeight"
	dup
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	itob
	b+
	dup
	bitlen
	intc 8 // 128
	<=

	// this.totalStakingWeight.value + (userStakingWeight as uint128) overflowed 128 bits
	assert
	bytec 21 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 6 // 16
	-
	swap
	substring3
	app_global_put

	// contracts/CompXStaking.algo.ts:238
	// userShare = wideRatio([userStakingWeight, PRECISION], [this.totalStakingWeight.value as uint64])
	frame_dig 1 // userStakingWeight: uint64
	intc 2 // 1000000000000000
	mulw
	intc 0 // 0
	bytec 7 //  "totalStakingWeight"
	app_global_get
	dup
	bitlen
	pushint 64
	<=

	// this.totalStakingWeight.value as uint64 overflowed 64 bits
	assert
	extract 8 8
	btoi
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // userShare: uint64

	// contracts/CompXStaking.algo.ts:240
	// userSharePercentage = wideRatio([userShare, 100], [PRECISION])
	frame_dig 2 // userShare: uint64
	intc 5 // 100
	mulw
	intc 0 // 0
	intc 2 // 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:241
	// numerator = wideRatio([userSharePercentage * PRECISION], [1])
	intc 0 // 0
	frame_dig 3 // userSharePercentage: uint64
	intc 2 // 1000000000000000
	*
	intc 0 // 0
	intc 1 // 1
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:242
	// denominator = PRECISION
	intc 2 // 1000000000000000
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:244
	// this.rewardRate(userAddress).value = (wideRatio([this.rewardsAvailablePerTick.value, numerator], [denominator]) / 100)
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	bytec 12 //  "rewardsAvailablePerTick"
	app_global_get
	frame_dig 4 // numerator: uint64
	mulw
	intc 0 // 0
	intc 2 //  denominator: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	intc 5 // 100
	/
	app_local_put

	// *if5_condition
	// contracts/CompXStaking.algo.ts:245
	// this.rewardRate(userAddress).value === 0
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	app_local_get
	intc 0 // 0
	==
	bz *if5_end

	// *if5_consequent
	// contracts/CompXStaking.algo.ts:246
	// this.rewardRate(userAddress).value = 10
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	pushint 10
	app_local_put

*if5_end:
	retsub

// stake(axfer,uint64,uint64)void
*abi_route_stake:
	// lockPeriod: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 2 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64,uint64)void
	callsub stake
	intc 1 // 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64, lockPeriod: uint64): void
stake:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 8 // 0x

	// contracts/CompXStaking.algo.ts:255
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/CompXStaking.algo.ts:256
	// assert(lockPeriod >= this.minLockUp.value, 'Lock period too short')
	frame_dig -3 // lockPeriod: uint64
	bytec 18 //  "minLockUp"
	app_global_get
	>=

	// Lock period too short
	assert

	// contracts/CompXStaking.algo.ts:257
	// assert(currentTimeStamp + lockPeriod < this.contractEndTimestamp.value, 'Lock period too long')
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	bytec 19 //  "contractEndTimestamp"
	app_global_get
	<

	// Lock period too long
	assert

	// contracts/CompXStaking.algo.ts:258
	// assert(currentTimeStamp <= this.contractEndTimestamp.value, 'Contract has ended')
	frame_dig 0 // currentTimeStamp: uint64
	bytec 19 //  "contractEndTimestamp"
	app_global_get
	<=

	// Contract has ended
	assert

	// contracts/CompXStaking.algo.ts:259
	// assert(this.stakeTokenPrice.value > 0, 'Stake token price not set')
	bytec 22 //  "stakeTokenPrice"
	app_global_get
	intc 0 // 0
	>

	// Stake token price not set
	assert

	// contracts/CompXStaking.algo.ts:260
	// assert(this.rewardTokenPrice.value > 0, 'Reward token price not set')
	bytec 20 //  "rewardTokenPrice"
	app_global_get
	intc 0 // 0
	>

	// Reward token price not set
	assert

	// contracts/CompXStaking.algo.ts:261
	// assert(this.staked(this.txn.sender).value === 0, 'User already staked')
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	intc 0 // 0
	==

	// User already staked
	assert

	// contracts/CompXStaking.algo.ts:262
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	intc 0 // 0
	>

	// Invalid quantity
	assert

	// contracts/CompXStaking.algo.ts:264
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 17 //  "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:270
	// this.staked(this.txn.sender).value = stakeTxn.assetAmount
	txn Sender
	bytec 3 //  "staked"
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	app_local_put

	// contracts/CompXStaking.algo.ts:271
	// this.stakeDuration(this.txn.sender).value = lockPeriod
	txn Sender
	bytec 14 //  "stakeDuration"
	frame_dig -3 // lockPeriod: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:273
	// this.calculateRewardRateAndGetUserStakingWeight(this.txn.sender)
	txn Sender
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:275
	// this.totalStaked.value += this.staked(this.txn.sender).value
	bytec 11 //  "totalStaked"
	app_global_get
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	+
	bytec 11 //  "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:276
	// this.stakeStartTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	bytec 16 //  "stakeStartTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:277
	// this.unlockTime(this.txn.sender).value = currentTimeStamp + lockPeriod
	txn Sender
	bytec 1 //  "unlockTime"
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	app_local_put

	// contracts/CompXStaking.algo.ts:278
	// this.lastUpdateTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	bytec 2 //  "lastUpdateTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put
	retsub

// accrueRewards(address)void
*abi_route_accrueRewards:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 7 // 32
	==

	// argument 0 (userAddress) for accrueRewards must be a address
	assert

	// execute accrueRewards(address)void
	callsub accrueRewards
	intc 1 // 1
	return

// accrueRewards(userAddress: Address): void
accrueRewards:
	proto 1 0

	// contracts/CompXStaking.algo.ts:282
	// assert(this.staked(userAddress).value > 0, 'User has no staked assets')
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	app_local_get
	intc 0 // 0
	>

	// User has no staked assets
	assert

	// contracts/CompXStaking.algo.ts:283
	// assert(this.stakeStartTime(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	bytec 16 //  "stakeStartTime"
	app_local_get
	intc 0 // 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:284
	// assert(this.stakeDuration(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	bytec 14 //  "stakeDuration"
	app_local_get
	intc 0 // 0
	>

	// User has not staked assets
	assert

	// *if6_condition
	// contracts/CompXStaking.algo.ts:286
	// this.unlockTime(userAddress).value > globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	global LatestTimestamp
	>
	bz *if6_elseif1_condition

	// *if6_consequent
	// contracts/CompXStaking.algo.ts:287
	// this.calculateRewardRateAndGetUserStakingWeight(userAddress)
	frame_dig -1 // userAddress: Address
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:288
	// this.accruedRewards(userAddress).value += (this.rewardRate(userAddress).value * ((globals.latestTimestamp) - this.lastUpdateTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	app_local_get
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:289
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	global LatestTimestamp
	app_local_put
	b *if6_end

*if6_elseif1_condition:
	// contracts/CompXStaking.algo.ts:292
	// this.lastUpdateTime(userAddress).value !== this.unlockTime(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	!=
	bz *if6_end

	// *if6_elseif1_consequent
	// contracts/CompXStaking.algo.ts:293
	// this.calculateRewardRateAndGetUserStakingWeight(userAddress)
	frame_dig -1 // userAddress: Address
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:294
	// this.accruedRewards(userAddress).value += (this.rewardRate(userAddress).value * (this.unlockTime(userAddress).value - this.lastUpdateTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:295
	// this.lastUpdateTime(userAddress).value = this.unlockTime(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	app_local_put

*if6_end:
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	intc 1 // 1
	return

// unstake(): void
unstake:
	proto 0 0

	// contracts/CompXStaking.algo.ts:301
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	intc 0 // 0
	>

	// No staked assets
	assert

	// contracts/CompXStaking.algo.ts:302
	// assert(this.unlockTime(this.txn.sender).value < (globals.latestTimestamp), 'unlock time not reached')
	txn Sender
	bytec 1 //  "unlockTime"
	app_local_get
	global LatestTimestamp
	<

	// unlock time not reached
	assert

	// contracts/CompXStaking.algo.ts:303
	// assert(this.stakeStartTime(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	bytec 16 //  "stakeStartTime"
	app_local_get
	intc 0 // 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:304
	// assert(this.stakeDuration(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	bytec 14 //  "stakeDuration"
	app_local_get
	intc 0 // 0
	>

	// User has not staked assets
	assert

	// *if7_condition
	// contracts/CompXStaking.algo.ts:306
	// this.unlockTime(this.txn.sender).value > globals.latestTimestamp
	txn Sender
	bytec 1 //  "unlockTime"
	app_local_get
	global LatestTimestamp
	>
	bz *if7_elseif1_condition

	// *if7_consequent
	// contracts/CompXStaking.algo.ts:308
	// this.calculateRewardRateAndGetUserStakingWeight(this.txn.sender)
	txn Sender
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:309
	// this.accruedRewards(this.txn.sender).value += (this.rewardRate(this.txn.sender).value * ((globals.latestTimestamp) - this.lastUpdateTime(this.txn.sender).value))
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	txn Sender
	bytec 6 //  "rewardRate"
	app_local_get
	global LatestTimestamp
	txn Sender
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	txn Sender
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:310
	// this.lastUpdateTime(this.txn.sender).value = globals.latestTimestamp
	txn Sender
	bytec 2 //  "lastUpdateTime"
	global LatestTimestamp
	app_local_put
	b *if7_end

*if7_elseif1_condition:
	// contracts/CompXStaking.algo.ts:312
	// this.lastUpdateTime(this.txn.sender).value !== this.unlockTime(this.txn.sender).value
	txn Sender
	bytec 2 //  "lastUpdateTime"
	app_local_get
	txn Sender
	bytec 1 //  "unlockTime"
	app_local_get
	!=
	bz *if7_end

	// *if7_elseif1_consequent
	// contracts/CompXStaking.algo.ts:314
	// this.calculateRewardRateAndGetUserStakingWeight(this.txn.sender)
	txn Sender
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:315
	// this.accruedRewards(this.txn.sender).value += (this.rewardRate(this.txn.sender).value * (this.unlockTime(this.txn.sender).value - this.lastUpdateTime(this.txn.sender).value))
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	txn Sender
	bytec 6 //  "rewardRate"
	app_local_get
	txn Sender
	bytec 1 //  "unlockTime"
	app_local_get
	txn Sender
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	txn Sender
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:316
	// this.lastUpdateTime(this.txn.sender).value = this.unlockTime(this.txn.sender).value
	txn Sender
	bytec 2 //  "lastUpdateTime"
	txn Sender
	bytec 1 //  "unlockTime"
	app_local_get
	app_local_put

*if7_end:
	// *if8_condition
	// contracts/CompXStaking.algo.ts:319
	// this.stakedAssetId.value === 0
	bytec 17 //  "stakedAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if8_else

	// *if8_consequent
	// contracts/CompXStaking.algo.ts:320
	// sendPayment({
	//         amount: this.staked(this.txn.sender).value,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:321
	// amount: this.staked(this.txn.sender).value
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:322
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:323
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:324
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if8_end

*if8_else:
	// contracts/CompXStaking.algo.ts:327
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: this.staked(this.txn.sender).value,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:328
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	bytec 17 //  "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:329
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:330
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:331
	// assetAmount: this.staked(this.txn.sender).value
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:332
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if8_end:
	// *if9_condition
	// contracts/CompXStaking.algo.ts:335
	// this.accruedRewards(this.txn.sender).value > 0
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	intc 0 // 0
	>
	bz *if9_end

	// *if9_consequent
	// *if10_condition
	// contracts/CompXStaking.algo.ts:336
	// this.rewardAssetId.value === 0
	bytec 10 //  "rewardAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if10_else

	// *if10_consequent
	// contracts/CompXStaking.algo.ts:337
	// sendPayment({
	//           amount: this.accruedRewards(this.txn.sender).value,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:338
	// amount: this.accruedRewards(this.txn.sender).value
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:339
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:340
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:341
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if10_end

*if10_else:
	// contracts/CompXStaking.algo.ts:344
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           assetAmount: this.accruedRewards(this.txn.sender).value,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:345
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 10 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:346
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:347
	// assetAmount: this.accruedRewards(this.txn.sender).value
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:348
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:349
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if10_end:

*if9_end:
	// contracts/CompXStaking.algo.ts:355
	// this.totalStakingWeight.value = this.totalStakingWeight.value - (this.userStakingWeight(this.txn.sender).value as uint128)
	bytec 7 //  "totalStakingWeight"
	dup
	app_global_get
	txn Sender
	bytec 9 //  "userStakingWeight"
	app_local_get
	itob
	b-
	dup
	bitlen
	intc 8 // 128
	<=

	// this.totalStakingWeight.value - (this.userStakingWeight(this.txn.sender).value as uint128) overflowed 128 bits
	assert
	bytec 21 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 6 // 16
	-
	swap
	substring3
	app_global_put

	// contracts/CompXStaking.algo.ts:356
	// this.remainingRewards.value -= this.accruedRewards(this.txn.sender).value
	bytec 4 //  "remainingRewards"
	app_global_get
	txn Sender
	bytec 0 //  "accruedRewards"
	app_local_get
	-
	bytec 4 //  "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:357
	// this.totalStaked.value -= this.staked(this.txn.sender).value
	bytec 11 //  "totalStaked"
	app_global_get
	txn Sender
	bytec 3 //  "staked"
	app_local_get
	-
	bytec 11 //  "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:359
	// this.staked(this.txn.sender).value = 0
	txn Sender
	bytec 3 //  "staked"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:360
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	bytec 0 //  "accruedRewards"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:361
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	bytec 6 //  "rewardRate"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:362
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	bytec 1 //  "unlockTime"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:363
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	bytec 9 //  "userStakingWeight"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:364
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	bytec 14 //  "stakeDuration"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:365
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	bytec 16 //  "stakeStartTime"
	intc 0 // 0
	app_local_put
	retsub

// adminUnstake(address)void
*abi_route_adminUnstake:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 7 // 32
	==

	// argument 0 (userAddress) for adminUnstake must be a address
	assert

	// execute adminUnstake(address)void
	callsub adminUnstake
	intc 1 // 1
	return

// adminUnstake(userAddress: Address): void
adminUnstake:
	proto 1 0

	// contracts/CompXStaking.algo.ts:369
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can unstake via this method')
	txn Sender
	bytec 15 //  "adminAddress"
	app_global_get
	==

	// Only admin can unstake via this method
	assert

	// *if11_condition
	// contracts/CompXStaking.algo.ts:371
	// this.unlockTime(userAddress).value > globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	global LatestTimestamp
	>
	bz *if11_elseif1_condition

	// *if11_consequent
	// contracts/CompXStaking.algo.ts:372
	// this.calculateRewardRateAndGetUserStakingWeight(userAddress)
	frame_dig -1 // userAddress: Address
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:373
	// this.accruedRewards(userAddress).value += (this.rewardRate(userAddress).value * ((globals.latestTimestamp) - this.lastUpdateTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	app_local_get
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:374
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	global LatestTimestamp
	app_local_put
	b *if11_end

*if11_elseif1_condition:
	// contracts/CompXStaking.algo.ts:377
	// this.lastUpdateTime(userAddress).value !== this.unlockTime(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	!=
	bz *if11_end

	// *if11_elseif1_consequent
	// contracts/CompXStaking.algo.ts:378
	// this.calculateRewardRateAndGetUserStakingWeight(userAddress)
	frame_dig -1 // userAddress: Address
	callsub calculateRewardRateAndGetUserStakingWeight

	// contracts/CompXStaking.algo.ts:379
	// this.accruedRewards(userAddress).value += (this.rewardRate(userAddress).value * (this.unlockTime(userAddress).value - this.lastUpdateTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	app_local_get
	-
	*
	+
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:380
	// this.lastUpdateTime(userAddress).value = this.unlockTime(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "lastUpdateTime"
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	app_local_get
	app_local_put

*if11_end:
	// *if12_condition
	// contracts/CompXStaking.algo.ts:383
	// this.stakedAssetId.value === 0
	bytec 17 //  "stakedAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if12_else

	// *if12_consequent
	// contracts/CompXStaking.algo.ts:384
	// sendPayment({
	//         amount: this.staked(userAddress).value,
	//         receiver: userAddress,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:385
	// amount: this.staked(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:386
	// receiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:387
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:388
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if12_end

*if12_else:
	// contracts/CompXStaking.algo.ts:391
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: userAddress,
	//         sender: this.app.address,
	//         assetAmount: this.staked(userAddress).value,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:392
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	bytec 17 //  "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:393
	// assetReceiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:394
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:395
	// assetAmount: this.staked(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:396
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if12_end:
	// *if13_condition
	// contracts/CompXStaking.algo.ts:399
	// this.rewardAssetId.value === 0
	bytec 10 //  "rewardAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if13_else

	// *if13_consequent
	// contracts/CompXStaking.algo.ts:400
	// sendPayment({
	//         amount: this.accruedRewards(userAddress).value,
	//         receiver: userAddress,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:401
	// amount: this.accruedRewards(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:402
	// receiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:403
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:404
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if13_end

*if13_else:
	// contracts/CompXStaking.algo.ts:407
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: userAddress,
	//         assetAmount: this.accruedRewards(userAddress).value,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	intc 4 //  axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:408
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 10 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:409
	// assetReceiver: userAddress
	frame_dig -1 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:410
	// assetAmount: this.accruedRewards(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:411
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:412
	// fee: 1_000
	intc 3 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if13_end:
	// contracts/CompXStaking.algo.ts:417
	// this.totalStakingWeight.value -= this.userStakingWeight(userAddress).value as uint128
	bytec 7 //  "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	bytec 9 //  "userStakingWeight"
	app_local_get
	itob
	b-
	bytec 7 //  "totalStakingWeight"
	dup
	bitlen
	intc 8 // 128
	<=

	// this.totalStakingWeight.value overflowed 128 bits
	assert
	bytec 21 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 6 // 16
	-
	swap
	substring3
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:418
	// this.remainingRewards.value -= this.accruedRewards(userAddress).value
	bytec 4 //  "remainingRewards"
	app_global_get
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	app_local_get
	-
	bytec 4 //  "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:419
	// this.totalStaked.value -= this.staked(userAddress).value
	bytec 11 //  "totalStaked"
	app_global_get
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	app_local_get
	-
	bytec 11 //  "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:421
	// this.staked(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 3 //  "staked"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:422
	// this.accruedRewards(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 0 //  "accruedRewards"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:423
	// this.rewardRate(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 6 //  "rewardRate"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:424
	// this.unlockTime(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 1 //  "unlockTime"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:425
	// this.userStakingWeight(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 9 //  "userStakingWeight"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:426
	// this.stakeDuration(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 14 //  "stakeDuration"
	intc 0 // 0
	app_local_put

	// contracts/CompXStaking.algo.ts:427
	// this.stakeStartTime(userAddress).value = 0
	frame_dig -1 // userAddress: Address
	bytec 16 //  "stakeStartTime"
	intc 0 // 0
	app_local_put
	retsub

*create_NoOp:
	pushbytes 0x3658c247 // method "createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x6fe9af85 // method "optInToAsset(uint64)void"
	pushbytes 0xb92bbbc5 // method "updateParams(uint64,uint64)void"
	pushbytes 0x7e509ec2 // method "addRewards(axfer,uint64)void"
	pushbytes 0xf47aa4c3 // method "addRewardsAlgo(pay,uint64)void"
	pushbytes 0x4229dc26 // method "removeRewards(uint64)void"
	pushbytes 0x6b24dade // method "setPrices(uint64,uint64)void"
	pushbytes 0x7d5acc1b // method "stake(axfer,uint64,uint64)void"
	pushbytes 0x477b8afb // method "accrueRewards(address)void"
	pushbytes 0x1d3f6040 // method "unstake()void"
	pushbytes 0x764d4af5 // method "adminUnstake(address)void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_addRewards *abi_route_addRewardsAlgo *abi_route_removeRewards *abi_route_setPrices *abi_route_stake *abi_route_accrueRewards *abi_route_unstake *abi_route_adminUnstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err