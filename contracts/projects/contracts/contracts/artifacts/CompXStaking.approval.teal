#pragma version 10

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// oracleAppID: uint64
	txna ApplicationArgs 5
	btoi

	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: AssetID, rewardAsset: AssetID, minLockUp: uint64, contractDuration: uint64, oracleAppID: AppID): void
createApplication:
	proto 5 0

	// contracts/CompXStaking.algo.ts:31
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: AssetID
	app_global_put

	// contracts/CompXStaking.algo.ts:32
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: AssetID
	app_global_put

	// contracts/CompXStaking.algo.ts:33
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -3 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:34
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:35
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:36
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:37
	// this.oracleAppID.value = oracleAppID
	byte 0x6f7261636c654170704944 // "oracleAppID"
	frame_dig -5 // oracleAppID: AppID
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:41
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:42
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:43
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put
	retsub

// optInToAsset(pay)void
*abi_route_optInToAsset:
	// mbrTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrTxn) for optInToAsset must be a pay transaction
	assert

	// execute optInToAsset(pay)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(mbrTxn: PayTxn): void
optInToAsset:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/CompXStaking.algo.ts:47
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:48
	// mod = 1
	int 1
	frame_bury 0 // mod: uint64

	// *if0_condition
	// contracts/CompXStaking.algo.ts:49
	// this.stakedAssetId.value !== this.rewardAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/CompXStaking.algo.ts:50
	// mod = 2
	int 2
	frame_bury 0 // mod: uint64

*if0_end:
	// contracts/CompXStaking.algo.ts:52
	// verifyPayTxn(mbrTxn, {
	//       receiver: this.app.address,
	//       amount: 2_000_000,
	//     })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	int 2_000_000
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"2_000_000"}
	assert

	// contracts/CompXStaking.algo.ts:56
	// sendAssetTransfer({
	//       xferAsset: this.stakedAssetId.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       fee: 1_000,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:57
	// xferAsset: this.stakedAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:58
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:59
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:60
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if1_condition
	// contracts/CompXStaking.algo.ts:62
	// mod === 2
	frame_dig 0 // mod: uint64
	int 2
	==
	bz *if1_end

	// *if1_consequent
	// contracts/CompXStaking.algo.ts:63
	// sendAssetTransfer({
	//         xferAsset: this.rewardAssetId.value,
	//         assetAmount: 0,
	//         assetReceiver: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:64
	// xferAsset: this.rewardAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:65
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:66
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:67
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// updateParams(uint64,uint64,uint64,uint64)void
*abi_route_updateParams:
	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// oracleAppID: uint64
	txna ApplicationArgs 3
	btoi

	// maxLockUp: uint64
	txna ApplicationArgs 2
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64,uint64,uint64,uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minLockUp: uint64, maxLockUp: uint64, oracleAppID: AppID, contractDuration: uint64): void
updateParams:
	proto 4 0

	// contracts/CompXStaking.algo.ts:73
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:75
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -1 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:76
	// this.oracleAppID.value = oracleAppID
	byte 0x6f7261636c654170704944 // "oracleAppID"
	frame_dig -3 // oracleAppID: AppID
	app_global_put

	// contracts/CompXStaking.algo.ts:77
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put
	retsub

// addRewards(axfer,uint64)void
*abi_route_addRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for addRewards must be a axfer transaction
	assert

	// execute addRewards(axfer,uint64)void
	callsub addRewards
	int 1
	return

// addRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
addRewards:
	proto 2 0

	// contracts/CompXStaking.algo.ts:81
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:82
	// assert(this.stakedAssetId.value.id !== 0, 'Staked AssetID not set')
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=

	// Staked AssetID not set
	assert

	// contracts/CompXStaking.algo.ts:83
	// assert(this.rewardAssetId.value.id !== 0, 'Reward AssetID not set')
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=

	// Reward AssetID not set
	assert

	// contracts/CompXStaking.algo.ts:84
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:85
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:87
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: this.rewardAssetId.value,
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"this.rewardAssetId.value"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:93
	// this.totalRewards.value += quantity
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put
	retsub

// stake(axfer,uint64,uint64)void
*abi_route_stake:
	// lockPeriod: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 2 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64, lockPeriod: uint64): void
stake:
	proto 3 0

	// contracts/CompXStaking.algo.ts:97
	// assert(this.stakedAssetId.value.id !== 0, 'Staked AssetID not set')
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=

	// Staked AssetID not set
	assert

	// contracts/CompXStaking.algo.ts:98
	// assert(this.rewardAssetId.value.id !== 0, 'Reward AssetID not set')
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=

	// Reward AssetID not set
	assert

	// contracts/CompXStaking.algo.ts:99
	// assert(this.totalRewards.value !== 0, 'No rewards to claim')
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	int 0
	!=

	// No rewards to claim
	assert

	// contracts/CompXStaking.algo.ts:100
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:101
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:102
	// assert(lockPeriod >= this.minLockUp.value, 'Lock period too short')
	frame_dig -3 // lockPeriod: uint64
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	>=

	// Lock period too short
	assert

	// contracts/CompXStaking.algo.ts:103
	// assert(lockPeriod <= this.contractDuration.value, 'Lock period too long')
	frame_dig -3 // lockPeriod: uint64
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	<=

	// Lock period too long
	assert

	// contracts/CompXStaking.algo.ts:105
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: quantity,
	//       xferAsset: this.stakedAssetId.value,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"this.stakedAssetId.value"}
	assert

	// contracts/CompXStaking.algo.ts:112
	// this.totalStaked.value += quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:113
	// this.staked(this.txn.sender).value += quantity
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_dig -2 // quantity: uint64
	+
	txn Sender
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:114
	// this.stakeStartTime(this.txn.sender).value = globals.latestTimestamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	global LatestTimestamp
	app_local_put

	// contracts/CompXStaking.algo.ts:116
	// this.unlockTime(this.txn.sender).value = globals.latestTimestamp + lockPeriod * 86400
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	global LatestTimestamp
	frame_dig -3 // lockPeriod: uint64
	int 86400
	*
	+
	app_local_put
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	int 1
	return

// unstake(): void
unstake:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/CompXStaking.algo.ts:125
	// quantity = this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_bury 0 // quantity: uint64

	// contracts/CompXStaking.algo.ts:126
	// assert(quantity > 0, 'No staked assets')
	frame_dig 0 // quantity: uint64
	int 0
	>

	// No staked assets
	assert

	// contracts/CompXStaking.algo.ts:127
	// assert(this.unlockTime(this.txn.sender).value < globals.latestTimestamp, 'unlock time not reached')
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	app_local_get
	global LatestTimestamp
	<

	// unlock time not reached
	assert

	// contracts/CompXStaking.algo.ts:129
	// stakingDuration = globals.latestTimestamp - this.stakeStartTime(this.txn.sender).value
	global LatestTimestamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	frame_bury 1 // stakingDuration: uint64

	// contracts/CompXStaking.algo.ts:130
	// stakeAmount = this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_bury 2 // stakeAmount: uint64

	// contracts/CompXStaking.algo.ts:135
	// normalisedAmount = (stakeAmount * stakeTokenPrice) / rewardTokenPrice
	frame_dig 2 // stakeAmount: uint64
	int 1000000
	*
	int 140000
	/
	frame_bury 3 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:136
	// reward =
	//       (normalisedAmount * stakingDuration * this.totalRewards.value) /
	//       ((this.totalStaked.value * stakeTokenPrice * this.contractDuration.value) / rewardTokenPrice)
	frame_dig 3 // normalisedAmount: uint64
	frame_dig 1 // stakingDuration: uint64
	*
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	*
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 1000000
	*
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	*
	int 140000
	/
	/
	frame_bury 4 // reward: uint64

	// contracts/CompXStaking.algo.ts:140
	// sendAssetTransfer({
	//       xferAsset: this.stakedAssetId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: quantity,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:141
	// xferAsset: this.stakedAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:142
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:143
	// assetAmount: quantity
	frame_dig 0 // quantity: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:144
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/CompXStaking.algo.ts:146
	// sendAssetTransfer({
	//       xferAsset: this.rewardAssetId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: reward,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:147
	// xferAsset: this.rewardAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:148
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:149
	// assetAmount: reward
	frame_dig 4 // reward: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:150
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/CompXStaking.algo.ts:153
	// this.totalStaked.value -= quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig 0 // quantity: uint64
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:154
	// this.totalRewards.value -= reward
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig 4 // reward: uint64
	-
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:155
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:156
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:160
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:161
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert

	// contracts/CompXStaking.algo.ts:163
	// sendAssetTransfer({
	//       xferAsset: this.stakedAssetId.value,
	//       assetReceiver: this.app.creator,
	//       assetAmount: this.app.address.assetBalance(this.stakedAssetId.value),
	//       assetCloseTo: this.app.creator,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:164
	// xferAsset: this.stakedAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:165
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:166
	// assetAmount: this.app.address.assetBalance(this.stakedAssetId.value)
	global CurrentApplicationAddress
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:167
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/CompXStaking.algo.ts:169
	// sendAssetTransfer({
	//       xferAsset: this.rewardAssetId.value,
	//       assetReceiver: this.app.creator,
	//       assetAmount: this.app.address.assetBalance(this.rewardAssetId.value),
	//       assetCloseTo: this.app.creator,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:170
	// xferAsset: this.rewardAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:171
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:172
	// assetAmount: this.app.address.assetBalance(this.rewardAssetId.value)
	global CurrentApplicationAddress
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:173
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/CompXStaking.algo.ts:175
	// sendPayment({
	//       amount: this.app.address.balance,
	//       receiver: this.app.creator,
	//       closeRemainderTo: this.app.creator,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:176
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:177
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:178
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(pay)void"
	method "updateParams(uint64,uint64,uint64,uint64)void"
	method "addRewards(axfer,uint64)void"
	method "stake(axfer,uint64,uint64)void"
	method "unstake()void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_addRewards *abi_route_stake *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err