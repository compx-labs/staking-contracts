#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// oracleAdmin: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==

	// argument 1 (oracleAdmin) for createApplication must be a address
	assert

	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minStakePeriodForRewards: uint64, oracleAdmin: Address, adminAddress: Address): void
createApplication:
	proto 5 0

	// contracts/InjectedRewardsPool.algo.ts:84
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:85
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:86
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:87
	// this.totalStakingWeight.value = 0 as uint128
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	byte 0x00000000000000000000000000000000
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:88
	// this.oracleAdminAddress.value = oracleAdmin
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	frame_dig -4 // oracleAdmin: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:89
	// this.stakeTokenPrice.value = 0
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:90
	// this.rewardTokenPrice.value = 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:91
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -5 // adminAddress: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:92
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -3 // minStakePeriodForRewards: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:93
	// this.injectedRewards.value = 0
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:94
	// this.lastRewardInjectionTime.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	int 0
	app_global_put
	retsub

// updateParams(uint64)void
*abi_route_updateParams:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minStakePeriodForRewards: uint64): void
updateParams:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:112
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/InjectedRewardsPool.algo.ts:113
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -1 // minStakePeriodForRewards: uint64
	app_global_put
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/InjectedRewardsPool.algo.ts:120
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:124
	// assert(!this.stakers.exists, 'staking pool already initialized')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/InjectedRewardsPool.algo.ts:125
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init storage')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init storage
	assert

	// contracts/InjectedRewardsPool.algo.ts:127
	// isTokenEligible = this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	frame_bury 0 // isTokenEligible: bool

	// contracts/InjectedRewardsPool.algo.ts:129
	// PoolInitMbr =
	//       ALGORAND_ACCOUNT_MIN_BALANCE +
	//       extraMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL)
	int 200000
	int 11200007
	callsub costForBoxStorage
	+
	frame_bury 1 // PoolInitMbr: uint64

	// contracts/InjectedRewardsPool.algo.ts:135
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: PoolInitMbr })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 1 // PoolInitMbr: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"PoolInitMbr"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:136
	// this.stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 11200000
	box_create
	pop

	// *if0_condition
	// contracts/InjectedRewardsPool.algo.ts:138
	// isTokenEligible
	frame_dig 0 // isTokenEligible: bool
	bz *if0_end

	// *if0_consequent
	// contracts/InjectedRewardsPool.algo.ts:140
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:141
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:142
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:143
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// injectRewards(axfer,uint64)void
*abi_route_injectRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64)void
	callsub injectRewards
	int 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
injectRewards:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:150
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:152
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:158
	// this.injectedRewards.value += quantity
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:159
	// this.lastInjectedRewards.value = quantity
	byte 0x6c617374496e6a656374656452657761726473 // "lastInjectedRewards"
	frame_dig -2 // quantity: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:160
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:161
	// this.totalRewardsInjected.value += quantity
	byte 0x746f74616c52657761726473496e6a6563746564 // "totalRewardsInjected"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473496e6a6563746564 // "totalRewardsInjected"
	swap
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:165
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/InjectedRewardsPool.algo.ts:166
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert
	retsub

// setPrices(uint64,uint64)void
*abi_route_setPrices:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrices(uint64,uint64)void
	callsub setPrices
	int 1
	return

// setPrices(stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
setPrices:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:177
	// assert(this.txn.sender === this.oracleAdminAddress.value, 'Only oracle admin can set prices')
	txn Sender
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	app_global_get
	==

	// Only oracle admin can set prices
	assert

	// contracts/InjectedRewardsPool.algo.ts:178
	// assert(stakeTokenPrice > 0, 'Invalid stake token price')
	frame_dig -1 // stakeTokenPrice: uint64
	int 0
	>

	// Invalid stake token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:179
	// assert(rewardTokenPrice > 0, 'Invalid reward token price')
	frame_dig -2 // rewardTokenPrice: uint64
	int 0
	>

	// Invalid reward token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:181
	// this.stakeTokenPrice.value = stakeTokenPrice
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	frame_dig -1 // stakeTokenPrice: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:182
	// this.rewardTokenPrice.value = rewardTokenPrice
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	frame_dig -2 // rewardTokenPrice: uint64
	app_global_put
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/InjectedRewardsPool.algo.ts:189
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/InjectedRewardsPool.algo.ts:190
	// assert(this.stakeTokenPrice.value > 0, 'Stake token price not set')
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	int 0
	>

	// Stake token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:191
	// assert(this.rewardTokenPrice.value > 0, 'Reward token price not set')
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	int 0
	>

	// Reward token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:192
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPool.algo.ts:194
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:200
	// actionComplete: boolean = false
	int 0
	frame_bury 1 // actionComplete: boolean

	// contracts/InjectedRewardsPool.algo.ts:201
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/InjectedRewardsPool.algo.ts:201
	// i < this.stakers.value.length
	frame_dig 2 // i: uint64
	int 100000
	<
	bz *for_0_end

	// *if1_condition
	// contracts/InjectedRewardsPool.algo.ts:202
	// actionComplete
	frame_dig 1 // actionComplete: boolean
	bz *if1_end

	// *if1_consequent
	b *for_0_end

*if1_end:
	// *if2_condition
	// contracts/InjectedRewardsPool.algo.ts:204
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPool.algo.ts:205
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if2_end:
	// contracts/InjectedRewardsPool.algo.ts:207
	// staker = clone(this.stakers.value[i])
	frame_dig 2 // i: uint64
	int 112
	* // acc * typeLength
	int 112
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if3_condition
	// contracts/InjectedRewardsPool.algo.ts:208
	// staker.account === this.txn.sender
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	txn Sender
	==
	bz *if3_elseif1_condition

	// *if3_consequent
	// contracts/InjectedRewardsPool.algo.ts:209
	// staker.stake += stakeTxn.assetAmount
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	replace3
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:210
	// this.stakers.value[i] = staker
	frame_dig 2 // i: uint64
	int 112
	* // acc * typeLength
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPool.algo.ts:211
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean
	b *if3_end

*if3_elseif1_condition:
	// contracts/InjectedRewardsPool.algo.ts:213
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 2 // i: uint64
	int 112
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if3_end

	// *if3_elseif1_consequent
	// contracts/InjectedRewardsPool.algo.ts:215
	// this.totalStaked.value += stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:217
	// this.stakers.value[i] = {
	//           account: this.txn.sender,
	//           stake: stakeTxn.assetAmount,
	//           stakeDuration: 0,
	//           stakeStartTime: currentTimeStamp,
	//           userStakingWeight: 0,
	//           lastRewardRate: 0,
	//           accruedRewards: 0,
	//           lastUpdateTime: currentTimeStamp,
	//           rewardRate: 0,
	//           userShare: 0,
	//           userSharePercentage: 0
	//         }
	frame_dig 2 // i: uint64
	int 112
	* // acc * typeLength
	txn Sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // currentTimeStamp: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // currentTimeStamp: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPool.algo.ts:230
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean

*if3_end:

*for_0_continue:
	// contracts/InjectedRewardsPool.algo.ts:201
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/InjectedRewardsPool.algo.ts:233
	// this.calculateRewardRates()
	callsub calculateRewardRates
	retsub

// calculateRewardRates(): void
calculateRewardRates:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/InjectedRewardsPool.algo.ts:237
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_1:
	// contracts/InjectedRewardsPool.algo.ts:237
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 100000
	<
	bz *for_1_end

	// *if4_condition
	// contracts/InjectedRewardsPool.algo.ts:238
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if4_end

	// *if4_consequent
	// contracts/InjectedRewardsPool.algo.ts:239
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if4_end:
	// contracts/InjectedRewardsPool.algo.ts:241
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	int 112
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if5_condition
	// contracts/InjectedRewardsPool.algo.ts:242
	// staker.userStakingWeight > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	int 0
	>
	bz *if5_end

	// *if5_consequent
	// contracts/InjectedRewardsPool.algo.ts:243
	// this.totalStakingWeight.value = this.totalStakingWeight.value - (staker.userStakingWeight as uint128)
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	app_global_get
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	itob
	b-
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value - (staker.userStakingWeight as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

*if5_end:
	// contracts/InjectedRewardsPool.algo.ts:245
	// userStakingWeight = (wideRatio([staker.stake, this.stakeTokenPrice.value], [this.rewardTokenPrice.value]))
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	mulw
	int 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // userStakingWeight: uint64

	// contracts/InjectedRewardsPool.algo.ts:246
	// staker.userStakingWeight = userStakingWeight
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 56 // headOffset
	frame_dig 2 // userStakingWeight: uint64
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:247
	// this.totalStakingWeight.value = this.totalStakingWeight.value + (userStakingWeight as uint128)
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	app_global_get
	frame_dig 2 // userStakingWeight: uint64
	itob
	b+
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value + (userStakingWeight as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:249
	// staker.userShare = wideRatio([userStakingWeight, PRECISION], [this.totalStakingWeight.value as uint64])
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 96 // headOffset
	frame_dig 2 // userStakingWeight: uint64
	int 1000000000000000
	mulw
	int 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	dup
	bitlen
	int 64
	<=

	// this.totalStakingWeight.value as uint64 overflowed 64 bits
	assert
	extract 8 8
	btoi
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:250
	// staker.userSharePercentage = wideRatio([staker.userShare, 100], [PRECISION])
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 104 // headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 96 8
	btoi
	int 100
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:252
	// availableRewards = this.injectedRewards.value > 0 ? this.injectedRewards.value : this.lastInjectedRewards.value
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	int 0
	>
	bz *ternary0_false
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	b *ternary0_end

*ternary0_false:
	byte 0x6c617374496e6a656374656452657761726473 // "lastInjectedRewards"
	app_global_get

*ternary0_end:
	frame_bury 3 // availableRewards: uint64

	// contracts/InjectedRewardsPool.algo.ts:254
	// staker.rewardRate = wideRatio([availableRewards, staker.userSharePercentage], [100])
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 88 // headOffset
	frame_dig 3 // availableRewards: uint64
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 104 8
	btoi
	mulw
	int 0
	int 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if6_condition
	// contracts/InjectedRewardsPool.algo.ts:256
	// staker.rewardRate === 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	int 0
	==
	bz *if6_end

	// *if6_consequent
	// contracts/InjectedRewardsPool.algo.ts:257
	// staker.rewardRate = 1
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000001
	replace2 88
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if6_end:
	// contracts/InjectedRewardsPool.algo.ts:259
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*for_1_continue:
	// contracts/InjectedRewardsPool.algo.ts:237
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_1

*for_1_end:
	retsub

// accrueRewards()void
*abi_route_accrueRewards:
	// execute accrueRewards()void
	callsub accrueRewards
	int 1
	return

// accrueRewards(): void
accrueRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:265
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/InjectedRewardsPool.algo.ts:265
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 100000
	<
	bz *for_2_end

	// *if7_condition
	// contracts/InjectedRewardsPool.algo.ts:266
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if7_end

	// *if7_consequent
	// contracts/InjectedRewardsPool.algo.ts:267
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if7_end:
	// contracts/InjectedRewardsPool.algo.ts:269
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	int 112
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if8_condition
	// contracts/InjectedRewardsPool.algo.ts:270
	// staker.stake > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	>
	bz *if8_end

	// *if8_consequent
	// contracts/InjectedRewardsPool.algo.ts:271
	// staker.stakeDuration = globals.latestTimestamp - staker.stakeStartTime
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 40 // headOffset
	global LatestTimestamp
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	-
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if9_condition
	// contracts/InjectedRewardsPool.algo.ts:272
	// staker.stakeDuration < this.minStakePeriodForRewards.value
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	<
	bz *if9_end

	// *if9_consequent
	// contracts/InjectedRewardsPool.algo.ts:272
	// return;
	retsub

*if9_end:
	// contracts/InjectedRewardsPool.algo.ts:274
	// staker.accruedRewards = staker.accruedRewards + staker.rewardRate
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 72 // headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	+
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:275
	// this.injectedRewards.value
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get

	// contracts/InjectedRewardsPool.algo.ts:275
	// this.injectedRewards.value
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	-

	// contracts/InjectedRewardsPool.algo.ts:275
	// staker.rewardRate
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	-

	// contracts/InjectedRewardsPool.algo.ts:276
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 80 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if10_condition
	// contracts/InjectedRewardsPool.algo.ts:278
	// this.rewardAssetId.value === this.stakedAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==
	bz *if10_end

	// *if10_consequent
	// contracts/InjectedRewardsPool.algo.ts:280
	// staker.stake += staker.rewardRate
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	+
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:281
	// this.totalStaked.value = this.totalStaked.value + staker.rewardRate
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	+
	app_global_put

*if10_end:
	// contracts/InjectedRewardsPool.algo.ts:283
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if8_end:

*for_2_continue:
	// contracts/InjectedRewardsPool.algo.ts:265
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	retsub

// claimRewards()void
*abi_route_claimRewards:
	// execute claimRewards()void
	callsub claimRewards
	int 1
	return

// claimRewards(): void
claimRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:290
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/InjectedRewardsPool.algo.ts:290
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 100000
	<
	bz *for_3_end

	// *if11_condition
	// contracts/InjectedRewardsPool.algo.ts:291
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if11_end

	// *if11_consequent
	// contracts/InjectedRewardsPool.algo.ts:292
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if11_end:
	// contracts/InjectedRewardsPool.algo.ts:294
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	int 112
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if12_condition
	// contracts/InjectedRewardsPool.algo.ts:296
	// staker.account === this.txn.sender
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	txn Sender
	==
	bz *if12_end

	// *if12_consequent
	// *if13_condition
	// contracts/InjectedRewardsPool.algo.ts:297
	// staker.accruedRewards > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	int 0
	>
	bz *if13_end

	// *if13_consequent
	// *if14_condition
	// contracts/InjectedRewardsPool.algo.ts:299
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if14_else

	// *if14_consequent
	// contracts/InjectedRewardsPool.algo.ts:300
	// sendPayment({
	//               amount: staker.accruedRewards,
	//               receiver: this.txn.sender,
	//               sender: this.app.address,
	//               fee: 1_000,
	//             })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:301
	// amount: staker.accruedRewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:302
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:303
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:304
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if14_end

*if14_else:
	// contracts/InjectedRewardsPool.algo.ts:307
	// sendAssetTransfer({
	//               xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//               assetReceiver: this.txn.sender,
	//               assetAmount: staker.accruedRewards,
	//               sender: this.app.address,
	//               fee: 1_000,
	//             })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:308
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:309
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:310
	// assetAmount: staker.accruedRewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:311
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:312
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if14_end:

*if13_end:
	// contracts/InjectedRewardsPool.algo.ts:316
	// staker.accruedRewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 72
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:317
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 80 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:318
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if12_end:

*for_3_continue:
	// contracts/InjectedRewardsPool.algo.ts:290
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	retsub

// unstake(uint64)void
*abi_route_unstake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute unstake(uint64)void
	callsub unstake
	int 1
	return

// unstake(quantity: uint64): void
unstake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:327
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts/InjectedRewardsPool.algo.ts:327
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	int 100000
	<
	bz *for_4_end

	// *if15_condition
	// contracts/InjectedRewardsPool.algo.ts:328
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if15_end

	// *if15_consequent
	// contracts/InjectedRewardsPool.algo.ts:329
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if15_end:
	// contracts/InjectedRewardsPool.algo.ts:331
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	int 112
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if16_condition
	// contracts/InjectedRewardsPool.algo.ts:333
	// this.stakedAssetId.value === this.rewardAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==
	bz *if16_else

	// *if16_consequent
	// *if17_condition
	// contracts/InjectedRewardsPool.algo.ts:335
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if17_else

	// *if17_consequent
	// contracts/InjectedRewardsPool.algo.ts:336
	// sendPayment({
	//             amount: quantity === 0 ? staker.stake : quantity,
	//             receiver: this.txn.sender,
	//             sender: this.app.address,
	//             fee: 1_000,
	//           })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:337
	// amount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary1_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // quantity: uint64

*ternary1_end:
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:338
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:339
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:340
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if17_end

*if17_else:
	// contracts/InjectedRewardsPool.algo.ts:343
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//             assetReceiver: this.txn.sender,
	//             sender: this.app.address,
	//             assetAmount: quantity === 0 ? staker.stake : quantity,
	//             fee: 1_000,
	//           })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:344
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:345
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:346
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:347
	// assetAmount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary2_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary2_end

*ternary2_false:
	frame_dig -1 // quantity: uint64

*ternary2_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:348
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if17_end:
	b *if16_end

*if16_else:
	// *if18_condition
	// contracts/InjectedRewardsPool.algo.ts:353
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if18_else

	// *if18_consequent
	// contracts/InjectedRewardsPool.algo.ts:355
	// sendPayment({
	//             amount: quantity === 0 ? staker.stake : quantity,
	//             receiver: this.txn.sender,
	//             sender: this.app.address,
	//             fee: 1_000,
	//           })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:356
	// amount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary3_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary3_end

*ternary3_false:
	frame_dig -1 // quantity: uint64

*ternary3_end:
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:357
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:358
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:359
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if18_end

*if18_else:
	// contracts/InjectedRewardsPool.algo.ts:362
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//             assetReceiver: this.txn.sender,
	//             sender: this.app.address,
	//             assetAmount: quantity === 0 ? staker.stake : quantity,
	//             fee: 1_000,
	//           })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:363
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:364
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:365
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:366
	// assetAmount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary4_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary4_end

*ternary4_false:
	frame_dig -1 // quantity: uint64

*ternary4_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:367
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if18_end:
	// *if19_condition
	// contracts/InjectedRewardsPool.algo.ts:370
	// staker.accruedRewards > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	int 0
	>
	bz *if19_end

	// *if19_consequent
	// *if20_condition
	// contracts/InjectedRewardsPool.algo.ts:371
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if20_else

	// *if20_consequent
	// contracts/InjectedRewardsPool.algo.ts:372
	// sendPayment({
	//               amount: staker.accruedRewards,
	//               receiver: this.txn.sender,
	//               sender: this.app.address,
	//               fee: 1_000,
	//             })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:373
	// amount: staker.accruedRewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:374
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:375
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:376
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if20_end

*if20_else:
	// contracts/InjectedRewardsPool.algo.ts:379
	// sendAssetTransfer({
	//               xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//               assetReceiver: this.txn.sender,
	//               assetAmount: staker.accruedRewards,
	//               sender: this.app.address,
	//               fee: 1_000,
	//             })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:380
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:381
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:382
	// assetAmount: staker.accruedRewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:383
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:384
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if20_end:

*if19_end:

*if16_end:
	// contracts/InjectedRewardsPool.algo.ts:391
	// this.totalStakingWeight.value = this.totalStakingWeight.value - (staker.userStakingWeight as uint128)
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	app_global_get
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	itob
	b-
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value - (staker.userStakingWeight as uint128) overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:392
	// this.totalStaked.value = this.totalStaked.value - staker.stake
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	-
	app_global_put

	// *if21_condition
	// contracts/InjectedRewardsPool.algo.ts:394
	// quantity === 0
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *if21_else

	// *if21_consequent
	// contracts/InjectedRewardsPool.algo.ts:395
	// this.stakers.value[i] = {
	//           account: globals.zeroAddress,
	//           stake: 0,
	//           stakeDuration: 0,
	//           stakeStartTime: 0,
	//           userStakingWeight: 0,
	//           lastRewardRate: 0,
	//           accruedRewards: 0,
	//           lastUpdateTime: 0,
	//           rewardRate: 0,
	//           userShare: 0,
	//           userSharePercentage: 0
	//         }
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	global ZeroAddress
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace
	b *if21_end

*if21_else:
	// contracts/InjectedRewardsPool.algo.ts:409
	// staker.stake = staker.stake - quantity
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // quantity: uint64
	-
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:410
	// staker.accruedRewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 72
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:411
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 80 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:412
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 112
	* // acc * typeLength
	frame_dig 1 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if21_end:

*for_4_continue:
	// contracts/InjectedRewardsPool.algo.ts:327
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "updateParams(uint64)void"
	method "initStorage(pay)void"
	method "injectRewards(axfer,uint64)void"
	method "setPrices(uint64,uint64)void"
	method "stake(axfer,uint64)void"
	method "accrueRewards()void"
	method "claimRewards()void"
	method "unstake(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_updateParams *abi_route_initStorage *abi_route_injectRewards *abi_route_setPrices *abi_route_stake *abi_route_accrueRewards *abi_route_claimRewards *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err