#pragma version 11
intcblock 0 1 56 6 300 5 32 4 100000 1_000 1000000000000000 28007 40 127
bytecblock 0x0a8101 0x 0x7374616b657273 0x746f74616c5374616b6564 0x6e756d5374616b657273 0x696e6a656374656441534152657761726473 0x0000000000000000 0x72657761726441737365744964 0x61646d696e41646472657373 0x7374616b656441737365744964 0x6c617374526577617264496e6a656374696f6e54696d65

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(adminAddress: Address): void
createApplication:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:52
	// this.adminAddress.value = adminAddress
	bytec 8 //  "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:53
	// this.contractVersion.value = VERSION
	pushbytes 0x636f6e747261637456657273696f6e // "contractVersion"
	pushint 2001
	app_global_put
	retsub

// initApplication(uint64,uint64,pay)void
*abi_route_initApplication:
	// initialBalanceTxn: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (initialBalanceTxn) for initApplication must be a pay transaction
	assert

	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAssetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute initApplication(uint64,uint64,pay)void
	callsub initApplication
	intc 1 // 1
	return

// initApplication(stakedAssetId: uint64, rewardAssetId: uint64, initialBalanceTxn: PayTxn): void
//
// Initializes the staking pool application with the specified staked asset and reward asset.
//
// Sets up global state variables, verifies the initial funding payment, and opts the contract into the staked asset
// and reward asset if necesary.
// Only the admin address can call this function.
//
// @param stakedAssetId - The asset ID of the token to be staked in the pool.
// @param rewardAssetId - The asset ID of the token to be distributed as rewards.
// @param initialBalanceTxn - The payment transaction providing the initial minimum balance for the contract.
initApplication:
	proto 3 0

	// contracts/InjectedRewardsPool.algo.ts:71
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init application')
	txn Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// Only admin can init application
	assert

	// contracts/InjectedRewardsPool.algo.ts:73
	// this.stakedAssetId.value = stakedAssetId
	bytec 9 //  "stakedAssetId"
	frame_dig -1 // stakedAssetId: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:74
	// this.rewardAssetId.value = rewardAssetId
	bytec 7 //  "rewardAssetId"
	frame_dig -2 // rewardAssetId: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:75
	// this.totalStaked.value = 0
	bytec 3 //  "totalStaked"
	intc 0 // 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:76
	// this.lastRewardInjectionTime.value = 0
	bytec 10 //  "lastRewardInjectionTime"
	intc 0 // 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:77
	// this.injectedASARewards.value = 0
	bytec 5 //  "injectedASARewards"
	intc 0 // 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:78
	// this.numStakers.value = 0
	bytec 4 //  "numStakers"
	intc 0 // 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:80
	// verifyPayTxn(initialBalanceTxn, {
	//       receiver: this.app.address,
	//       amount: INITIAL_PAY_AMOUNT,
	//     })
	// verify receiver
	frame_dig -3 // initialBalanceTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"initialBalanceTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -3 // initialBalanceTxn: PayTxn
	gtxns Amount
	pushint 400000
	==

	// transaction verification failed: {"txn":"initialBalanceTxn","field":"amount","expected":"INITIAL_PAY_AMOUNT"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:85
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(stakedAssetId),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:86
	// xferAsset: AssetID.fromUint64(stakedAssetId)
	frame_dig -1 // stakedAssetId: uint64
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:87
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:88
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if0_condition
	// contracts/InjectedRewardsPool.algo.ts:90
	// rewardAssetId !== stakedAssetId
	frame_dig -2 // rewardAssetId: uint64
	frame_dig -1 // stakedAssetId: uint64
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/InjectedRewardsPool.algo.ts:91
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(rewardAssetId),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:92
	// xferAsset: AssetID.fromUint64(rewardAssetId)
	frame_dig -2 // rewardAssetId: uint64
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:93
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:94
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// updateAdminAddress(address)void
*abi_route_updateAdminAddress:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (adminAddress) for updateAdminAddress must be a address
	assert

	// execute updateAdminAddress(address)void
	callsub updateAdminAddress
	intc 1 // 1
	return

// updateAdminAddress(adminAddress: Address): void
updateAdminAddress:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:101
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update admin address')
	txn Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// Only admin can update admin address
	assert

	// contracts/InjectedRewardsPool.algo.ts:102
	// this.adminAddress.value = adminAddress
	bytec 8 //  "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/InjectedRewardsPool.algo.ts:109
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	pushint 2500
	frame_dig -1 // totalNumBytes: uint64
	pushint 400
	*
	+
	retsub

// getMBRForPoolCreation()(uint64)
*abi_route_getMBRForPoolCreation:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute getMBRForPoolCreation()(uint64)
	callsub getMBRForPoolCreation
	concat
	log
	intc 1 // 1
	return

// getMBRForPoolCreation(): mbrReturn
getMBRForPoolCreation:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:113
	// nonAlgoRewardMBR = 0
	intc 0 // 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if1_condition
	// contracts/InjectedRewardsPool.algo.ts:114
	// this.rewardAssetId.value !== 0
	bytec 7 //  "rewardAssetId"
	app_global_get
	intc 0 // 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/InjectedRewardsPool.algo.ts:115
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	intc 8 // 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if1_end:
	// contracts/InjectedRewardsPool.algo.ts:117
	// mbr =
	//       ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	intc 8 // 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	intc 11 // 28007
	callsub costForBoxStorage
	+
	intc 13 // 127
	callsub costForBoxStorage
	+
	frame_bury 1 // mbr: uint64

	// contracts/InjectedRewardsPool.algo.ts:123
	// return {
	//       mbrPayment: mbr,
	//     };
	frame_dig 1 // mbr: uint64
	itob

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	intc 1 // 1
	return

// initStorage(mbrPayment: PayTxn): void
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/InjectedRewardsPool.algo.ts:129
	// assert(!this.stakers.exists, 'staking pool already initialized')
	bytec 2 //  "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/InjectedRewardsPool.algo.ts:130
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init storage')
	txn Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// Only admin can init storage
	assert

	// contracts/InjectedRewardsPool.algo.ts:132
	// nonAlgoRewardMBR = 0
	intc 0 // 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if2_condition
	// contracts/InjectedRewardsPool.algo.ts:133
	// this.rewardAssetId.value !== 0
	bytec 7 //  "rewardAssetId"
	app_global_get
	intc 0 // 0
	!=
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPool.algo.ts:134
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	intc 8 // 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if2_end:
	// contracts/InjectedRewardsPool.algo.ts:136
	// poolMBR =
	//       ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	intc 8 // 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	intc 11 // 28007
	callsub costForBoxStorage
	+
	intc 13 // 127
	callsub costForBoxStorage
	+
	frame_bury 1 // poolMBR: uint64

	// contracts/InjectedRewardsPool.algo.ts:143
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: poolMBR })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 1 // poolMBR: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"poolMBR"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:144
	// this.stakers.create()
	bytec 2 //  "stakers"
	pushint 28000
	box_create
	pop

	// contracts/InjectedRewardsPool.algo.ts:145
	// this.minimumBalance.value = poolMBR
	pushbytes 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	frame_dig 1 // poolMBR: uint64
	app_global_put

	// *if3_condition
	// contracts/InjectedRewardsPool.algo.ts:147
	// nonAlgoRewardMBR > 0
	frame_dig 0 // nonAlgoRewardMBR: uint64
	intc 0 // 0
	>
	bz *if3_end

	// *if3_consequent
	// contracts/InjectedRewardsPool.algo.ts:149
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:150
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 7 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:151
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:152
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if3_end:
	retsub

// injectRewards(axfer,uint64,uint64)void
*abi_route_injectRewards:
	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 7 //  axfer
	==

	// argument 2 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64,uint64)void
	callsub injectRewards
	intc 1 // 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64, rewardAssetId: uint64): void
injectRewards:
	proto 3 0

	// contracts/InjectedRewardsPool.algo.ts:160
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:162
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.adminAddress.value,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(rewardAssetId),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.adminAddress.value"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	frame_dig -3 // rewardAssetId: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(rewardAssetId)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:168
	// this.injectedASARewards.value += quantity
	bytec 5 //  "injectedASARewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	bytec 5 //  "injectedASARewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:169
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	bytec 10 //  "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 1 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:174
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	bytec 8 //  "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/InjectedRewardsPool.algo.ts:175
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	bytec 3 //  "totalStaked"
	app_global_get
	intc 0 // 0
	==

	// Staked assets still exist
	assert

	// contracts/InjectedRewardsPool.algo.ts:178
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetCloseTo: globals.zeroAddress,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:179
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	bytec 9 //  "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:180
	// assetCloseTo: globals.zeroAddress
	global ZeroAddress
	itxn_field AssetCloseTo

	// contracts/InjectedRewardsPool.algo.ts:181
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:182
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if4_condition
	// contracts/InjectedRewardsPool.algo.ts:185
	// this.stakedAssetId.value !== this.rewardAssetId.value
	bytec 9 //  "stakedAssetId"
	app_global_get
	bytec 7 //  "rewardAssetId"
	app_global_get
	!=
	bz *if4_end

	// *if4_consequent
	// contracts/InjectedRewardsPool.algo.ts:186
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetCloseTo: globals.zeroAddress,
	//         assetAmount: 0,
	//         assetReceiver: this.app.address,
	//       })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:187
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 7 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:188
	// assetCloseTo: globals.zeroAddress
	global ZeroAddress
	itxn_field AssetCloseTo

	// contracts/InjectedRewardsPool.algo.ts:189
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:190
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// contracts/InjectedRewardsPool.algo.ts:194
	// sendPayment({
	//       amount: (this.adminAddress.value.balance - globals.minBalance),
	//       receiver: this.adminAddress.value,
	//       sender: this.app.address,
	//       fee: STANDARD_TXN_FEE,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:195
	// amount: (this.adminAddress.value.balance - globals.minBalance)
	bytec 8 //  "adminAddress"
	app_global_get
	acct_params_get AcctBalance
	pop
	global MinBalance
	-
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:196
	// receiver: this.adminAddress.value
	bytec 8 //  "adminAddress"
	app_global_get
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:197
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:198
	// fee: STANDARD_TXN_FEE
	intc 9 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 7 //  axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	intc 1 // 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 3

	// contracts/InjectedRewardsPool.algo.ts:203
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/InjectedRewardsPool.algo.ts:204
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	intc 0 // 0
	>

	// Invalid quantity
	assert

	// *if5_condition
	// contracts/InjectedRewardsPool.algo.ts:205
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if5_end

	// *if5_consequent
	// contracts/InjectedRewardsPool.algo.ts:206
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if5_end:
	// contracts/InjectedRewardsPool.algo.ts:208
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 9 //  "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:214
	// actionComplete: boolean = false
	intc 0 // 0
	frame_bury 1 // actionComplete: boolean

	// *if6_condition
	// contracts/InjectedRewardsPool.algo.ts:215
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if6_end

	// *if6_consequent
	// contracts/InjectedRewardsPool.algo.ts:216
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if6_end:
	// contracts/InjectedRewardsPool.algo.ts:218
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/InjectedRewardsPool.algo.ts:218
	// i < this.stakers.value.length
	frame_dig 2 // i: uint64
	pushint 500
	<
	bz *for_0_end

	// *if7_condition
	// contracts/InjectedRewardsPool.algo.ts:219
	// actionComplete
	frame_dig 1 // actionComplete: boolean
	bz *if7_end

	// *if7_consequent
	b *for_0_end

*if7_end:
	// *if8_condition
	// contracts/InjectedRewardsPool.algo.ts:221
	// this.stakers.value[i].account === this.txn.sender
	frame_dig 2 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	txn Sender
	==
	bz *if8_elseif1_condition

	// *if8_consequent
	// *if9_condition
	// contracts/InjectedRewardsPool.algo.ts:223
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if9_end

	// *if9_consequent
	// contracts/InjectedRewardsPool.algo.ts:224
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if9_end:
	// contracts/InjectedRewardsPool.algo.ts:227
	// staker = clone(this.stakers.value[i])
	frame_dig 2 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 2 // 56
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 3 // staker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:228
	// staker.stake += stakeTxn.assetAmount
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	intc 6 //  headOffset
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	replace3
	frame_bury 3 // staker: (address,uint64,uint64,uint64)

	// *if10_condition
	// contracts/InjectedRewardsPool.algo.ts:230
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if10_end

	// *if10_consequent
	// contracts/InjectedRewardsPool.algo.ts:231
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if10_end:
	// contracts/InjectedRewardsPool.algo.ts:233
	// this.stakers.value[i] = staker
	frame_dig 2 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPool.algo.ts:234
	// this.totalStaked.value += stakeTxn.assetAmount
	bytec 3 //  "totalStaked"
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	bytec 3 //  "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:235
	// actionComplete = true
	intc 1 // 1
	frame_bury 1 // actionComplete: boolean
	b *if8_end

*if8_elseif1_condition:
	// contracts/InjectedRewardsPool.algo.ts:236
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 2 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if8_end

	// *if8_elseif1_consequent
	// *if11_condition
	// contracts/InjectedRewardsPool.algo.ts:238
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if11_end

	// *if11_consequent
	// contracts/InjectedRewardsPool.algo.ts:239
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if11_end:
	// contracts/InjectedRewardsPool.algo.ts:241
	// this.totalStaked.value = this.totalStaked.value + stakeTxn.assetAmount
	bytec 3 //  "totalStaked"
	dup
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	app_global_put

	// *if12_condition
	// contracts/InjectedRewardsPool.algo.ts:242
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if12_end

	// *if12_consequent
	// contracts/InjectedRewardsPool.algo.ts:243
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if12_end:
	// contracts/InjectedRewardsPool.algo.ts:245
	// this.stakers.value[i] = {
	//           account: this.txn.sender,
	//           stake: stakeTxn.assetAmount,
	//           accruedASARewards: 0,
	//           userSharePercentage: 0,
	//         }
	frame_dig 2 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	txn Sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	bytec 6 // 0x0000000000000000
	concat
	bytec 6 // 0x0000000000000000
	concat
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// *if13_condition
	// contracts/InjectedRewardsPool.algo.ts:251
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if13_end

	// *if13_consequent
	// contracts/InjectedRewardsPool.algo.ts:252
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if13_end:
	// contracts/InjectedRewardsPool.algo.ts:254
	// this.numStakers.value = this.numStakers.value + 1
	bytec 4 //  "numStakers"
	dup
	app_global_get
	intc 1 // 1
	+
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:255
	// actionComplete = true
	intc 1 // 1
	frame_bury 1 // actionComplete: boolean

*if8_end:
	// *if14_condition
	// contracts/InjectedRewardsPool.algo.ts:258
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if14_end

	// *if14_consequent
	// contracts/InjectedRewardsPool.algo.ts:259
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if14_end:

*for_0_continue:
	// contracts/InjectedRewardsPool.algo.ts:218
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/InjectedRewardsPool.algo.ts:262
	// assert(actionComplete, 'Stake  failed')
	frame_dig 1 // actionComplete: boolean

	// Stake  failed
	assert
	retsub

// accrueRewards()void
*abi_route_accrueRewards:
	// execute accrueRewards()void
	callsub accrueRewards
	intc 1 // 1
	return

// accrueRewards(): void
accrueRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 4

	// *if15_condition
	// contracts/InjectedRewardsPool.algo.ts:266
	// this.injectedASARewards.value * 2 > this.numStakers.value
	bytec 5 //  "injectedASARewards"
	app_global_get
	pushint 2
	*
	bytec 4 //  "numStakers"
	app_global_get
	>
	bz *if15_end

	// *if15_consequent
	// contracts/InjectedRewardsPool.algo.ts:267
	// additionalASARewards = this.injectedASARewards.value
	bytec 5 //  "injectedASARewards"
	app_global_get
	frame_bury 0 // additionalASARewards: uint64

	// contracts/InjectedRewardsPool.algo.ts:269
	// for (let i = 0; i < this.numStakers.value; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_1:
	// contracts/InjectedRewardsPool.algo.ts:269
	// i < this.numStakers.value
	frame_dig 1 // i: uint64
	bytec 4 //  "numStakers"
	app_global_get
	<
	bz *for_1_end

	// *if16_condition
	// contracts/InjectedRewardsPool.algo.ts:270
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if16_end

	// *if16_consequent
	// contracts/InjectedRewardsPool.algo.ts:271
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if16_end:
	// *if17_condition
	// contracts/InjectedRewardsPool.algo.ts:274
	// this.stakers.value[i].stake > 0
	frame_dig 1 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 6 //  headOffset
	+
	pushint 8
	bytec 2 //  "stakers"
	cover 2
	box_extract
	btoi
	intc 0 // 0
	>
	bz *if17_end

	// *if17_consequent
	// contracts/InjectedRewardsPool.algo.ts:275
	// staker = clone(this.stakers.value[i])
	frame_dig 1 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 2 // 56
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:277
	// stakerShare = wideRatio([staker.stake, PRECISION], [this.totalStaked.value])
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	intc 10 // 1000000000000000
	mulw
	intc 0 // 0
	bytec 3 //  "totalStaked"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 3 // stakerShare: uint64

	// contracts/InjectedRewardsPool.algo.ts:278
	// staker.userSharePercentage = stakerShare
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	pushint 48 // headOffset
	frame_dig 3 // stakerShare: uint64
	itob
	replace3
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

	// *if18_condition
	// contracts/InjectedRewardsPool.algo.ts:280
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if18_end

	// *if18_consequent
	// contracts/InjectedRewardsPool.algo.ts:281
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if18_end:
	// *if19_condition
	// contracts/InjectedRewardsPool.algo.ts:284
	// additionalASARewards > 0
	frame_dig 0 // additionalASARewards: uint64
	intc 0 // 0
	>
	bz *if19_end

	// *if19_consequent
	// contracts/InjectedRewardsPool.algo.ts:285
	// rewardRate = wideRatio([additionalASARewards, stakerShare], [PRECISION])
	frame_dig 0 // additionalASARewards: uint64
	frame_dig 3 // stakerShare: uint64
	mulw
	intc 0 // 0
	intc 10 // 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 4 // rewardRate: uint64

	// *if20_condition
	// contracts/InjectedRewardsPool.algo.ts:286
	// rewardRate === 0
	frame_dig 4 // rewardRate: uint64
	intc 0 // 0
	==
	bz *if20_end

	// *if20_consequent
	// contracts/InjectedRewardsPool.algo.ts:287
	// rewardRate = 1
	intc 1 // 1
	frame_bury 4 // rewardRate: uint64

*if20_end:
	// *if21_condition
	// contracts/InjectedRewardsPool.algo.ts:290
	// this.injectedASARewards.value >= rewardRate
	bytec 5 //  "injectedASARewards"
	app_global_get
	frame_dig 4 // rewardRate: uint64
	>=
	bz *if21_else

	// *if21_consequent
	// contracts/InjectedRewardsPool.algo.ts:291
	// this.injectedASARewards.value = this.injectedASARewards.value - rewardRate
	bytec 5 //  "injectedASARewards"
	dup
	app_global_get
	frame_dig 4 // rewardRate: uint64
	-
	app_global_put

	// *if22_condition
	// contracts/InjectedRewardsPool.algo.ts:293
	// this.rewardAssetId.value === this.stakedAssetId.value
	bytec 7 //  "rewardAssetId"
	app_global_get
	bytec 9 //  "stakedAssetId"
	app_global_get
	==
	bz *if22_else

	// *if22_consequent
	// contracts/InjectedRewardsPool.algo.ts:295
	// staker.stake = staker.stake + rewardRate
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	intc 6 //  headOffset
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 4 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:296
	// this.totalStaked.value = this.totalStaked.value + rewardRate
	bytec 3 //  "totalStaked"
	dup
	app_global_get
	frame_dig 4 // rewardRate: uint64
	+
	app_global_put
	b *if22_end

*if22_else:
	// contracts/InjectedRewardsPool.algo.ts:298
	// staker.accruedASARewards = staker.accruedASARewards + rewardRate
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	intc 12 //  headOffset
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 4 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

*if22_end:
	b *if21_end

*if21_else:
	// *if23_condition
	// contracts/InjectedRewardsPool.algo.ts:302
	// this.rewardAssetId.value === this.stakedAssetId.value
	bytec 7 //  "rewardAssetId"
	app_global_get
	bytec 9 //  "stakedAssetId"
	app_global_get
	==
	bz *if23_else

	// *if23_consequent
	// contracts/InjectedRewardsPool.algo.ts:304
	// staker.stake = staker.stake + (rewardRate - this.injectedASARewards.value)
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	intc 6 //  headOffset
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 4 // rewardRate: uint64
	bytec 5 //  "injectedASARewards"
	app_global_get
	-
	+
	itob
	replace3
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:305
	// this.totalStaked.value = this.totalStaked.value + (rewardRate - this.injectedASARewards.value)
	bytec 3 //  "totalStaked"
	dup
	app_global_get
	frame_dig 4 // rewardRate: uint64
	bytec 5 //  "injectedASARewards"
	app_global_get
	-
	+
	app_global_put
	b *if23_end

*if23_else:
	// contracts/InjectedRewardsPool.algo.ts:307
	// staker.accruedASARewards = staker.accruedASARewards + rewardRate
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	intc 12 //  headOffset
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 4 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 2 // staker: (address,uint64,uint64,uint64)

*if23_end:
	// contracts/InjectedRewardsPool.algo.ts:309
	// this.injectedASARewards.value = 0
	bytec 5 //  "injectedASARewards"
	intc 0 // 0
	app_global_put

*if21_end:
	// contracts/InjectedRewardsPool.algo.ts:312
	// this.stakers.value[i] = staker
	frame_dig 1 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	frame_dig 2 // staker: (address,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

*if19_end:

*if17_end:

*for_1_continue:
	// contracts/InjectedRewardsPool.algo.ts:269
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	// contracts/InjectedRewardsPool.algo.ts:316
	// this.lastAccrualTime.value = globals.latestTimestamp
	pushbytes 0x6c6173744163637275616c54696d65 // "lastAccrualTime"
	global LatestTimestamp
	app_global_put

*if15_end:
	retsub

// getStaker(address: Address): StakeInfo
getStaker:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/InjectedRewardsPool.algo.ts:321
	// for (let i = 0; i < this.numStakers.value; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/InjectedRewardsPool.algo.ts:321
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	bytec 4 //  "numStakers"
	app_global_get
	<
	bz *for_2_end

	// *if24_condition
	// contracts/InjectedRewardsPool.algo.ts:322
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if24_end

	// *if24_consequent
	// contracts/InjectedRewardsPool.algo.ts:323
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if24_end:
	// *if25_condition
	// contracts/InjectedRewardsPool.algo.ts:325
	// this.stakers.value[i].account === address
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_dig -1 // address: Address
	==
	bz *if25_end

	// *if25_consequent
	// contracts/InjectedRewardsPool.algo.ts:326
	// return clone(this.stakers.value[i]);
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 2 // 56
	bytec 2 //  "stakers"
	cover 2
	box_extract
	b *getStaker*return

*if25_end:

*for_2_continue:
	// contracts/InjectedRewardsPool.algo.ts:321
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	// contracts/InjectedRewardsPool.algo.ts:329
	// return {
	//       account: globals.zeroAddress,
	//       stake: 0,
	//       accruedASARewards: 0,
	//       userSharePercentage: 0,
	//     };
	global ZeroAddress
	bytec 6 // 0x0000000000000000
	concat
	bytec 6 // 0x0000000000000000
	concat
	bytec 6 // 0x0000000000000000
	concat

*getStaker*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// claimRewards()void
*abi_route_claimRewards:
	// execute claimRewards()void
	callsub claimRewards
	intc 1 // 1
	return

// claimRewards(): void
claimRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/InjectedRewardsPool.algo.ts:338
	// staker = this.getStaker(this.txn.sender)
	txn Sender
	callsub getStaker
	frame_bury 0 // staker: (address,uint64,uint64,uint64)

	// *if26_condition
	// contracts/InjectedRewardsPool.algo.ts:340
	// staker.accruedASARewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	intc 0 // 0
	>
	bz *if26_end

	// *if26_consequent
	// contracts/InjectedRewardsPool.algo.ts:341
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: staker.accruedASARewards,
	//         fee: STANDARD_TXN_FEE,
	//       })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:342
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 7 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:343
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:344
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:345
	// assetAmount: staker.accruedASARewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:346
	// fee: STANDARD_TXN_FEE
	intc 9 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPool.algo.ts:348
	// staker.accruedASARewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	bytec 6 // 0x0000000000000000
	replace2 40
	frame_bury 0 // staker: (address,uint64,uint64,uint64)

*if26_end:
	// *if27_condition
	// contracts/InjectedRewardsPool.algo.ts:350
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if27_end

	// *if27_consequent
	// contracts/InjectedRewardsPool.algo.ts:351
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if27_end:
	// contracts/InjectedRewardsPool.algo.ts:353
	// this.setStaker(staker.account, staker)
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker
	retsub

// unstake(uint64)void
*abi_route_unstake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute unstake(uint64)void
	callsub unstake
	intc 1 // 1
	return

// unstake(quantity: uint64): void
unstake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 4

	// contracts/InjectedRewardsPool.algo.ts:357
	// for (let i = 0; i < this.numStakers.value; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/InjectedRewardsPool.algo.ts:357
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	bytec 4 //  "numStakers"
	app_global_get
	<
	bz *for_3_end

	// *if28_condition
	// contracts/InjectedRewardsPool.algo.ts:358
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if28_end

	// *if28_consequent
	// contracts/InjectedRewardsPool.algo.ts:359
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if28_end:
	// contracts/InjectedRewardsPool.algo.ts:361
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 2 // 56
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

	// *if29_condition
	// contracts/InjectedRewardsPool.algo.ts:362
	// staker.account === this.txn.sender
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	txn Sender
	==
	bz *if29_end

	// *if29_consequent
	// *if30_condition
	// contracts/InjectedRewardsPool.algo.ts:363
	// staker.stake > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	intc 0 // 0
	>
	bz *if30_end

	// *if30_consequent
	// contracts/InjectedRewardsPool.algo.ts:364
	// assert(staker.stake >= quantity)
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // quantity: uint64
	>=
	assert

	// *if31_condition
	// contracts/InjectedRewardsPool.algo.ts:365
	// this.stakedAssetId.value === 0
	bytec 9 //  "stakedAssetId"
	app_global_get
	intc 0 // 0
	==
	bz *if31_else

	// *if31_consequent
	// contracts/InjectedRewardsPool.algo.ts:366
	// sendPayment({
	//               amount: quantity === 0 ? staker.stake : quantity,
	//               receiver: this.txn.sender,
	//               sender: this.app.address,
	//               fee: 0,
	//             })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:367
	// amount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	intc 0 // 0
	==
	bz *ternary0_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary0_end

*ternary0_false:
	frame_dig -1 // quantity: uint64

*ternary0_end:
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:368
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:369
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:370
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if31_end

*if31_else:
	// contracts/InjectedRewardsPool.algo.ts:373
	// sendAssetTransfer({
	//               xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//               assetReceiver: this.txn.sender,
	//               sender: this.app.address,
	//               assetAmount: quantity === 0 ? staker.stake : quantity,
	//               fee: STANDARD_TXN_FEE,
	//             })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:374
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	bytec 9 //  "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:375
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:376
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:377
	// assetAmount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	intc 0 // 0
	==
	bz *ternary1_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // quantity: uint64

*ternary1_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:378
	// fee: STANDARD_TXN_FEE
	intc 9 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if31_end:

*if30_end:
	// *if32_condition
	// contracts/InjectedRewardsPool.algo.ts:383
	// staker.accruedASARewards > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	intc 0 // 0
	>
	bz *if32_end

	// *if32_consequent
	// contracts/InjectedRewardsPool.algo.ts:384
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//             assetReceiver: this.txn.sender,
	//             sender: this.app.address,
	//             assetAmount: staker.accruedASARewards,
	//             fee: STANDARD_TXN_FEE,
	//           })
	itxn_begin
	intc 7 //  axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:385
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	bytec 7 //  "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:386
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:387
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:388
	// assetAmount: staker.accruedASARewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:389
	// fee: STANDARD_TXN_FEE
	intc 9 // 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPool.algo.ts:391
	// staker.accruedASARewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	bytec 6 // 0x0000000000000000
	replace2 40
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

*if32_end:
	// contracts/InjectedRewardsPool.algo.ts:395
	// this.totalStaked.value = this.totalStaked.value - (quantity === 0 ? staker.stake : quantity)
	bytec 3 //  "totalStaked"
	dup
	app_global_get
	frame_dig -1 // quantity: uint64
	intc 0 // 0
	==
	bz *ternary3_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary3_end

*ternary3_false:
	frame_dig -1 // quantity: uint64

*ternary3_end:
	-
	app_global_put

	// *if33_condition
	// contracts/InjectedRewardsPool.algo.ts:397
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if33_end

	// *if33_consequent
	// contracts/InjectedRewardsPool.algo.ts:398
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if33_end:
	// *if34_condition
	// contracts/InjectedRewardsPool.algo.ts:401
	// quantity === 0
	frame_dig -1 // quantity: uint64
	intc 0 // 0
	==
	bz *if34_else

	// *if34_consequent
	// contracts/InjectedRewardsPool.algo.ts:402
	// removedStaker: StakeInfo = {
	//             account: globals.zeroAddress,
	//             stake: 0,
	//             accruedASARewards: 0,
	//             userSharePercentage: 0,
	//           }
	global ZeroAddress
	bytec 6 // 0x0000000000000000
	concat
	bytec 6 // 0x0000000000000000
	concat
	bytec 6 // 0x0000000000000000
	concat
	frame_bury 2 // removedStaker: StakeInfo

	// contracts/InjectedRewardsPool.algo.ts:408
	// this.setStaker(staker.account, removedStaker)
	frame_dig 2 // removedStaker: StakeInfo
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// contracts/InjectedRewardsPool.algo.ts:410
	// lastStaker = this.getStaker(this.stakers.value[this.numStakers.value - 1].account)
	bytec 4 //  "numStakers"
	app_global_get
	intc 1 // 1
	-
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	callsub getStaker
	frame_bury 3 // lastStaker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:411
	// lastStakerIndex = this.getStakerIndex(this.stakers.value[this.numStakers.value - 1].account)
	bytec 4 //  "numStakers"
	app_global_get
	intc 1 // 1
	-
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	callsub getStakerIndex
	frame_bury 4 // lastStakerIndex: uint64

	// *if35_condition
	// contracts/InjectedRewardsPool.algo.ts:412
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if35_end

	// *if35_consequent
	// contracts/InjectedRewardsPool.algo.ts:413
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if35_end:
	// contracts/InjectedRewardsPool.algo.ts:415
	// this.setStakerAtIndex(lastStaker, i)
	frame_dig 0 // i: uint64
	frame_dig 3 // lastStaker: (address,uint64,uint64,uint64)
	callsub setStakerAtIndex

	// contracts/InjectedRewardsPool.algo.ts:417
	// this.setStakerAtIndex(removedStaker, lastStakerIndex)
	frame_dig 4 // lastStakerIndex: uint64
	frame_dig 2 // removedStaker: StakeInfo
	callsub setStakerAtIndex

	// contracts/InjectedRewardsPool.algo.ts:418
	// this.numStakers.value = this.numStakers.value - 1
	bytec 4 //  "numStakers"
	dup
	app_global_get
	intc 1 // 1
	-
	app_global_put
	b *if34_end

*if34_else:
	// contracts/InjectedRewardsPool.algo.ts:420
	// staker.stake = staker.stake - quantity
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	intc 6 //  headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // quantity: uint64
	-
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

	// contracts/InjectedRewardsPool.algo.ts:421
	// staker.accruedASARewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	bytec 6 // 0x0000000000000000
	replace2 40
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

*if34_end:
	// contracts/InjectedRewardsPool.algo.ts:423
	// this.setStaker(staker.account, staker)
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

*if29_end:

*for_3_continue:
	// contracts/InjectedRewardsPool.algo.ts:357
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	retsub

// getStakerIndex(address: Address): uint64
getStakerIndex:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/InjectedRewardsPool.algo.ts:429
	// for (let i = 0; i < this.numStakers.value; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts/InjectedRewardsPool.algo.ts:429
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	bytec 4 //  "numStakers"
	app_global_get
	<
	bz *for_4_end

	// *if36_condition
	// contracts/InjectedRewardsPool.algo.ts:430
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if36_end

	// *if36_consequent
	// contracts/InjectedRewardsPool.algo.ts:431
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if36_end:
	// *if37_condition
	// contracts/InjectedRewardsPool.algo.ts:433
	// this.stakers.value[i].account === address
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_dig -1 // address: Address
	==
	bz *if37_end

	// *if37_consequent
	// contracts/InjectedRewardsPool.algo.ts:434
	// return i;
	frame_dig 0 // i: uint64
	b *getStakerIndex*return

*if37_end:

*for_4_continue:
	// contracts/InjectedRewardsPool.algo.ts:429
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	// contracts/InjectedRewardsPool.algo.ts:437
	// return 0;
	intc 0 // 0

*getStakerIndex*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// setStaker(stakerAccount: Address, staker: StakeInfo): void
setStaker:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/InjectedRewardsPool.algo.ts:441
	// for (let i = 0; i < this.numStakers.value; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_5:
	// contracts/InjectedRewardsPool.algo.ts:441
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	bytec 4 //  "numStakers"
	app_global_get
	<
	bz *for_5_end

	// *if38_condition
	// contracts/InjectedRewardsPool.algo.ts:442
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 4 // 300
	<
	bz *if38_end

	// *if38_consequent
	// contracts/InjectedRewardsPool.algo.ts:443
	// increaseOpcodeBudget()
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 0 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 5 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if38_end:
	// *if39_condition
	// contracts/InjectedRewardsPool.algo.ts:445
	// this.stakers.value[i].account === stakerAccount
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_dig -1 // stakerAccount: Address
	==
	bz *if39_elseif1_condition

	// *if39_consequent
	// contracts/InjectedRewardsPool.algo.ts:446
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	frame_dig -2 // staker: StakeInfo
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPool.algo.ts:447
	// return;
	retsub
	b *if39_end

*if39_elseif1_condition:
	// contracts/InjectedRewardsPool.algo.ts:448
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	intc 0 // 0
	+
	intc 6 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if39_end

	// *if39_elseif1_consequent
	// contracts/InjectedRewardsPool.algo.ts:449
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	intc 2 // 56
	* // acc * typeLength
	frame_dig -2 // staker: StakeInfo
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPool.algo.ts:450
	// return;
	retsub

*if39_end:

*for_5_continue:
	// contracts/InjectedRewardsPool.algo.ts:441
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_5

*for_5_end:
	retsub

// setStakerAtIndex(staker: StakeInfo, index: uint64): void
setStakerAtIndex:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:455
	// this.stakers.value[index] = staker
	frame_dig -2 // index: uint64
	intc 2 // 56
	* // acc * typeLength
	frame_dig -1 // staker: StakeInfo
	bytec 2 //  "stakers"
	cover 2
	box_replace
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	intc 1 // 1
	return

// gas(): void
gas:
	proto 0 0
	retsub

*create_NoOp:
	pushbytes 0xd324bea4 // method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x13c3f503 // method "initApplication(uint64,uint64,pay)void"
	pushbytes 0xa3fea40f // method "updateAdminAddress(address)void"
	pushbytes 0x4c436726 // method "getMBRForPoolCreation()(uint64)"
	pushbytes 0x47cfcc04 // method "initStorage(pay)void"
	pushbytes 0x347007eb // method "injectRewards(axfer,uint64,uint64)void"
	pushbytes 0xf4eb4a03 // method "stake(axfer,uint64)void"
	pushbytes 0xea4bca57 // method "accrueRewards()void"
	pushbytes 0xa5ae6bd1 // method "claimRewards()void"
	pushbytes 0x813ce89a // method "unstake(uint64)void"
	pushbytes 0x3172ca9d // method "gas()void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_updateAdminAddress *abi_route_getMBRForPoolCreation *abi_route_initStorage *abi_route_injectRewards *abi_route_stake *abi_route_accrueRewards *abi_route_claimRewards *abi_route_unstake *abi_route_gas

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err