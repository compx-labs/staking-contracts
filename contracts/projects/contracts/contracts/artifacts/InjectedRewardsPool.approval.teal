#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// oracleAdmin: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==

	// argument 1 (oracleAdmin) for createApplication must be a address
	assert

	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minStakePeriodForRewards: uint64, oracleAdmin: Address, adminAddress: Address): void
createApplication:
	proto 5 0

	// contracts/InjectedRewardsPool.algo.ts:63
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:64
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:65
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:66
	// this.totalStakingWeight.value = 0 as uint128
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	byte 0x00000000000000000000000000000000
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:67
	// this.oracleAdminAddress.value = oracleAdmin
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	frame_dig -4 // oracleAdmin: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:68
	// this.stakeTokenPrice.value = 0
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:69
	// this.rewardTokenPrice.value = 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:70
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -5 // adminAddress: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:71
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -3 // minStakePeriodForRewards: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:72
	// this.injectedRewards.value = 0
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:73
	// this.lastRewardInjectionTime.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	int 0
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:78
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:79
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:80
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:81
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:82
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:83
	// this.lastUpdateTime(this.txn.sender).value = 0
	txn Sender
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:84
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:85
	// this.useShare(this.txn.sender).value = 0
	txn Sender
	byte 0x7573655368617265 // "useShare"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:86
	// this.userSharePercentage(this.txn.sender).value = 0
	txn Sender
	byte 0x75736572536861726550657263656e74616765 // "userSharePercentage"
	int 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:90
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/InjectedRewardsPool.algo.ts:92
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:93
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:94
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:95
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:96
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64)void
*abi_route_updateParams:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minStakePeriodForRewards: uint64): void
updateParams:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:102
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/InjectedRewardsPool.algo.ts:103
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -1 // minStakePeriodForRewards: uint64
	app_global_put
	retsub

// injectRewards(axfer,uint64)void
*abi_route_injectRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64)void
	callsub injectRewards
	int 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
injectRewards:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:108
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:110
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:116
	// this.injectedRewards.value += quantity
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:117
	// this.lastInjectedRewards.value = quantity
	byte 0x6c617374496e6a656374656452657761726473 // "lastInjectedRewards"
	frame_dig -2 // quantity: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:118
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:119
	// this.totalRewardsInjected.value += quantity
	byte 0x746f74616c52657761726473496e6a6563746564 // "totalRewardsInjected"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473496e6a6563746564 // "totalRewardsInjected"
	swap
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:123
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/InjectedRewardsPool.algo.ts:124
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert
	retsub

// setPrices(uint64,uint64)void
*abi_route_setPrices:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrices(uint64,uint64)void
	callsub setPrices
	int 1
	return

// setPrices(stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
setPrices:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:135
	// assert(this.txn.sender === this.oracleAdminAddress.value, 'Only oracle admin can set prices')
	txn Sender
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	app_global_get
	==

	// Only oracle admin can set prices
	assert

	// contracts/InjectedRewardsPool.algo.ts:136
	// assert(stakeTokenPrice > 0, 'Invalid stake token price')
	frame_dig -1 // stakeTokenPrice: uint64
	int 0
	>

	// Invalid stake token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:137
	// assert(rewardTokenPrice > 0, 'Invalid reward token price')
	frame_dig -2 // rewardTokenPrice: uint64
	int 0
	>

	// Invalid reward token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:139
	// this.stakeTokenPrice.value = stakeTokenPrice
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	frame_dig -1 // stakeTokenPrice: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:140
	// this.rewardTokenPrice.value = rewardTokenPrice
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	frame_dig -2 // rewardTokenPrice: uint64
	app_global_put
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPool.algo.ts:147
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/InjectedRewardsPool.algo.ts:148
	// assert(this.stakeTokenPrice.value > 0, 'Stake token price not set')
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	int 0
	>

	// Stake token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:149
	// assert(this.rewardTokenPrice.value > 0, 'Reward token price not set')
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	int 0
	>

	// Reward token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:150
	// assert(this.staked(this.txn.sender).value === 0, 'User already staked, use Restake method instead')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	==

	// User already staked, use Restake method instead
	assert

	// contracts/InjectedRewardsPool.algo.ts:151
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPool.algo.ts:153
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:159
	// this.staked(this.txn.sender).value = stakeTxn.assetAmount
	txn Sender
	byte 0x7374616b6564 // "staked"
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:161
	// this.calculateRewardRate(this.txn.sender)
	txn Sender
	callsub calculateRewardRate

	// contracts/InjectedRewardsPool.algo.ts:162
	// this.totalStaked.value += this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:163
	// this.stakeStartTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:164
	// this.lastUpdateTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:165
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put
	retsub

// updateRewardRate(address)void
*abi_route_updateRewardRate:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for updateRewardRate must be a address
	assert

	// execute updateRewardRate(address)void
	callsub updateRewardRate
	int 1
	return

// updateRewardRate(userAddress: Address): void
updateRewardRate:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:170
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update rewards rates')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update rewards rates
	assert

	// contracts/InjectedRewardsPool.algo.ts:172
	// this.stakeDuration(userAddress).value = globals.latestTimestamp - this.stakeStartTime(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:173
	// assert(this.stakeDuration(userAddress).value >= this.minStakePeriodForRewards.value, 'User has not staked for minimum period')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	>=

	// User has not staked for minimum period
	assert

	// contracts/InjectedRewardsPool.algo.ts:174
	// this.calculateRewardRate(userAddress)
	frame_dig -1 // userAddress: Address
	callsub calculateRewardRate
	retsub

// calculateRewardRate(userAddress: Address): void
calculateRewardRate:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// *if0_condition
	// contracts/InjectedRewardsPool.algo.ts:178
	// this.userStakingWeight(userAddress).value > 0
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	int 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts/InjectedRewardsPool.algo.ts:179
	// this.totalStakingWeight.value -= this.userStakingWeight(userAddress).value as uint128
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	itob
	b-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	swap
	app_global_put

*if0_end:
	// contracts/InjectedRewardsPool.algo.ts:181
	// userStakingWeight = (wideRatio([this.staked(userAddress).value, this.stakeTokenPrice.value], [this.rewardTokenPrice.value])) / 2
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	mulw
	int 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	int 2
	/
	frame_bury 0 // userStakingWeight: uint64

	// contracts/InjectedRewardsPool.algo.ts:182
	// this.totalStakingWeight.value += userStakingWeight as uint128
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 0 // userStakingWeight: uint64
	itob
	b+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:183
	// this.userStakingWeight(userAddress).value = userStakingWeight
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig 0 // userStakingWeight: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:185
	// userShare = wideRatio([userStakingWeight, PRECISION], [this.totalStakingWeight.value as uint64])
	frame_dig 0 // userStakingWeight: uint64
	int 1000000000000000
	mulw
	int 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	dup
	bitlen
	int 64
	<=

	// this.totalStakingWeight.value as uint64 overflowed 64 bits
	assert
	extract 8 8
	btoi
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // userShare: uint64

	// contracts/InjectedRewardsPool.algo.ts:186
	// this.useShare(userAddress).value = userShare
	frame_dig -1 // userAddress: Address
	byte 0x7573655368617265 // "useShare"
	frame_dig 1 // userShare: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:187
	// userSharePercentage = wideRatio([userShare, 100], [PRECISION])
	frame_dig 1 // userShare: uint64
	int 100
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // userSharePercentage: uint64

	// contracts/InjectedRewardsPool.algo.ts:188
	// this.userSharePercentage(userAddress).value = userSharePercentage
	frame_dig -1 // userAddress: Address
	byte 0x75736572536861726550657263656e74616765 // "userSharePercentage"
	frame_dig 2 // userSharePercentage: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:190
	// availableRewards = this.injectedRewards.value > 0 ? this.injectedRewards.value : this.lastInjectedRewards.value
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	int 0
	>
	bz *ternary0_false
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	b *ternary0_end

*ternary0_false:
	byte 0x6c617374496e6a656374656452657761726473 // "lastInjectedRewards"
	app_global_get

*ternary0_end:
	frame_bury 3 // availableRewards: uint64

	// contracts/InjectedRewardsPool.algo.ts:192
	// this.rewardRate(userAddress).value = wideRatio([availableRewards, userSharePercentage], [100])
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig 3 // availableRewards: uint64
	frame_dig 2 // userSharePercentage: uint64
	mulw
	int 0
	int 100
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	app_local_put

	// *if1_condition
	// contracts/InjectedRewardsPool.algo.ts:193
	// this.rewardRate(userAddress).value === 0
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/InjectedRewardsPool.algo.ts:194
	// this.rewardRate(userAddress).value = 10
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	int 10
	app_local_put

*if1_end:
	retsub

// accrueRewards(address)void
*abi_route_accrueRewards:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for accrueRewards must be a address
	assert

	// execute accrueRewards(address)void
	callsub accrueRewards
	int 1
	return

// accrueRewards(userAddress: Address): void
accrueRewards:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:200
	// assert(this.staked(userAddress).value > 0, 'User has no staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// User has no staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:201
	// assert(this.stakeStartTime(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:202
	// this.stakeDuration(userAddress).value = globals.latestTimestamp - this.stakeStartTime(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:203
	// assert(this.stakeDuration(userAddress).value >= this.minStakePeriodForRewards.value, 'User has not staked for minimum period')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	>=

	// User has not staked for minimum period
	assert

	// contracts/InjectedRewardsPool.algo.ts:205
	// this.accruedRewards(userAddress).value += this.rewardRate(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	+
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	uncover 2
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:206
	// this.injectedRewards.value -= this.rewardRate(userAddress).value
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	-
	byte 0x696e6a656374656452657761726473 // "injectedRewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:207
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	global LatestTimestamp
	app_local_put

	// *if2_condition
	// contracts/InjectedRewardsPool.algo.ts:209
	// this.rewardAssetId.value === this.stakedAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPool.algo.ts:211
	// this.staked(userAddress).value += this.rewardRate(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	+
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:212
	// this.totalStaked.value += this.rewardRate(userAddress).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

*if2_end:
	retsub

// restake(axfer,uint64)void
*abi_route_restake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for restake must be a axfer transaction
	assert

	// execute restake(axfer,uint64)void
	callsub restake
	int 1
	return

// restake(stakeTxn: AssetTransferTxn, quantity: uint64): void
restake:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:218
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPool.algo.ts:220
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:226
	// this.staked(this.txn.sender).value += stakeTxn.assetAmount
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	txn Sender
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:227
	// this.totalStaked.value += stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:229
	// this.stakeStartTime(this.txn.sender).value = globals.latestTimestamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	global LatestTimestamp
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:230
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:233
	// this.calculateRewardRate(this.txn.sender)
	txn Sender
	callsub calculateRewardRate
	retsub

// claimRewards()void
*abi_route_claimRewards:
	// execute claimRewards()void
	callsub claimRewards
	int 1
	return

// claimRewards(): void
claimRewards:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:237
	// assert(this.stakedAssetId.value !== this.rewardAssetId.value, 'Claim rewards not allowed for same asset')
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	!=

	// Claim rewards not allowed for same asset
	assert

	// contracts/InjectedRewardsPool.algo.ts:238
	// assert(this.accruedRewards(this.txn.sender).value > 0, 'No accrued rewards')
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>

	// No accrued rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:239
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// No staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:240
	// assert(this.stakeStartTime(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:241
	// assert(this.stakeDuration(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// *if3_condition
	// contracts/InjectedRewardsPool.algo.ts:243
	// this.accruedRewards(this.txn.sender).value > 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>
	bz *if3_end

	// *if3_consequent
	// *if4_condition
	// contracts/InjectedRewardsPool.algo.ts:244
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if4_else

	// *if4_consequent
	// contracts/InjectedRewardsPool.algo.ts:245
	// sendPayment({
	//           amount: this.accruedRewards(this.txn.sender).value,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:246
	// amount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:247
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:248
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:249
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if4_end

*if4_else:
	// contracts/InjectedRewardsPool.algo.ts:252
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           assetAmount: this.accruedRewards(this.txn.sender).value,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:253
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:254
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:255
	// assetAmount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:256
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:257
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:

*if3_end:
	// contracts/InjectedRewardsPool.algo.ts:261
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put
	retsub

// unstake(uint64)void
*abi_route_unstake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute unstake(uint64)void
	callsub unstake
	int 1
	return

// unstake(quantity: uint64): void
unstake:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:266
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// No staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:267
	// assert(this.stakeStartTime(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:268
	// assert(this.stakeDuration(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// *if5_condition
	// contracts/InjectedRewardsPool.algo.ts:270
	// this.stakedAssetId.value === this.rewardAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==
	bz *if5_else

	// *if5_consequent
	// *if6_condition
	// contracts/InjectedRewardsPool.algo.ts:271
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if6_else

	// *if6_consequent
	// contracts/InjectedRewardsPool.algo.ts:272
	// sendPayment({
	//           amount: quantity === 0 ? this.staked(this.txn.sender).value : quantity,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:273
	// amount: quantity === 0 ? this.staked(this.txn.sender).value : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary1_false
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // quantity: uint64

*ternary1_end:
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:274
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:275
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:276
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if6_end

*if6_else:
	// contracts/InjectedRewardsPool.algo.ts:279
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           sender: this.app.address,
	//           assetAmount: quantity === 0 ? this.staked(this.txn.sender).value : quantity,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:280
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:281
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:282
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:283
	// assetAmount: quantity === 0 ? this.staked(this.txn.sender).value : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary2_false
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	b *ternary2_end

*ternary2_false:
	frame_dig -1 // quantity: uint64

*ternary2_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:284
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if6_end:
	b *if5_end

*if5_else:
	// *if7_condition
	// contracts/InjectedRewardsPool.algo.ts:289
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if7_else

	// *if7_consequent
	// contracts/InjectedRewardsPool.algo.ts:290
	// sendPayment({
	//           amount: quantity === 0 ? this.staked(this.txn.sender).value : quantity,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:291
	// amount: quantity === 0 ? this.staked(this.txn.sender).value : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary3_false
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	b *ternary3_end

*ternary3_false:
	frame_dig -1 // quantity: uint64

*ternary3_end:
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:292
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:293
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:294
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if7_end

*if7_else:
	// contracts/InjectedRewardsPool.algo.ts:297
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           sender: this.app.address,
	//           assetAmount: quantity === 0 ? this.staked(this.txn.sender).value : quantity,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:298
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:299
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:300
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:301
	// assetAmount: quantity === 0 ? this.staked(this.txn.sender).value : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary4_false
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	b *ternary4_end

*ternary4_false:
	frame_dig -1 // quantity: uint64

*ternary4_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:302
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if7_end:
	// *if8_condition
	// contracts/InjectedRewardsPool.algo.ts:305
	// this.accruedRewards(this.txn.sender).value > 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>
	bz *if8_end

	// *if8_consequent
	// *if9_condition
	// contracts/InjectedRewardsPool.algo.ts:306
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if9_else

	// *if9_consequent
	// contracts/InjectedRewardsPool.algo.ts:307
	// sendPayment({
	//             amount: this.accruedRewards(this.txn.sender).value,
	//             receiver: this.txn.sender,
	//             sender: this.app.address,
	//             fee: 1_000,
	//           })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:308
	// amount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/InjectedRewardsPool.algo.ts:309
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPool.algo.ts:310
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:311
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if9_end

*if9_else:
	// contracts/InjectedRewardsPool.algo.ts:314
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//             assetReceiver: this.txn.sender,
	//             assetAmount: this.accruedRewards(this.txn.sender).value,
	//             sender: this.app.address,
	//             fee: 1_000,
	//           })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:315
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:316
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:317
	// assetAmount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:318
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:319
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if9_end:

*if8_end:

*if5_end:
	// contracts/InjectedRewardsPool.algo.ts:326
	// this.totalStakingWeight.value -= this.userStakingWeight(this.txn.sender).value as uint128
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	itob
	b-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	dup
	bitlen
	int 128
	<=

	// this.totalStakingWeight.value overflowed 128 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 16
	-
	swap
	substring3
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:327
	// this.totalStaked.value -= this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:329
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:330
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:331
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:332
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:333
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:334
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(uint64)void"
	method "updateParams(uint64)void"
	method "injectRewards(axfer,uint64)void"
	method "setPrices(uint64,uint64)void"
	method "stake(axfer,uint64)void"
	method "updateRewardRate(address)void"
	method "accrueRewards(address)void"
	method "restake(axfer,uint64)void"
	method "claimRewards()void"
	method "unstake(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_injectRewards *abi_route_setPrices *abi_route_stake *abi_route_updateRewardRate *abi_route_accrueRewards *abi_route_restake *abi_route_claimRewards *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err