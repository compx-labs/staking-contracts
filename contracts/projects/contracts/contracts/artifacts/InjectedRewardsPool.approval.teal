#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// oracleAdmin: address
	txna ApplicationArgs 4
	dup
	len
	int 32
	==

	// argument 1 (oracleAdmin) for createApplication must be a address
	assert

	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minStakePeriodForRewards: uint64, oracleAdmin: Address, adminAddress: Address): void
createApplication:
	proto 5 0

	// contracts/InjectedRewardsPool.algo.ts:55
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:56
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:57
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:58
	// this.totalStakingWeight.value = 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:59
	// this.oracleAdminAddress.value = oracleAdmin
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	frame_dig -4 // oracleAdmin: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:60
	// this.stakeTokenPrice.value = 0
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:61
	// this.rewardTokenPrice.value = 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:62
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -5 // adminAddress: Address
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:63
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -3 // minStakePeriodForRewards: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:64
	// this.lastRewardInjectionAmount.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e416d6f756e74 // "lastRewardInjectionAmount"
	int 0
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:65
	// this.lastRewardInjectionTime.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	int 0
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:70
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:71
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:72
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:73
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:74
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:75
	// this.lastUpdateTime(this.txn.sender).value = 0
	txn Sender
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:76
	// this.lastRewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x6c61737452657761726452617465 // "lastRewardRate"
	int 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:80
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/InjectedRewardsPool.algo.ts:82
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:83
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:84
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:85
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:86
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64)void
*abi_route_updateParams:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minStakePeriodForRewards: uint64): void
updateParams:
	proto 1 0

	// contracts/InjectedRewardsPool.algo.ts:92
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/InjectedRewardsPool.algo.ts:93
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -1 // minStakePeriodForRewards: uint64
	app_global_put
	retsub

// injectRewards(axfer,uint64)void
*abi_route_injectRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64)void
	callsub injectRewards
	int 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
injectRewards:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:98
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:99
	// assert(this.minStakePeriodForRewards.value !== 0, 'Minimum stake period not set')
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	int 0
	!=

	// Minimum stake period not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:101
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:107
	// this.lastRewardInjectionAmount.value += quantity
	byte 0x6c617374526577617264496e6a656374696f6e416d6f756e74 // "lastRewardInjectionAmount"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x6c617374526577617264496e6a656374696f6e416d6f756e74 // "lastRewardInjectionAmount"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:108
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:148
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/InjectedRewardsPool.algo.ts:149
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert
	retsub

// setPrices(uint64,uint64)void
*abi_route_setPrices:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrices(uint64,uint64)void
	callsub setPrices
	int 1
	return

// setPrices(stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
setPrices:
	proto 2 0

	// contracts/InjectedRewardsPool.algo.ts:160
	// assert(this.txn.sender === this.oracleAdminAddress.value, 'Only oracle admin can set prices')
	txn Sender
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	app_global_get
	==

	// Only oracle admin can set prices
	assert

	// contracts/InjectedRewardsPool.algo.ts:161
	// assert(stakeTokenPrice > 0, 'Invalid stake token price')
	frame_dig -1 // stakeTokenPrice: uint64
	int 0
	>

	// Invalid stake token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:162
	// assert(rewardTokenPrice > 0, 'Invalid reward token price')
	frame_dig -2 // rewardTokenPrice: uint64
	int 0
	>

	// Invalid reward token price
	assert

	// contracts/InjectedRewardsPool.algo.ts:164
	// this.stakeTokenPrice.value = stakeTokenPrice
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	frame_dig -1 // stakeTokenPrice: uint64
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:165
	// this.rewardTokenPrice.value = rewardTokenPrice
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	frame_dig -2 // rewardTokenPrice: uint64
	app_global_put
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/InjectedRewardsPool.algo.ts:172
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/InjectedRewardsPool.algo.ts:173
	// assert(this.stakeTokenPrice.value > 0, 'Stake token price not set')
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	int 0
	>

	// Stake token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:174
	// assert(this.rewardTokenPrice.value > 0, 'Reward token price not set')
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	int 0
	>

	// Reward token price not set
	assert

	// contracts/InjectedRewardsPool.algo.ts:175
	// assert(this.staked(this.txn.sender).value === 0, 'User already staked')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	==

	// User already staked
	assert

	// contracts/InjectedRewardsPool.algo.ts:176
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPool.algo.ts:178
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPool.algo.ts:184
	// this.staked(this.txn.sender).value = stakeTxn.assetAmount
	txn Sender
	byte 0x7374616b6564 // "staked"
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:186
	// normalisedAmount = (((this.staked(this.txn.sender).value / PRECISION) * this.stakeTokenPrice.value) / this.rewardTokenPrice.value)
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 10000
	/
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	frame_bury 1 // normalisedAmount: uint64

	// contracts/InjectedRewardsPool.algo.ts:187
	// userStakingWeight = normalisedAmount
	frame_dig 1 // normalisedAmount: uint64
	frame_bury 2 // userStakingWeight: uint64

	// contracts/InjectedRewardsPool.algo.ts:188
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 2 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:190
	// this.totalStaked.value += this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:191
	// this.stakeStartTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:192
	// this.userStakingWeight(this.txn.sender).value = userStakingWeight
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig 2 // userStakingWeight: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:193
	// this.lastUpdateTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:194
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put
	retsub

// accrueRewards(address)void
*abi_route_accrueRewards:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for accrueRewards must be a address
	assert

	// execute accrueRewards(address)void
	callsub accrueRewards
	int 1
	return

// accrueRewards(userAddress: Address): void
accrueRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 10

	// contracts/InjectedRewardsPool.algo.ts:199
	// assert(this.staked(userAddress).value > 0, 'User has no staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// User has no staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:200
	// assert(this.stakeStartTime(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:201
	// this.stakeDuration(userAddress).value = globals.latestTimestamp - this.stakeStartTime(userAddress).value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	global LatestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:202
	// assert(this.stakeDuration(userAddress).value >= this.minStakePeriodForRewards.value, 'User has not staked for minimum period')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	>=

	// User has not staked for minimum period
	assert

	// *if0_condition
	// contracts/InjectedRewardsPool.algo.ts:204
	// this.userStakingWeight(userAddress).value === this.totalStakingWeight.value
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	==
	bz *if0_else

	// *if0_consequent
	// contracts/InjectedRewardsPool.algo.ts:205
	// this.accruedRewards(userAddress).value = this.lastRewardInjectionAmount.value
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	byte 0x6c617374526577617264496e6a656374696f6e416d6f756e74 // "lastRewardInjectionAmount"
	app_global_get
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:206
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	global LatestTimestamp
	app_local_put

	// *if1_condition
	// contracts/InjectedRewardsPool.algo.ts:207
	// this.stakedAssetId.value === this.rewardAssetId.value
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==
	bz *if1_end

	// *if1_consequent
	// contracts/InjectedRewardsPool.algo.ts:209
	// this.staked(userAddress).value += this.lastRewardInjectionAmount.value
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x6c617374526577617264496e6a656374696f6e416d6f756e74 // "lastRewardInjectionAmount"
	app_global_get
	+
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

*if1_end:
	// contracts/InjectedRewardsPool.algo.ts:211
	// this.dev_userShare(userAddress).value = 100
	frame_dig -1 // userAddress: Address
	byte 0x6465765f757365725368617265 // "dev_userShare"
	int 100
	app_local_put
	b *if0_end

*if0_else:
	// contracts/InjectedRewardsPool.algo.ts:214
	// this.totalStakingWeight.value -= this.userStakingWeight(userAddress).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:215
	// normalisedAmount = (((this.staked(userAddress).value / PRECISION) * this.stakeTokenPrice.value) / this.rewardTokenPrice.value)
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 10000
	/
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/InjectedRewardsPool.algo.ts:216
	// userStakingWeight = normalisedAmount
	frame_dig 0 // normalisedAmount: uint64
	frame_bury 1 // userStakingWeight: uint64

	// contracts/InjectedRewardsPool.algo.ts:217
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:220
	// userShare = (userStakingWeight * PRECISION) / this.totalStakingWeight.value
	frame_dig 1 // userStakingWeight: uint64
	int 10000
	*
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 2 // userShare: uint64

	// contracts/InjectedRewardsPool.algo.ts:221
	// this.dev_userShare(userAddress).value = userShare
	frame_dig -1 // userAddress: Address
	byte 0x6465765f757365725368617265 // "dev_userShare"
	frame_dig 2 // userShare: uint64
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:222
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 2 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 3 // userSharePercentage: uint64

	// contracts/InjectedRewardsPool.algo.ts:223
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 3 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 4 // numerator: uint64

	// contracts/InjectedRewardsPool.algo.ts:224
	// denominator = PRECISION
	int 10000
	frame_bury 5 // denominator: uint64

	// contracts/InjectedRewardsPool.algo.ts:226
	// a = numerator
	frame_dig 4 // numerator: uint64
	frame_bury 6 // a: uint64

	// contracts/InjectedRewardsPool.algo.ts:227
	// b = denominator
	frame_dig 5 // denominator: uint64
	frame_bury 7 // b: uint64

*while_0:

*while_0_continue:
	// contracts/InjectedRewardsPool.algo.ts:228
	// b !== 0
	frame_dig 7 // b: uint64
	int 0
	!=
	bz *while_0_end

	// contracts/InjectedRewardsPool.algo.ts:229
	// temp = b
	frame_dig 7 // b: uint64
	frame_bury 8 // temp: uint64

	// contracts/InjectedRewardsPool.algo.ts:230
	// b = a % b
	frame_dig 6 // a: uint64
	frame_dig 7 // b: uint64
	%
	frame_bury 7 // b: uint64

	// contracts/InjectedRewardsPool.algo.ts:231
	// a = temp
	frame_dig 8 // temp: uint64
	frame_bury 6 // a: uint64
	b *while_0

*while_0_end:
	// contracts/InjectedRewardsPool.algo.ts:233
	// gcdValue = a
	frame_dig 6 // a: uint64
	frame_bury 9 // gcdValue: uint64

	// contracts/InjectedRewardsPool.algo.ts:235
	// numerator = numerator / gcdValue
	frame_dig 4 // numerator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 4 // numerator: uint64

	// contracts/InjectedRewardsPool.algo.ts:236
	// denominator = denominator / gcdValue
	frame_dig 5 // denominator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 5 // denominator: uint64

	// contracts/InjectedRewardsPool.algo.ts:237
	// rewardsToAddThisInjection = (numerator / denominator) / 100
	frame_dig 4 // numerator: uint64
	frame_dig 5 // denominator: uint64
	/
	int 100
	/
	frame_bury 10 // rewardsToAddThisInjection: uint64

	// contracts/InjectedRewardsPool.algo.ts:239
	// this.accruedRewards(userAddress).value += rewardsToAddThisInjection
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	frame_dig 10 // rewardsToAddThisInjection: uint64
	+
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	uncover 2
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:240
	// this.lastUpdateTime(userAddress).value = globals.latestTimestamp
	frame_dig -1 // userAddress: Address
	byte 0x6c61737455706461746554696d65 // "lastUpdateTime"
	global LatestTimestamp
	app_local_put

	// *if2_condition
	// contracts/InjectedRewardsPool.algo.ts:242
	// this.rewardAssetId.value === this.stakedAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPool.algo.ts:244
	// this.staked(userAddress).value += rewardsToAddThisInjection
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_dig 10 // rewardsToAddThisInjection: uint64
	+
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

*if2_end:

*if0_end:
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	int 1
	return

// unstake(): void
unstake:
	proto 0 0

	// contracts/InjectedRewardsPool.algo.ts:250
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// No staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:251
	// assert(this.stakeStartTime(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:252
	// assert(this.stakeDuration(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/InjectedRewardsPool.algo.ts:253
	// assert(this.accruedRewards(this.txn.sender).value > 0, 'User has no accrued rewards')
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>

	// User has no accrued rewards
	assert

	// contracts/InjectedRewardsPool.algo.ts:255
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: this.staked(this.txn.sender).value,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPool.algo.ts:256
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPool.algo.ts:257
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPool.algo.ts:258
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPool.algo.ts:259
	// assetAmount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/InjectedRewardsPool.algo.ts:260
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPool.algo.ts:265
	// this.totalStakingWeight.value -= this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:266
	// this.totalStaked.value -= this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPool.algo.ts:268
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:269
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:270
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:271
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/InjectedRewardsPool.algo.ts:272
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(uint64)void"
	method "updateParams(uint64)void"
	method "injectRewards(axfer,uint64)void"
	method "setPrices(uint64,uint64)void"
	method "stake(axfer,uint64)void"
	method "accrueRewards(address)void"
	method "unstake()void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_injectRewards *abi_route_setPrices *abi_route_stake *abi_route_accrueRewards *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err