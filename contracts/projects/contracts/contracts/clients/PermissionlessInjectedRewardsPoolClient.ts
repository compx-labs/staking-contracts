/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPoolActive()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRewardParams(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectedASARewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectedxUSDRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTreasuryAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatexUSDFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateInjectorAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateNumStakers(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePoolEnding(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFeeWaived()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMBRForPoolCreation()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectRewards(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pickupRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectxUSD(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "xUSDAssetId": {
          "type": "uint64",
          "key": "xUSDAssetId"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "injectedASARewards": {
          "type": "uint64",
          "key": "injectedASARewards"
        },
        "paidASARewards": {
          "type": "uint64",
          "key": "paidASARewards"
        },
        "injectedxUSDRewards": {
          "type": "uint64",
          "key": "injectedxUSDRewards"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "injectorAddress": {
          "type": "bytes",
          "key": "injectorAddress"
        },
        "treasuryAddress": {
          "type": "bytes",
          "key": "treasuryAddress"
        },
        "xUSDFee": {
          "type": "uint64",
          "key": "xUSDFee"
        },
        "feeWaived": {
          "type": "bytes",
          "key": "feeWaived"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "freeze": {
          "type": "bytes",
          "key": "freeze"
        },
        "poolActive": {
          "type": "bytes",
          "key": "poolActive"
        },
        "poolEnding": {
          "type": "bytes",
          "key": "poolEnding"
        },
        "rewardFrequency": {
          "type": "uint64",
          "key": "rewardFrequency"
        },
        "rewardPerInjection": {
          "type": "uint64",
          "key": "rewardPerInjection"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "totalRewards"
        },
        "lastInjectionTime": {
          "type": "uint64",
          "key": "lastInjectionTime"
        },
        "contractVersion": {
          "type": "uint64",
          "key": "contractVersion"
        },
        "injectionType": {
          "type": "uint64",
          "key": "injectionType"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 7,
      "num_uints": 16
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"
  },
  "contract": {
    "name": "PermissionlessInjectedRewardsPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "injectorAddress",
            "type": "address"
          },
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          },
          {
            "name": "xUSDFee",
            "type": "uint64"
          },
          {
            "name": "xUSDAssetID",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPoolActive",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setRewardParams",
        "args": [
          {
            "name": "totalRewards",
            "type": "uint64"
          },
          {
            "name": "rewardFrequency",
            "type": "uint64"
          },
          {
            "name": "rewardPerInjection",
            "type": "uint64"
          },
          {
            "name": "injectionType",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectedASARewards",
        "args": [
          {
            "name": "injectedASARewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectedxUSDRewards",
        "args": [
          {
            "name": "injectedxUSDRewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTreasuryAddress",
        "args": [
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatexUSDFee",
        "args": [
          {
            "name": "xUSDFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateInjectorAddress",
        "args": [
          {
            "name": "injectorAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateNumStakers",
        "args": [
          {
            "name": "numStakers",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateFreeze",
        "args": [
          {
            "name": "freeze",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updatePoolEnding",
        "args": [
          {
            "name": "poolEnding",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFeeWaived",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMBRForPoolCreation",
        "args": [],
        "returns": {
          "type": "(uint64)"
        }
      },
      {
        "name": "initStorage",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pickupRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectxUSD",
        "args": [
          {
            "name": "xUSDTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFreeze",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the PermissionlessInjectedRewardsPool smart contract.
 */
export type PermissionlessInjectedRewardsPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,address)void' | 'createApplication', {
      argsObj: {
        adminAddress: string
        injectorAddress: string
        treasuryAddress: string
      }
      argsTuple: [adminAddress: string, injectorAddress: string, treasuryAddress: string]
      returns: void
    }>
    & Record<'initApplication(uint64,uint64,uint64,uint64)void' | 'initApplication', {
      argsObj: {
        stakedAsset: bigint | number
        rewardAssetId: bigint | number
        xUSDFee: bigint | number
        xUSDAssetID: bigint | number
      }
      argsTuple: [stakedAsset: bigint | number, rewardAssetId: bigint | number, xUSDFee: bigint | number, xUSDAssetID: bigint | number]
      returns: void
    }>
    & Record<'updateAdminAddress(address)void' | 'updateAdminAddress', {
      argsObj: {
        adminAddress: string
      }
      argsTuple: [adminAddress: string]
      returns: void
    }>
    & Record<'setPoolActive()void' | 'setPoolActive', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setRewardParams(uint64,uint64,uint64,uint64)void' | 'setRewardParams', {
      argsObj: {
        totalRewards: bigint | number
        rewardFrequency: bigint | number
        rewardPerInjection: bigint | number
        injectionType: bigint | number
      }
      argsTuple: [totalRewards: bigint | number, rewardFrequency: bigint | number, rewardPerInjection: bigint | number, injectionType: bigint | number]
      returns: void
    }>
    & Record<'updateInjectedASARewards(uint64)void' | 'updateInjectedASARewards', {
      argsObj: {
        injectedASARewards: bigint | number
      }
      argsTuple: [injectedASARewards: bigint | number]
      returns: void
    }>
    & Record<'updateInjectedxUSDRewards(uint64)void' | 'updateInjectedxUSDRewards', {
      argsObj: {
        injectedxUSDRewards: bigint | number
      }
      argsTuple: [injectedxUSDRewards: bigint | number]
      returns: void
    }>
    & Record<'updateTreasuryAddress(address)void' | 'updateTreasuryAddress', {
      argsObj: {
        treasuryAddress: string
      }
      argsTuple: [treasuryAddress: string]
      returns: void
    }>
    & Record<'updatexUSDFee(uint64)void' | 'updatexUSDFee', {
      argsObj: {
        xUSDFee: bigint | number
      }
      argsTuple: [xUSDFee: bigint | number]
      returns: void
    }>
    & Record<'updateInjectorAddress(address)void' | 'updateInjectorAddress', {
      argsObj: {
        injectorAddress: string
      }
      argsTuple: [injectorAddress: string]
      returns: void
    }>
    & Record<'updateNumStakers(uint64)void' | 'updateNumStakers', {
      argsObj: {
        numStakers: bigint | number
      }
      argsTuple: [numStakers: bigint | number]
      returns: void
    }>
    & Record<'updateFreeze(bool)void' | 'updateFreeze', {
      argsObj: {
        freeze: boolean
      }
      argsTuple: [freeze: boolean]
      returns: void
    }>
    & Record<'updatePoolEnding(bool)void' | 'updatePoolEnding', {
      argsObj: {
        poolEnding: boolean
      }
      argsTuple: [poolEnding: boolean]
      returns: void
    }>
    & Record<'setFeeWaived()void' | 'setFeeWaived', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getMBRForPoolCreation()(uint64)' | 'getMBRForPoolCreation', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint]
    }>
    & Record<'initStorage(pay)void' | 'initStorage', {
      argsObj: {
        mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'injectRewards(axfer,uint64,uint64)void' | 'injectRewards', {
      argsObj: {
        rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
        rewardAssetId: bigint | number
      }
      argsTuple: [rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number, rewardAssetId: bigint | number]
      returns: void
    }>
    & Record<'pickupRewards()void' | 'pickupRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'injectxUSD(axfer,uint64)void' | 'injectxUSD', {
      argsObj: {
        xUSDTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [xUSDTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'stake(axfer,uint64)void' | 'stake', {
      argsObj: {
        stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'accrueRewards()void' | 'accrueRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claimRewards()void' | 'claimRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'unstake(uint64)void' | 'unstake', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
    & Record<'setFreeze(bool)void' | 'setFreeze', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakedAssetId'?: IntegerState
      'rewardAssetId'?: IntegerState
      'xUSDAssetId'?: IntegerState
      'totalStaked'?: IntegerState
      'injectedASARewards'?: IntegerState
      'paidASARewards'?: IntegerState
      'injectedxUSDRewards'?: IntegerState
      'adminAddress'?: BinaryState
      'injectorAddress'?: BinaryState
      'treasuryAddress'?: BinaryState
      'xUSDFee'?: IntegerState
      'feeWaived'?: BinaryState
      'minimumBalance'?: IntegerState
      'numStakers'?: IntegerState
      'freeze'?: BinaryState
      'poolActive'?: BinaryState
      'poolEnding'?: BinaryState
      'rewardFrequency'?: IntegerState
      'rewardPerInjection'?: IntegerState
      'totalRewards'?: IntegerState
      'lastInjectionTime'?: IntegerState
      'contractVersion'?: IntegerState
      'injectionType'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PermissionlessInjectedRewardsPoolSig = keyof PermissionlessInjectedRewardsPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PermissionlessInjectedRewardsPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the PermissionlessInjectedRewardsPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PermissionlessInjectedRewardsPoolSig> = PermissionlessInjectedRewardsPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PermissionlessInjectedRewardsPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PermissionlessInjectedRewardsPoolSig> = PermissionlessInjectedRewardsPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PermissionlessInjectedRewardsPoolCreateCalls = (typeof PermissionlessInjectedRewardsPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PermissionlessInjectedRewardsPoolCreateCallParams =
  | (TypedCallParams<'createApplication(address,address,address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type PermissionlessInjectedRewardsPoolDeleteCalls = (typeof PermissionlessInjectedRewardsPoolCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type PermissionlessInjectedRewardsPoolDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type PermissionlessInjectedRewardsPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PermissionlessInjectedRewardsPoolCreateCalls) => PermissionlessInjectedRewardsPoolCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: PermissionlessInjectedRewardsPoolDeleteCalls) => PermissionlessInjectedRewardsPoolDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PermissionlessInjectedRewardsPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the PermissionlessInjectedRewardsPool smart contract using the createApplication(address,address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.adminAddress, args.injectorAddress, args.treasuryAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the PermissionlessInjectedRewardsPool smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initApplication(uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakedAsset, args.rewardAssetId, args.xUSDFee, args.xUSDAssetID],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateAdminAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateAdminAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.adminAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPoolActive()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPoolActive(args: MethodArgs<'setPoolActive()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPoolActive()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setRewardParams(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRewardParams(args: MethodArgs<'setRewardParams(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setRewardParams(uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.totalRewards, args.rewardFrequency, args.rewardPerInjection, args.injectionType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateInjectedASARewards(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateInjectedAsaRewards(args: MethodArgs<'updateInjectedASARewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateInjectedASARewards(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.injectedASARewards],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateInjectedxUSDRewards(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateInjectedxUsdRewards(args: MethodArgs<'updateInjectedxUSDRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateInjectedxUSDRewards(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.injectedxUSDRewards],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateTreasuryAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateTreasuryAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.treasuryAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updatexUSDFee(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatexUsdFee(args: MethodArgs<'updatexUSDFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updatexUSDFee(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.xUSDFee],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateInjectorAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateInjectorAddress(args: MethodArgs<'updateInjectorAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateInjectorAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.injectorAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateNumStakers(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateNumStakers(args: MethodArgs<'updateNumStakers(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateNumStakers(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.numStakers],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateFreeze(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateFreeze(args: MethodArgs<'updateFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateFreeze(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.freeze],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updatePoolEnding(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePoolEnding(args: MethodArgs<'updatePoolEnding(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updatePoolEnding(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.poolEnding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFeeWaived()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFeeWaived(args: MethodArgs<'setFeeWaived()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFeeWaived()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMBRForPoolCreation()(uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMBRForPoolCreation()(uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initStorage(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initStorage(args: MethodArgs<'initStorage(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initStorage(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPayment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the injectRewards(axfer,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'injectRewards(axfer,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardTxn, args.quantity, args.rewardAssetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pickupRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pickupRewards(args: MethodArgs<'pickupRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pickupRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the injectxUSD(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static injectxUsd(args: MethodArgs<'injectxUSD(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'injectxUSD(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.xUSDTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakeTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the accrueRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static accrueRewards(args: MethodArgs<'accrueRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'accrueRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimRewards(args: MethodArgs<'claimRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unstake(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unstake(args: MethodArgs<'unstake(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unstake(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFreeze(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFreeze(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'gas()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the PermissionlessInjectedRewardsPool smart contract
 */
export class PermissionlessInjectedRewardsPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PermissionlessInjectedRewardsPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof PermissionlessInjectedRewardsPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the PermissionlessInjectedRewardsPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PermissionlessInjectedRewardsPoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PermissionlessInjectedRewardsPoolCallFactory.create)
    const deleteArgs = params.deleteCall?.(PermissionlessInjectedRewardsPoolCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the PermissionlessInjectedRewardsPool smart contract using the createApplication(address,address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address,address,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PermissionlessInjectedRewardsPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the PermissionlessInjectedRewardsPool smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(PermissionlessInjectedRewardsPoolCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the PermissionlessInjectedRewardsPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initApplication(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.initApplication(args, params))
  }

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateAdminAddress(args, params))
  }

  /**
   * Calls the setPoolActive()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPoolActive(args: MethodArgs<'setPoolActive()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.setPoolActive(args, params))
  }

  /**
   * Calls the setRewardParams(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRewardParams(args: MethodArgs<'setRewardParams(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.setRewardParams(args, params))
  }

  /**
   * Calls the updateInjectedASARewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateInjectedAsaRewards(args: MethodArgs<'updateInjectedASARewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateInjectedAsaRewards(args, params))
  }

  /**
   * Calls the updateInjectedxUSDRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateInjectedxUsdRewards(args: MethodArgs<'updateInjectedxUSDRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateInjectedxUsdRewards(args, params))
  }

  /**
   * Calls the updateTreasuryAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateTreasuryAddress(args, params))
  }

  /**
   * Calls the updatexUSDFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatexUsdFee(args: MethodArgs<'updatexUSDFee(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updatexUsdFee(args, params))
  }

  /**
   * Calls the updateInjectorAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateInjectorAddress(args: MethodArgs<'updateInjectorAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateInjectorAddress(args, params))
  }

  /**
   * Calls the updateNumStakers(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateNumStakers(args: MethodArgs<'updateNumStakers(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateNumStakers(args, params))
  }

  /**
   * Calls the updateFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateFreeze(args: MethodArgs<'updateFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updateFreeze(args, params))
  }

  /**
   * Calls the updatePoolEnding(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePoolEnding(args: MethodArgs<'updatePoolEnding(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.updatePoolEnding(args, params))
  }

  /**
   * Calls the setFeeWaived()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFeeWaived(args: MethodArgs<'setFeeWaived()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.setFeeWaived(args, params))
  }

  /**
   * Calls the getMBRForPoolCreation()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.getMbrForPoolCreation(args, params))
  }

  /**
   * Calls the initStorage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initStorage(args: MethodArgs<'initStorage(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.initStorage(args, params))
  }

  /**
   * Calls the injectRewards(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.injectRewards(args, params))
  }

  /**
   * Calls the pickupRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pickupRewards(args: MethodArgs<'pickupRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.pickupRewards(args, params))
  }

  /**
   * Calls the injectxUSD(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public injectxUsd(args: MethodArgs<'injectxUSD(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.injectxUsd(args, params))
  }

  /**
   * Calls the stake(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.stake(args, params))
  }

  /**
   * Calls the accrueRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public accrueRewards(args: MethodArgs<'accrueRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.accrueRewards(args, params))
  }

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimRewards(args: MethodArgs<'claimRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.claimRewards(args, params))
  }

  /**
   * Calls the unstake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unstake(args: MethodArgs<'unstake(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.unstake(args, params))
  }

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.setFreeze(args, params))
  }

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PermissionlessInjectedRewardsPoolCallFactory.gas(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<PermissionlessInjectedRewardsPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakedAssetId() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'stakedAssetId')
      },
      get rewardAssetId() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'rewardAssetId')
      },
      get xUSDAssetId() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'xUSDAssetId')
      },
      get totalStaked() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'totalStaked')
      },
      get injectedASARewards() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'injectedASARewards')
      },
      get paidASARewards() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'paidASARewards')
      },
      get injectedxUSDRewards() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'injectedxUSDRewards')
      },
      get adminAddress() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'adminAddress')
      },
      get injectorAddress() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'injectorAddress')
      },
      get treasuryAddress() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'treasuryAddress')
      },
      get xUSDFee() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'xUSDFee')
      },
      get feeWaived() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'feeWaived')
      },
      get minimumBalance() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'minimumBalance')
      },
      get numStakers() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'numStakers')
      },
      get freeze() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'freeze')
      },
      get poolActive() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'poolActive')
      },
      get poolEnding() {
        return PermissionlessInjectedRewardsPoolClient.getBinaryState(state, 'poolEnding')
      },
      get rewardFrequency() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'rewardFrequency')
      },
      get rewardPerInjection() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'rewardPerInjection')
      },
      get totalRewards() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'totalRewards')
      },
      get lastInjectionTime() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'lastInjectionTime')
      },
      get contractVersion() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'contractVersion')
      },
      get injectionType() {
        return PermissionlessInjectedRewardsPoolClient.getIntegerState(state, 'injectionType')
      },
    }
  }

  public compose(): PermissionlessInjectedRewardsPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAdminAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPoolActive(args: MethodArgs<'setPoolActive()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPoolActive(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRewardParams(args: MethodArgs<'setRewardParams(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRewardParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateInjectedAsaRewards(args: MethodArgs<'updateInjectedASARewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateInjectedAsaRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateInjectedxUsdRewards(args: MethodArgs<'updateInjectedxUSDRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateInjectedxUsdRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTreasuryAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updatexUsdFee(args: MethodArgs<'updatexUSDFee(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updatexUsdFee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateInjectorAddress(args: MethodArgs<'updateInjectorAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateInjectorAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateNumStakers(args: MethodArgs<'updateNumStakers(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateNumStakers(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateFreeze(args: MethodArgs<'updateFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateFreeze(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updatePoolEnding(args: MethodArgs<'updatePoolEnding(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updatePoolEnding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFeeWaived(args: MethodArgs<'setFeeWaived()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFeeWaived(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMbrForPoolCreation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initStorage(args: MethodArgs<'initStorage(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initStorage(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.injectRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pickupRewards(args: MethodArgs<'pickupRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pickupRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      injectxUsd(args: MethodArgs<'injectxUSD(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.injectxUsd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      accrueRewards(args: MethodArgs<'accrueRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.accrueRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimRewards(args: MethodArgs<'claimRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unstake(args: MethodArgs<'unstake(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFreeze(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PermissionlessInjectedRewardsPoolComposer
  }
}
export type PermissionlessInjectedRewardsPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'initApplication(uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateAdminAddress(address)void'>]>

  /**
   * Calls the setPoolActive()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPoolActive(args: MethodArgs<'setPoolActive()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'setPoolActive()void'>]>

  /**
   * Calls the setRewardParams(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRewardParams(args: MethodArgs<'setRewardParams(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'setRewardParams(uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the updateInjectedASARewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateInjectedAsaRewards(args: MethodArgs<'updateInjectedASARewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateInjectedASARewards(uint64)void'>]>

  /**
   * Calls the updateInjectedxUSDRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateInjectedxUsdRewards(args: MethodArgs<'updateInjectedxUSDRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateInjectedxUSDRewards(uint64)void'>]>

  /**
   * Calls the updateTreasuryAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateTreasuryAddress(address)void'>]>

  /**
   * Calls the updatexUSDFee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatexUsdFee(args: MethodArgs<'updatexUSDFee(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updatexUSDFee(uint64)void'>]>

  /**
   * Calls the updateInjectorAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateInjectorAddress(args: MethodArgs<'updateInjectorAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateInjectorAddress(address)void'>]>

  /**
   * Calls the updateNumStakers(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateNumStakers(args: MethodArgs<'updateNumStakers(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateNumStakers(uint64)void'>]>

  /**
   * Calls the updateFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateFreeze(args: MethodArgs<'updateFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateFreeze(bool)void'>]>

  /**
   * Calls the updatePoolEnding(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePoolEnding(args: MethodArgs<'updatePoolEnding(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updatePoolEnding(bool)void'>]>

  /**
   * Calls the setFeeWaived()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFeeWaived(args: MethodArgs<'setFeeWaived()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'setFeeWaived()void'>]>

  /**
   * Calls the getMBRForPoolCreation()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'getMBRForPoolCreation()(uint64)'>]>

  /**
   * Calls the initStorage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStorage(args: MethodArgs<'initStorage(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'initStorage(pay)void'>]>

  /**
   * Calls the injectRewards(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'injectRewards(axfer,uint64,uint64)void'>]>

  /**
   * Calls the pickupRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pickupRewards(args: MethodArgs<'pickupRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'pickupRewards()void'>]>

  /**
   * Calls the injectxUSD(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  injectxUsd(args: MethodArgs<'injectxUSD(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'injectxUSD(axfer,uint64)void'>]>

  /**
   * Calls the stake(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'stake(axfer,uint64)void'>]>

  /**
   * Calls the accrueRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueRewards(args: MethodArgs<'accrueRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'accrueRewards()void'>]>

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(args: MethodArgs<'claimRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'claimRewards()void'>]>

  /**
   * Calls the unstake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(args: MethodArgs<'unstake(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'unstake(uint64)void'>]>

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'setFreeze(bool)void'>]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'gas()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the PermissionlessInjectedRewardsPool smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): PermissionlessInjectedRewardsPoolComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PermissionlessInjectedRewardsPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PermissionlessInjectedRewardsPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PermissionlessInjectedRewardsPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PermissionlessInjectedRewardsPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PermissionlessInjectedRewardsPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PermissionlessInjectedRewardsPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PermissionlessInjectedRewardsPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
