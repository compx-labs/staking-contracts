/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "optInToAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateParams(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewards(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewardsAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setPrices(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stake(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRewardRate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "staked": {
          "type": "uint64",
          "key": "staked"
        },
        "unlockTime": {
          "type": "uint64",
          "key": "unlockTime"
        },
        "stakeDuration": {
          "type": "uint64",
          "key": "stakeDuration"
        },
        "stakeStartTime": {
          "type": "uint64",
          "key": "stakeStartTime"
        },
        "userStakingWeight": {
          "type": "uint64",
          "key": "userStakingWeight"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rewardRate"
        },
        "accruedRewards": {
          "type": "uint64",
          "key": "accruedRewards"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "minLockUp": {
          "type": "uint64",
          "key": "minLockUp"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "totalRewards"
        },
        "contractDuration": {
          "type": "uint64",
          "key": "contractDuration"
        },
        "contractStartTimestamp": {
          "type": "uint64",
          "key": "contractStartTimestamp"
        },
        "contractEndTimestamp": {
          "type": "uint64",
          "key": "contractEndTimestamp"
        },
        "totalStakingWeight": {
          "type": "uint64",
          "key": "totalStakingWeight"
        },
        "remainingRewards": {
          "type": "uint64",
          "key": "remainingRewards"
        },
        "stakeTokenPrice": {
          "type": "uint64",
          "key": "stakeTokenPrice"
        },
        "rewardTokenPrice": {
          "type": "uint64",
          "key": "rewardTokenPrice"
        },
        "oracleAdminAddress": {
          "type": "bytes",
          "key": "oracleAdminAddress"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "rewardsAvailablePerTick": {
          "type": "uint64",
          "key": "rewardsAvailablePerTick"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 13
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 7
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "CompXStaking",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAsset",
            "type": "uint64"
          },
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          },
          {
            "name": "startTimestamp",
            "type": "uint64"
          },
          {
            "name": "oracleAdmin",
            "type": "address"
          },
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateParams",
        "args": [
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewardsAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeRewards",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrices",
        "args": [
          {
            "name": "stakeTokenPrice",
            "type": "uint64"
          },
          {
            "name": "rewardTokenPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "lockPeriod",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getRewardRate",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getRewardRate_Dev",
        "args": [
          {
            "name": "i_TotalStakingWeight",
            "type": "uint64"
          },
          {
            "name": "i_StakeTokenPrice",
            "type": "uint64"
          },
          {
            "name": "i_RewardTokenPrice",
            "type": "uint64"
          },
          {
            "name": "i_StakeDuration",
            "type": "uint64"
          },
          {
            "name": "i_StakeAmount",
            "type": "uint64"
          },
          {
            "name": "i_RewardsAvailablePerTick",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CompXStaking smart contract.
 */
export type CompXStaking = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void' | 'createApplication', {
      argsObj: {
        stakedAsset: bigint | number
        rewardAsset: bigint | number
        minLockUp: bigint | number
        contractDuration: bigint | number
        startTimestamp: bigint | number
        oracleAdmin: string
        adminAddress: string
      }
      argsTuple: [stakedAsset: bigint | number, rewardAsset: bigint | number, minLockUp: bigint | number, contractDuration: bigint | number, startTimestamp: bigint | number, oracleAdmin: string, adminAddress: string]
      returns: void
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInToAsset(uint64)void' | 'optInToAsset', {
      argsObj: {
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'updateParams(uint64,uint64)void' | 'updateParams', {
      argsObj: {
        minLockUp: bigint | number
        contractDuration: bigint | number
      }
      argsTuple: [minLockUp: bigint | number, contractDuration: bigint | number]
      returns: void
    }>
    & Record<'addRewards(axfer,uint64)void' | 'addRewards', {
      argsObj: {
        rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'addRewardsAlgo(pay,uint64)void' | 'addRewardsAlgo', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'removeRewards(uint64)void' | 'removeRewards', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setPrices(uint64,uint64)void' | 'setPrices', {
      argsObj: {
        stakeTokenPrice: bigint | number
        rewardTokenPrice: bigint | number
      }
      argsTuple: [stakeTokenPrice: bigint | number, rewardTokenPrice: bigint | number]
      returns: void
    }>
    & Record<'stake(axfer,uint64,uint64)void' | 'stake', {
      argsObj: {
        stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
        lockPeriod: bigint | number
      }
      argsTuple: [stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number, lockPeriod: bigint | number]
      returns: void
    }>
    & Record<'getRewardRate()void' | 'getRewardRate', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void' | 'getRewardRate_Dev', {
      argsObj: {
        i_TotalStakingWeight: bigint | number
        i_StakeTokenPrice: bigint | number
        i_RewardTokenPrice: bigint | number
        i_StakeDuration: bigint | number
        i_StakeAmount: bigint | number
        i_RewardsAvailablePerTick: bigint | number
      }
      argsTuple: [i_TotalStakingWeight: bigint | number, i_StakeTokenPrice: bigint | number, i_RewardTokenPrice: bigint | number, i_StakeDuration: bigint | number, i_StakeAmount: bigint | number, i_RewardsAvailablePerTick: bigint | number]
      returns: void
    }>
    & Record<'accrueRewards(address)void' | 'accrueRewards', {
      argsObj: {
        userAddress: string
      }
      argsTuple: [userAddress: string]
      returns: void
    }>
    & Record<'unstake()void' | 'unstake', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakedAssetId'?: IntegerState
      'rewardAssetId'?: IntegerState
      'minLockUp'?: IntegerState
      'totalStaked'?: IntegerState
      'totalRewards'?: IntegerState
      'contractDuration'?: IntegerState
      'contractStartTimestamp'?: IntegerState
      'contractEndTimestamp'?: IntegerState
      'totalStakingWeight'?: IntegerState
      'remainingRewards'?: IntegerState
      'stakeTokenPrice'?: IntegerState
      'rewardTokenPrice'?: IntegerState
      'oracleAdminAddress'?: BinaryState
      'adminAddress'?: BinaryState
      'rewardsAvailablePerTick'?: IntegerState
    }
    local: {
      'staked'?: IntegerState
      'unlockTime'?: IntegerState
      'stakeDuration'?: IntegerState
      'stakeStartTime'?: IntegerState
      'userStakingWeight'?: IntegerState
      'rewardRate'?: IntegerState
      'accruedRewards'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CompXStakingSig = keyof CompXStaking['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CompXStakingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CompXStaking smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CompXStakingSig> = CompXStaking['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompXStaking smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompXStakingSig> = CompXStaking['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CompXStakingCreateCalls = (typeof CompXStakingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CompXStakingCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CompXStakingDeleteCalls = (typeof CompXStakingCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CompXStakingDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type CompXStakingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CompXStakingCreateCalls) => CompXStakingCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CompXStakingDeleteCalls) => CompXStakingDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CompXStakingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CompXStaking smart contract using the createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.stakedAsset, args.rewardAsset, args.minLockUp, args.contractDuration, args.startTimestamp, args.oracleAdmin, args.adminAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CompXStaking smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the CompXStaking smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsset(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateParams(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateParams(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.minLockUp, args.contractDuration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewards(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewards(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewardsAlgo(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewardsAlgo(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeRewards(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeRewards(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setPrices(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPrices(args: MethodArgs<'setPrices(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPrices(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakeTokenPrice, args.rewardTokenPrice],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(axfer,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakeTxn, args.quantity, args.lockPeriod],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRewardRate()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRewardRate(args: MethodArgs<'getRewardRate()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRewardRate()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRewardRateDev(args: MethodArgs<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.i_TotalStakingWeight, args.i_StakeTokenPrice, args.i_RewardTokenPrice, args.i_StakeDuration, args.i_StakeAmount, args.i_RewardsAvailablePerTick],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the accrueRewards(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'accrueRewards(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unstake()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unstake(args: MethodArgs<'unstake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unstake()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CompXStaking smart contract
 */
export class CompXStakingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CompXStakingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CompXStaking['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CompXStaking smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CompXStakingDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CompXStakingCallFactory.create)
    const deleteArgs = params.deleteCall?.(CompXStakingCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CompXStaking smart contract using the createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CompXStakingCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the CompXStaking smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(CompXStakingCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the CompXStaking smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(CompXStakingCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CompXStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the updateParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.updateParams(args, params))
  }

  /**
   * Calls the addRewards(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.addRewards(args, params))
  }

  /**
   * Calls the addRewardsAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.addRewardsAlgo(args, params))
  }

  /**
   * Calls the removeRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.removeRewards(args, params))
  }

  /**
   * Calls the setPrices(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPrices(args: MethodArgs<'setPrices(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.setPrices(args, params))
  }

  /**
   * Calls the stake(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.stake(args, params))
  }

  /**
   * Calls the getRewardRate()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRewardRate(args: MethodArgs<'getRewardRate()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.getRewardRate(args, params))
  }

  /**
   * Calls the getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRewardRateDev(args: MethodArgs<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.getRewardRateDev(args, params))
  }

  /**
   * Calls the accrueRewards(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.accrueRewards(args, params))
  }

  /**
   * Calls the unstake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unstake(args: MethodArgs<'unstake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.unstake(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CompXStaking['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakedAssetId() {
        return CompXStakingClient.getIntegerState(state, 'stakedAssetId')
      },
      get rewardAssetId() {
        return CompXStakingClient.getIntegerState(state, 'rewardAssetId')
      },
      get minLockUp() {
        return CompXStakingClient.getIntegerState(state, 'minLockUp')
      },
      get totalStaked() {
        return CompXStakingClient.getIntegerState(state, 'totalStaked')
      },
      get totalRewards() {
        return CompXStakingClient.getIntegerState(state, 'totalRewards')
      },
      get contractDuration() {
        return CompXStakingClient.getIntegerState(state, 'contractDuration')
      },
      get contractStartTimestamp() {
        return CompXStakingClient.getIntegerState(state, 'contractStartTimestamp')
      },
      get contractEndTimestamp() {
        return CompXStakingClient.getIntegerState(state, 'contractEndTimestamp')
      },
      get totalStakingWeight() {
        return CompXStakingClient.getIntegerState(state, 'totalStakingWeight')
      },
      get remainingRewards() {
        return CompXStakingClient.getIntegerState(state, 'remainingRewards')
      },
      get stakeTokenPrice() {
        return CompXStakingClient.getIntegerState(state, 'stakeTokenPrice')
      },
      get rewardTokenPrice() {
        return CompXStakingClient.getIntegerState(state, 'rewardTokenPrice')
      },
      get oracleAdminAddress() {
        return CompXStakingClient.getBinaryState(state, 'oracleAdminAddress')
      },
      get adminAddress() {
        return CompXStakingClient.getBinaryState(state, 'adminAddress')
      },
      get rewardsAvailablePerTick() {
        return CompXStakingClient.getIntegerState(state, 'rewardsAvailablePerTick')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<CompXStaking['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get staked() {
        return CompXStakingClient.getIntegerState(state, 'staked')
      },
      get unlockTime() {
        return CompXStakingClient.getIntegerState(state, 'unlockTime')
      },
      get stakeDuration() {
        return CompXStakingClient.getIntegerState(state, 'stakeDuration')
      },
      get stakeStartTime() {
        return CompXStakingClient.getIntegerState(state, 'stakeStartTime')
      },
      get userStakingWeight() {
        return CompXStakingClient.getIntegerState(state, 'userStakingWeight')
      },
      get rewardRate() {
        return CompXStakingClient.getIntegerState(state, 'rewardRate')
      },
      get accruedRewards() {
        return CompXStakingClient.getIntegerState(state, 'accruedRewards')
      },
    }
  }

  public compose(): CompXStakingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewardsAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPrices(args: MethodArgs<'setPrices(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPrices(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRewardRate(args: MethodArgs<'getRewardRate()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRewardRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRewardRateDev(args: MethodArgs<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRewardRateDev(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.accrueRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unstake(args: MethodArgs<'unstake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CompXStakingComposer
  }
}
export type CompXStakingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'optInToAsset(uint64)void'>]>

  /**
   * Calls the updateParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'updateParams(uint64,uint64)void'>]>

  /**
   * Calls the addRewards(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'addRewards(axfer,uint64)void'>]>

  /**
   * Calls the addRewardsAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'addRewardsAlgo(pay,uint64)void'>]>

  /**
   * Calls the removeRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'removeRewards(uint64)void'>]>

  /**
   * Calls the setPrices(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrices(args: MethodArgs<'setPrices(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'setPrices(uint64,uint64)void'>]>

  /**
   * Calls the stake(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'stake(axfer,uint64,uint64)void'>]>

  /**
   * Calls the getRewardRate()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRewardRate(args: MethodArgs<'getRewardRate()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'getRewardRate()void'>]>

  /**
   * Calls the getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRewardRateDev(args: MethodArgs<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the accrueRewards(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'accrueRewards(address)void'>]>

  /**
   * Calls the unstake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(args: MethodArgs<'unstake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'unstake()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CompXStaking smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): CompXStakingComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompXStaking smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): CompXStakingComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompXStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CompXStakingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CompXStakingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CompXStakingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CompXStakingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CompXStakingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
