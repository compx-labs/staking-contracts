/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,uint64,uint64,uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "optInToAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateParams(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewards(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewardsAlgo(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRewards(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRewardRate(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "adminUnstake(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "staked": {
          "type": "uint64",
          "key": "staked"
        },
        "unlockTime": {
          "type": "uint64",
          "key": "unlockTime"
        },
        "stakeDuration": {
          "type": "uint64",
          "key": "stakeDuration"
        },
        "stakeStartTime": {
          "type": "uint64",
          "key": "stakeStartTime"
        },
        "userStakingWeight": {
          "type": "uint64",
          "key": "userStakingWeight"
        },
        "rewardRate": {
          "type": "uint64",
          "key": "rewardRate"
        },
        "accruedRewards": {
          "type": "uint64",
          "key": "accruedRewards"
        },
        "lastUpdateTime": {
          "type": "uint64",
          "key": "lastUpdateTime"
        },
        "totalRewardsPaid": {
          "type": "uint64",
          "key": "totalRewardsPaid"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "rewardAssetId": {
          "type": "uint64",
          "key": "rewardAssetId"
        },
        "minLockUp": {
          "type": "uint64",
          "key": "minLockUp"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "totalRewards": {
          "type": "uint64",
          "key": "totalRewards"
        },
        "contractDuration": {
          "type": "uint64",
          "key": "contractDuration"
        },
        "contractStartTimestamp": {
          "type": "uint64",
          "key": "contractStartTimestamp"
        },
        "contractEndTimestamp": {
          "type": "uint64",
          "key": "contractEndTimestamp"
        },
        "totalStakingWeight": {
          "type": "uint64",
          "key": "totalStakingWeight"
        },
        "remainingRewards": {
          "type": "uint64",
          "key": "remainingRewards"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "rewardsAvailablePerTick": {
          "type": "uint64",
          "key": "rewardsAvailablePerTick"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 11
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 9
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuOTYuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKmNhbGxfT3B0SW4gKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfRGVsZXRlQXBwbGljYXRpb24gKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gYWRtaW5BZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA2CglkdXAKCWxlbgoJaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGFkbWluQWRkcmVzcykgZm9yIGNyZWF0ZUFwcGxpY2F0aW9uIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBzdGFydFRpbWVzdGFtcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gY29udHJhY3REdXJhdGlvbjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gbWluTG9ja1VwOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyByZXdhcmRBc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gc3Rha2VkQXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24odWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHN0YWtlZEFzc2V0OiB1aW50NjQsIHJld2FyZEFzc2V0OiB1aW50NjQsIG1pbkxvY2tVcDogdWludDY0LCBjb250cmFjdER1cmF0aW9uOiB1aW50NjQsIHN0YXJ0VGltZXN0YW1wOiB1aW50NjQsIGFkbWluQWRkcmVzczogQWRkcmVzcyk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byA2IDAKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjAKCS8vIHRoaXMuc3Rha2VkQXNzZXRJZC52YWx1ZSA9IHN0YWtlZEFzc2V0CglieXRlIDB4NzM3NDYxNmI2NTY0NDE3MzczNjU3NDQ5NjQgLy8gInN0YWtlZEFzc2V0SWQiCglmcmFtZV9kaWcgLTEgLy8gc3Rha2VkQXNzZXQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjEKCS8vIHRoaXMucmV3YXJkQXNzZXRJZC52YWx1ZSA9IHJld2FyZEFzc2V0CglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglmcmFtZV9kaWcgLTIgLy8gcmV3YXJkQXNzZXQ6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjIKCS8vIHRoaXMubWluTG9ja1VwLnZhbHVlID0gbWluTG9ja1VwCglieXRlIDB4NmQ2OTZlNGM2ZjYzNmI1NTcwIC8vICJtaW5Mb2NrVXAiCglmcmFtZV9kaWcgLTMgLy8gbWluTG9ja1VwOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjYzCgkvLyB0aGlzLnRvdGFsUmV3YXJkcy52YWx1ZSA9IDAKCWJ5dGUgMHg3NDZmNzQ2MTZjNTI2NTc3NjE3MjY0NzMgLy8gInRvdGFsUmV3YXJkcyIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo2NAoJLy8gdGhpcy50b3RhbFN0YWtlZC52YWx1ZSA9IDAKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0IC8vICJ0b3RhbFN0YWtlZCIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo2NQoJLy8gdGhpcy5jb250cmFjdER1cmF0aW9uLnZhbHVlID0gY29udHJhY3REdXJhdGlvbgoJYnl0ZSAweDYzNmY2ZTc0NzI2MTYzNzQ0NDc1NzI2MTc0Njk2ZjZlIC8vICJjb250cmFjdER1cmF0aW9uIgoJZnJhbWVfZGlnIC00IC8vIGNvbnRyYWN0RHVyYXRpb246IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjYKCS8vIHRoaXMuY29udHJhY3RTdGFydFRpbWVzdGFtcC52YWx1ZSA9IHN0YXJ0VGltZXN0YW1wCglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDUzNzQ2MTcyNzQ1NDY5NmQ2NTczNzQ2MTZkNzAgLy8gImNvbnRyYWN0U3RhcnRUaW1lc3RhbXAiCglmcmFtZV9kaWcgLTUgLy8gc3RhcnRUaW1lc3RhbXA6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjcKCS8vIHRoaXMuY29udHJhY3RFbmRUaW1lc3RhbXAudmFsdWUgPSBzdGFydFRpbWVzdGFtcCArIGNvbnRyYWN0RHVyYXRpb24KCWJ5dGUgMHg2MzZmNmU3NDcyNjE2Mzc0NDU2ZTY0NTQ2OTZkNjU3Mzc0NjE2ZDcwIC8vICJjb250cmFjdEVuZFRpbWVzdGFtcCIKCWZyYW1lX2RpZyAtNSAvLyBzdGFydFRpbWVzdGFtcDogdWludDY0CglmcmFtZV9kaWcgLTQgLy8gY29udHJhY3REdXJhdGlvbjogdWludDY0CgkrCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo2OAoJLy8gdGhpcy50b3RhbFN0YWtpbmdXZWlnaHQudmFsdWUgPSAwCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ0b3RhbFN0YWtpbmdXZWlnaHQiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NjkKCS8vIHRoaXMucmVtYWluaW5nUmV3YXJkcy52YWx1ZSA9IDAKCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo3MAoJLy8gdGhpcy5yZXdhcmRzQXZhaWxhYmxlUGVyVGljay52YWx1ZSA9IDAKCWJ5dGUgMHg3MjY1Nzc2MTcyNjQ3MzQxNzY2MTY5NmM2MTYyNmM2NTUwNjU3MjU0Njk2MzZiIC8vICJyZXdhcmRzQXZhaWxhYmxlUGVyVGljayIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo3MQoJLy8gdGhpcy5hZG1pbkFkZHJlc3MudmFsdWUgPSBhZG1pbkFkZHJlc3MKCWJ5dGUgMHg2MTY0NmQ2OTZlNDE2NDY0NzI2NTczNzMgLy8gImFkbWluQWRkcmVzcyIKCWZyYW1lX2RpZyAtNiAvLyBhZG1pbkFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIG9wdEluVG9BcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX29wdEluVG9BcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgb3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIG9wdEluVG9BcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gb3B0SW5Ub0FwcGxpY2F0aW9uKCk6IHZvaWQKb3B0SW5Ub0FwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjc1CgkvLyB0aGlzLnN0YWtlZCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NzYKCS8vIHRoaXMudW5sb2NrVGltZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NmU2YzZmNjM2YjU0Njk2ZDY1IC8vICJ1bmxvY2tUaW1lIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6NzcKCS8vIHRoaXMuc3Rha2VTdGFydFRpbWUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IDAKCXR4biBTZW5kZXIKCWJ5dGUgMHg3Mzc0NjE2YjY1NTM3NDYxNzI3NDU0Njk2ZDY1IC8vICJzdGFrZVN0YXJ0VGltZSIKCWludCAwCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjc4CgkvLyB0aGlzLnN0YWtlRHVyYXRpb24odGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IDAKCXR4biBTZW5kZXIKCWJ5dGUgMHg3Mzc0NjE2YjY1NDQ3NTcyNjE3NDY5NmY2ZSAvLyAic3Rha2VEdXJhdGlvbiIKCWludCAwCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjc5CgkvLyB0aGlzLnVzZXJTdGFraW5nV2VpZ2h0KHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo4MAoJLy8gdGhpcy5yZXdhcmRSYXRlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzI2NTc3NjE3MjY0NTI2MTc0NjUgLy8gInJld2FyZFJhdGUiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo4MQoJLy8gdGhpcy5hY2NydWVkUmV3YXJkcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCXJldHN1YgoKLy8gb3B0SW5Ub0Fzc2V0KHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfb3B0SW5Ub0Fzc2V0OgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgb3B0SW5Ub0Fzc2V0KHVpbnQ2NCl2b2lkCgljYWxsc3ViIG9wdEluVG9Bc3NldAoJaW50IDEKCXJldHVybgoKLy8gb3B0SW5Ub0Fzc2V0KGFzc2V0OiBBc3NldElEKTogdm9pZApvcHRJblRvQXNzZXQ6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6ODUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYXBwLmNyZWF0b3IpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6ODcKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo4OAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo4OQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjkwCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjkxCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gdXBkYXRlUGFyYW1zKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3VwZGF0ZVBhcmFtczoKCS8vIGNvbnRyYWN0RHVyYXRpb246IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIG1pbkxvY2tVcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSB1cGRhdGVQYXJhbXModWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIHVwZGF0ZVBhcmFtcwoJaW50IDEKCXJldHVybgoKLy8gdXBkYXRlUGFyYW1zKG1pbkxvY2tVcDogdWludDY0LCBjb250cmFjdER1cmF0aW9uOiB1aW50NjQpOiB2b2lkCnVwZGF0ZVBhcmFtczoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo5NwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbkFkZHJlc3MudmFsdWUsICdPbmx5IGFkbWluIGNhbiB1cGRhdGUgcGFyYW1zJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlNDE2NDY0NzI2NTczNzMgLy8gImFkbWluQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgYWRtaW4gY2FuIHVwZGF0ZSBwYXJhbXMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czo5OQoJLy8gdGhpcy5taW5Mb2NrVXAudmFsdWUgPSBtaW5Mb2NrVXAKCWJ5dGUgMHg2ZDY5NmU0YzZmNjM2YjU1NzAgLy8gIm1pbkxvY2tVcCIKCWZyYW1lX2RpZyAtMSAvLyBtaW5Mb2NrVXA6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTAwCgkvLyB0aGlzLmNvbnRyYWN0RHVyYXRpb24udmFsdWUgPSBjb250cmFjdER1cmF0aW9uCglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDQ0NzU3MjYxNzQ2OTZmNmUgLy8gImNvbnRyYWN0RHVyYXRpb24iCglmcmFtZV9kaWcgLTIgLy8gY29udHJhY3REdXJhdGlvbjogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMDEKCS8vIHRoaXMuY29udHJhY3RFbmRUaW1lc3RhbXAudmFsdWUgPSB0aGlzLmNvbnRyYWN0U3RhcnRUaW1lc3RhbXAudmFsdWUgKyBjb250cmFjdER1cmF0aW9uCglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDQ1NmU2NDU0Njk2ZDY1NzM3NDYxNmQ3MCAvLyAiY29udHJhY3RFbmRUaW1lc3RhbXAiCglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDUzNzQ2MTcyNzQ1NDY5NmQ2NTczNzQ2MTZkNzAgLy8gImNvbnRyYWN0U3RhcnRUaW1lc3RhbXAiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIGNvbnRyYWN0RHVyYXRpb246IHVpbnQ2NAoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEwMgoJLy8gdGhpcy50b3RhbFJld2FyZHMudmFsdWUgPiAwCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT4KCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTAzCgkvLyB0aGlzLnJld2FyZHNBdmFpbGFibGVQZXJUaWNrLnZhbHVlID0gdGhpcy50b3RhbFJld2FyZHMudmFsdWUgLyBjb250cmFjdER1cmF0aW9uCglieXRlIDB4NzI2NTc3NjE3MjY0NzM0MTc2NjE2OTZjNjE2MjZjNjU1MDY1NzI1NDY5NjM2YiAvLyAicmV3YXJkc0F2YWlsYWJsZVBlclRpY2siCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIGNvbnRyYWN0RHVyYXRpb246IHVpbnQ2NAoJLwoJYXBwX2dsb2JhbF9wdXQKCippZjBfZW5kOgoJcmV0c3ViCgovLyBhZGRSZXdhcmRzKGF4ZmVyLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYWRkUmV3YXJkczoKCS8vIHF1YW50aXR5OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyByZXdhcmRUeG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAxIChyZXdhcmRUeG4pIGZvciBhZGRSZXdhcmRzIG11c3QgYmUgYSBheGZlciB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGRSZXdhcmRzKGF4ZmVyLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGFkZFJld2FyZHMKCWludCAxCglyZXR1cm4KCi8vIGFkZFJld2FyZHMocmV3YXJkVHhuOiBBc3NldFRyYW5zZmVyVHhuLCBxdWFudGl0eTogdWludDY0KTogdm9pZAphZGRSZXdhcmRzOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEwOAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbkFkZHJlc3MudmFsdWUsICdPbmx5IGFkbWluIGNhbiBhZGQgcmV3YXJkcycpCgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZTQxNjQ2NDcyNjU3MzczIC8vICJhZG1pbkFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyBPbmx5IGFkbWluIGNhbiBhZGQgcmV3YXJkcwoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEwOQoJLy8gYXNzZXJ0KHRoaXMubWluTG9ja1VwLnZhbHVlICE9PSAwLCAnTWluaW11bSBsb2NrdXAgbm90IHNldCcpCglieXRlIDB4NmQ2OTZlNGM2ZjYzNmI1NTcwIC8vICJtaW5Mb2NrVXAiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCSE9CgoJLy8gTWluaW11bSBsb2NrdXAgbm90IHNldAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjExMAoJLy8gYXNzZXJ0KHRoaXMuY29udHJhY3REdXJhdGlvbi52YWx1ZSAhPT0gMCwgJ0NvbnRyYWN0IGR1cmF0aW9uIG5vdCBzZXQnKQoJYnl0ZSAweDYzNmY2ZTc0NzI2MTYzNzQ0NDc1NzI2MTc0Njk2ZjZlIC8vICJjb250cmFjdER1cmF0aW9uIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCgkhPQoKCS8vIENvbnRyYWN0IGR1cmF0aW9uIG5vdCBzZXQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMTIKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4ocmV3YXJkVHhuLCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmNyZWF0b3IsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5yZXdhcmRBc3NldElkLnZhbHVlKSwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBxdWFudGl0eSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHJld2FyZFR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJyZXdhcmRUeG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHJld2FyZFR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJyZXdhcmRUeG4iLCJmaWVsZCI6ImFzc2V0UmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIHJld2FyZFR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFR4biIsImZpZWxkIjoieGZlckFzc2V0IiwiZXhwZWN0ZWQiOiJBc3NldElELmZyb21VaW50NjQodGhpcy5yZXdhcmRBc3NldElkLnZhbHVlKSJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyByZXdhcmRUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTIgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFR4biIsImZpZWxkIjoiYXNzZXRBbW91bnQiLCJleHBlY3RlZCI6InF1YW50aXR5In0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMTgKCS8vIHRoaXMudG90YWxSZXdhcmRzLnZhbHVlICs9IHF1YW50aXR5CglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCSsKCWJ5dGUgMHg3NDZmNzQ2MTZjNTI2NTc3NjE3MjY0NzMgLy8gInRvdGFsUmV3YXJkcyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjExOQoJLy8gdGhpcy5yZW1haW5pbmdSZXdhcmRzLnZhbHVlICs9IHF1YW50aXR5CglieXRlIDB4NzI2NTZkNjE2OTZlNjk2ZTY3NTI2NTc3NjE3MjY0NzMgLy8gInJlbWFpbmluZ1Jld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCSsKCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEyMAoJLy8gdGhpcy5yZXdhcmRzQXZhaWxhYmxlUGVyVGljay52YWx1ZSA9IHRoaXMudG90YWxSZXdhcmRzLnZhbHVlIC8gdGhpcy5jb250cmFjdER1cmF0aW9uLnZhbHVlCglieXRlIDB4NzI2NTc3NjE3MjY0NzM0MTc2NjE2OTZjNjE2MjZjNjU1MDY1NzI1NDY5NjM2YiAvLyAicmV3YXJkc0F2YWlsYWJsZVBlclRpY2siCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZSAweDYzNmY2ZTc0NzI2MTYzNzQ0NDc1NzI2MTc0Njk2ZjZlIC8vICJjb250cmFjdER1cmF0aW9uIgoJYXBwX2dsb2JhbF9nZXQKCS8KCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGFkZFJld2FyZHNBbGdvKHBheSx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2FkZFJld2FyZHNBbGdvOgoJLy8gcXVhbnRpdHk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIHBheVR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09CgoJLy8gYXJndW1lbnQgMSAocGF5VHhuKSBmb3IgYWRkUmV3YXJkc0FsZ28gbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGRSZXdhcmRzQWxnbyhwYXksdWludDY0KXZvaWQKCWNhbGxzdWIgYWRkUmV3YXJkc0FsZ28KCWludCAxCglyZXR1cm4KCi8vIGFkZFJld2FyZHNBbGdvKHBheVR4bjogUGF5VHhuLCBxdWFudGl0eTogdWludDY0KTogdm9pZAphZGRSZXdhcmRzQWxnbzoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMjQKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gYWRkIHJld2FyZHMnKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmU0MTY0NjQ3MjY1NzM3MyAvLyAiYWRtaW5BZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBhZG1pbiBjYW4gYWRkIHJld2FyZHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMjUKCS8vIGFzc2VydCh0aGlzLm1pbkxvY2tVcC52YWx1ZSAhPT0gMCwgJ01pbmltdW0gbG9ja3VwIG5vdCBzZXQnKQoJYnl0ZSAweDZkNjk2ZTRjNmY2MzZiNTU3MCAvLyAibWluTG9ja1VwIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCgkhPQoKCS8vIE1pbmltdW0gbG9ja3VwIG5vdCBzZXQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMjYKCS8vIGFzc2VydCh0aGlzLmNvbnRyYWN0RHVyYXRpb24udmFsdWUgIT09IDAsICdDb250cmFjdCBkdXJhdGlvbiBub3Qgc2V0JykKCWJ5dGUgMHg2MzZmNmU3NDcyNjE2Mzc0NDQ3NTcyNjE3NDY5NmY2ZSAvLyAiY29udHJhY3REdXJhdGlvbiIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMAoJIT0KCgkvLyBDb250cmFjdCBkdXJhdGlvbiBub3Qgc2V0Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTI4CgkvLyB2ZXJpZnlQYXlUeG4ocGF5VHhuLCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmNyZWF0b3IsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogcXVhbnRpdHksCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG46IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXlUeG4iLCJmaWVsZCI6InNlbmRlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuY3JlYXRvciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoicGF5VHhuIiwiZmllbGQiOiJyZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJwYXlUeG4iLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoicXVhbnRpdHkifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEzNAoJLy8gdGhpcy50b3RhbFJld2FyZHMudmFsdWUgKz0gcGF5VHhuLmFtb3VudAoJYnl0ZSAweDc0NmY3NDYxNmM1MjY1Nzc2MTcyNjQ3MyAvLyAidG90YWxSZXdhcmRzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXlUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgkrCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxMzUKCS8vIHRoaXMucmVtYWluaW5nUmV3YXJkcy52YWx1ZSArPSBwYXlUeG4uYW1vdW50CglieXRlIDB4NzI2NTZkNjE2OTZlNjk2ZTY3NTI2NTc3NjE3MjY0NzMgLy8gInJlbWFpbmluZ1Jld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHBheVR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCSsKCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjEzNgoJLy8gdGhpcy5yZXdhcmRzQXZhaWxhYmxlUGVyVGljay52YWx1ZSA9IHRoaXMudG90YWxSZXdhcmRzLnZhbHVlIC8gdGhpcy5jb250cmFjdER1cmF0aW9uLnZhbHVlCglieXRlIDB4NzI2NTc3NjE3MjY0NzM0MTc2NjE2OTZjNjE2MjZjNjU1MDY1NzI1NDY5NjM2YiAvLyAicmV3YXJkc0F2YWlsYWJsZVBlclRpY2siCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJYnl0ZSAweDYzNmY2ZTc0NzI2MTYzNzQ0NDc1NzI2MTc0Njk2ZjZlIC8vICJjb250cmFjdER1cmF0aW9uIgoJYXBwX2dsb2JhbF9nZXQKCS8KCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJlbW92ZVJld2FyZHModWludDY0KXZvaWQKKmFiaV9yb3V0ZV9yZW1vdmVSZXdhcmRzOgoJLy8gcXVhbnRpdHk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgcmVtb3ZlUmV3YXJkcyh1aW50NjQpdm9pZAoJY2FsbHN1YiByZW1vdmVSZXdhcmRzCglpbnQgMQoJcmV0dXJuCgovLyByZW1vdmVSZXdhcmRzKHF1YW50aXR5OiB1aW50NjQpOiB2b2lkCnJlbW92ZVJld2FyZHM6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gcmVtb3ZlIHJld2FyZHMnKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmU0MTY0NjQ3MjY1NzM3MyAvLyAiYWRtaW5BZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBhZG1pbiBjYW4gcmVtb3ZlIHJld2FyZHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDEKCS8vIGFzc2VydCh0aGlzLnJlbWFpbmluZ1Jld2FyZHMudmFsdWUgPj0gcXVhbnRpdHksICdJbnN1ZmZpY2llbnQgcmV3YXJkcycpCglieXRlIDB4NzI2NTZkNjE2OTZlNjk2ZTY3NTI2NTc3NjE3MjY0NzMgLy8gInJlbWFpbmluZ1Jld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHF1YW50aXR5OiB1aW50NjQKCT49CgoJLy8gSW5zdWZmaWNpZW50IHJld2FyZHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDMKCS8vIHJld2FyZHNUb1JlbW92ZSA9IHF1YW50aXR5CglmcmFtZV9kaWcgLTEgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJZnJhbWVfYnVyeSAwIC8vIHJld2FyZHNUb1JlbW92ZTogdWludDY0CgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDQKCS8vIHJld2FyZHNUb1JlbW92ZSA9PT0gMAoJZnJhbWVfZGlnIDAgLy8gcmV3YXJkc1RvUmVtb3ZlOiB1aW50NjQKCWludCAwCgk9PQoJYnogKmlmMV9lbmQKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDUKCS8vIHJld2FyZHNUb1JlbW92ZSA9IHRoaXMucmVtYWluaW5nUmV3YXJkcy52YWx1ZQoJYnl0ZSAweDcyNjU2ZDYxNjk2ZTY5NmU2NzUyNjU3NzYxNzI2NDczIC8vICJyZW1haW5pbmdSZXdhcmRzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgMCAvLyByZXdhcmRzVG9SZW1vdmU6IHVpbnQ2NAoKKmlmMV9lbmQ6CgkvLyAqaWYyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE0NwoJLy8gdGhpcy5yZXdhcmRBc3NldElkLnZhbHVlID09PSAwCglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09CglieiAqaWYyX2Vsc2UKCgkvLyAqaWYyX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDgKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgYW1vdW50OiByZXdhcmRzVG9SZW1vdmUsCgkvLyAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5jcmVhdG9yLAoJLy8gICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGZlZTogMV8wMDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNDkKCS8vIGFtb3VudDogcmV3YXJkc1RvUmVtb3ZlCglmcmFtZV9kaWcgMCAvLyByZXdhcmRzVG9SZW1vdmU6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTUwCgkvLyByZWNlaXZlcjogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE1MQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTUyCgkvLyBmZWU6IDFfMDAwCglpbnQgMV8wMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJYiAqaWYyX2VuZAoKKmlmMl9lbHNlOgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE1NQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnJld2FyZEFzc2V0SWQudmFsdWUpLAoJLy8gICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5jcmVhdG9yLAoJLy8gICAgICAgICBhc3NldEFtb3VudDogcmV3YXJkc1RvUmVtb3ZlLAoJLy8gICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGZlZTogMV8wMDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE1NgoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5yZXdhcmRBc3NldElkLnZhbHVlKQoJYnl0ZSAweDcyNjU3NzYxNzI2NDQxNzM3MzY1NzQ0OTY0IC8vICJyZXdhcmRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE1NwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTU4CgkvLyBhc3NldEFtb3VudDogcmV3YXJkc1RvUmVtb3ZlCglmcmFtZV9kaWcgMCAvLyByZXdhcmRzVG9SZW1vdmU6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNTkKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE2MAoJLy8gZmVlOiAxXzAwMAoJaW50IDFfMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjJfZW5kOgoJLy8gKmlmM19jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNjMKCS8vIHJld2FyZHNUb1JlbW92ZSA9PT0gMAoJZnJhbWVfZGlnIDAgLy8gcmV3YXJkc1RvUmVtb3ZlOiB1aW50NjQKCWludCAwCgk9PQoJYnogKmlmM19lbHNlCgoJLy8gKmlmM19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTY0CgkvLyB0aGlzLnRvdGFsUmV3YXJkcy52YWx1ZSA9IDAKCWJ5dGUgMHg3NDZmNzQ2MTZjNTI2NTc3NjE3MjY0NzMgLy8gInRvdGFsUmV3YXJkcyIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNjUKCS8vIHRoaXMucmVtYWluaW5nUmV3YXJkcy52YWx1ZSA9IDAKCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNjYKCS8vIHRoaXMucmV3YXJkc0F2YWlsYWJsZVBlclRpY2sudmFsdWUgPSAwCglieXRlIDB4NzI2NTc3NjE3MjY0NzM0MTc2NjE2OTZjNjE2MjZjNjU1MDY1NzI1NDY5NjM2YiAvLyAicmV3YXJkc0F2YWlsYWJsZVBlclRpY2siCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCWIgKmlmM19lbmQKCippZjNfZWxzZToKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNjgKCS8vIHRoaXMudG90YWxSZXdhcmRzLnZhbHVlIC09IHJld2FyZHNUb1JlbW92ZQoJYnl0ZSAweDc0NmY3NDYxNmM1MjY1Nzc2MTcyNjQ3MyAvLyAidG90YWxSZXdhcmRzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAwIC8vIHJld2FyZHNUb1JlbW92ZTogdWludDY0CgktCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNjkKCS8vIHRoaXMucmVtYWluaW5nUmV3YXJkcy52YWx1ZSA9IHRoaXMudG90YWxSZXdhcmRzLnZhbHVlCglieXRlIDB4NzI2NTZkNjE2OTZlNjk2ZTY3NTI2NTc3NjE3MjY0NzMgLy8gInJlbWFpbmluZ1Jld2FyZHMiCglieXRlIDB4NzQ2Zjc0NjE2YzUyNjU3NzYxNzI2NDczIC8vICJ0b3RhbFJld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTcwCgkvLyB0aGlzLnJld2FyZHNBdmFpbGFibGVQZXJUaWNrLnZhbHVlID0gdGhpcy50b3RhbFJld2FyZHMudmFsdWUgLyB0aGlzLmNvbnRyYWN0RHVyYXRpb24udmFsdWUKCWJ5dGUgMHg3MjY1Nzc2MTcyNjQ3MzQxNzY2MTY5NmM2MTYyNmM2NTUwNjU3MjU0Njk2MzZiIC8vICJyZXdhcmRzQXZhaWxhYmxlUGVyVGljayIKCWJ5dGUgMHg3NDZmNzQ2MTZjNTI2NTc3NjE3MjY0NzMgLy8gInRvdGFsUmV3YXJkcyIKCWFwcF9nbG9iYWxfZ2V0CglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDQ0NzU3MjYxNzQ2OTZmNmUgLy8gImNvbnRyYWN0RHVyYXRpb24iCglhcHBfZ2xvYmFsX2dldAoJLwoJYXBwX2dsb2JhbF9wdXQKCippZjNfZW5kOgoJcmV0c3ViCgovLyBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2RlbGV0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBkZWxldGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gZGVsZXRlQXBwbGljYXRpb24oKTogdm9pZApkZWxldGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxNzUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gZGVsZXRlIGFwcGxpY2F0aW9uJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlNDE2NDY0NzI2NTczNzMgLy8gImFkbWluQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgYWRtaW4gY2FuIGRlbGV0ZSBhcHBsaWNhdGlvbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE3NgoJLy8gYXNzZXJ0KHRoaXMudG90YWxTdGFrZWQudmFsdWUgPT09IDAsICdTdGFrZWQgYXNzZXRzIHN0aWxsIGV4aXN0JykKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0IC8vICJ0b3RhbFN0YWtlZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMAoJPT0KCgkvLyBTdGFrZWQgYXNzZXRzIHN0aWxsIGV4aXN0Cglhc3NlcnQKCgkvLyAqaWY0X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE3OAoJLy8gdGhpcy5yZXdhcmRBc3NldElkLnZhbHVlICE9PSAwCglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCSE9CglieiAqaWY0X2VuZAoKCS8vICppZjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE3OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnJld2FyZEFzc2V0SWQudmFsdWUpLAoJLy8gICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5jcmVhdG9yLAoJLy8gICAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICBhc3NldENsb3NlVG86IHRoaXMuYXBwLmNyZWF0b3IsCgkvLyAgICAgICAgIGZlZTogMV8wMDAsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE4MAoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5yZXdhcmRBc3NldElkLnZhbHVlKQoJYnl0ZSAweDcyNjU3NzYxNzI2NDQxNzM3MzY1NzQ0OTY0IC8vICJyZXdhcmRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE4MQoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTgyCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTgzCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxODQKCS8vIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxODUKCS8vIGZlZTogMV8wMDAKCWludCAxXzAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWY0X2VuZDoKCS8vICppZjVfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTg4CgkvLyB0aGlzLnN0YWtlZEFzc2V0SWQudmFsdWUgIT09IDAKCWJ5dGUgMHg3Mzc0NjE2YjY1NjQ0MTczNzM2NTc0NDk2NCAvLyAic3Rha2VkQXNzZXRJZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMAoJIT0KCWJ6ICppZjVfZW5kCgoJLy8gKmlmNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTg5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgIHhmZXJBc3NldDogQXNzZXRJRC5mcm9tVWludDY0KHRoaXMuc3Rha2VkQXNzZXRJZC52YWx1ZSksCgkvLyAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmNyZWF0b3IsCgkvLyAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuY3JlYXRvciwKCS8vCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE5MAoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5zdGFrZWRBc3NldElkLnZhbHVlKQoJYnl0ZSAweDczNzQ2MTZiNjU2NDQxNzM3MzY1NzQ0OTY0IC8vICJzdGFrZWRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE5MQoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTkyCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MTkzCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoxOTQKCS8vIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuY3JlYXRvcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCglpdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCippZjVfZW5kOgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjE5OQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiAodGhpcy5hZG1pbkFkZHJlc3MudmFsdWUuYmFsYW5jZSAtIHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLm1pbkJhbGFuY2UpLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgZmVlOiAxXzAwMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMDAKCS8vIGFtb3VudDogKHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLmJhbGFuY2UgLSB0aGlzLmFkbWluQWRkcmVzcy52YWx1ZS5taW5CYWxhbmNlKQoJYnl0ZSAweDYxNjQ2ZDY5NmU0MTY0NjQ3MjY1NzM3MyAvLyAiYWRtaW5BZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCglieXRlIDB4NjE2NDZkNjk2ZTQxNjQ2NDcyNjU3MzczIC8vICJhZG1pbkFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCglwb3AKCS0KCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjIwMQoJLy8gcmVjZWl2ZXI6IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlCglieXRlIDB4NjE2NDZkNjk2ZTQxNjQ2NDcyNjU3MzczIC8vICJhZG1pbkFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMDIKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjIwMwoJLy8gZmVlOiAxXzAwMAoJaW50IDFfMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gc3Rha2UoYXhmZXIsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zdGFrZToKCS8vIHVzZXJSZXdhcmRSYXRlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyB1c2VyU3Rha2luZ1dlaWdodDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gbG9ja1BlcmlvZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gcXVhbnRpdHk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIHN0YWtlVHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXhmZXIKCT09CgoJLy8gYXJndW1lbnQgNCAoc3Rha2VUeG4pIGZvciBzdGFrZSBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgc3Rha2UoYXhmZXIsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc3Rha2UKCWludCAxCglyZXR1cm4KCi8vIHN0YWtlKHN0YWtlVHhuOiBBc3NldFRyYW5zZmVyVHhuLCBxdWFudGl0eTogdWludDY0LCBsb2NrUGVyaW9kOiB1aW50NjQsIHVzZXJTdGFraW5nV2VpZ2h0OiB1aW50NjQsIHVzZXJSZXdhcmRSYXRlOiB1aW50NjQpOiB2b2lkCnN0YWtlOgoJcHJvdG8gNSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjE1CgkvLyBjdXJyZW50VGltZVN0YW1wID0gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50VGltZVN0YW1wOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjE2CgkvLyBhc3NlcnQobG9ja1BlcmlvZCA+PSB0aGlzLm1pbkxvY2tVcC52YWx1ZSwgJ0xvY2sgcGVyaW9kIHRvbyBzaG9ydCcpCglmcmFtZV9kaWcgLTMgLy8gbG9ja1BlcmlvZDogdWludDY0CglieXRlIDB4NmQ2OTZlNGM2ZjYzNmI1NTcwIC8vICJtaW5Mb2NrVXAiCglhcHBfZ2xvYmFsX2dldAoJPj0KCgkvLyBMb2NrIHBlcmlvZCB0b28gc2hvcnQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMTcKCS8vIGFzc2VydChjdXJyZW50VGltZVN0YW1wICsgbG9ja1BlcmlvZCA8IHRoaXMuY29udHJhY3RFbmRUaW1lc3RhbXAudmFsdWUsICdMb2NrIHBlcmlvZCB0b28gbG9uZycpCglmcmFtZV9kaWcgMCAvLyBjdXJyZW50VGltZVN0YW1wOiB1aW50NjQKCWZyYW1lX2RpZyAtMyAvLyBsb2NrUGVyaW9kOiB1aW50NjQKCSsKCWJ5dGUgMHg2MzZmNmU3NDcyNjE2Mzc0NDU2ZTY0NTQ2OTZkNjU3Mzc0NjE2ZDcwIC8vICJjb250cmFjdEVuZFRpbWVzdGFtcCIKCWFwcF9nbG9iYWxfZ2V0Cgk8CgoJLy8gTG9jayBwZXJpb2QgdG9vIGxvbmcKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMTgKCS8vIGFzc2VydChjdXJyZW50VGltZVN0YW1wIDw9IHRoaXMuY29udHJhY3RFbmRUaW1lc3RhbXAudmFsdWUsICdDb250cmFjdCBoYXMgZW5kZWQnKQoJZnJhbWVfZGlnIDAgLy8gY3VycmVudFRpbWVTdGFtcDogdWludDY0CglieXRlIDB4NjM2ZjZlNzQ3MjYxNjM3NDQ1NmU2NDU0Njk2ZDY1NzM3NDYxNmQ3MCAvLyAiY29udHJhY3RFbmRUaW1lc3RhbXAiCglhcHBfZ2xvYmFsX2dldAoJPD0KCgkvLyBDb250cmFjdCBoYXMgZW5kZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMTkKCS8vIGFzc2VydCh0aGlzLnN0YWtlZCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID09PSAwLCAnVXNlciBhbHJlYWR5IHN0YWtlZCcpCgl0eG4gU2VuZGVyCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglhcHBfbG9jYWxfZ2V0CglpbnQgMAoJPT0KCgkvLyBVc2VyIGFscmVhZHkgc3Rha2VkCglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjIwCgkvLyBhc3NlcnQocXVhbnRpdHkgPiAwLCAnSW52YWxpZCBxdWFudGl0eScpCglmcmFtZV9kaWcgLTIgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJaW50IDAKCT4KCgkvLyBJbnZhbGlkIHF1YW50aXR5Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjIyCgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKHN0YWtlVHhuLCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnN0YWtlZEFzc2V0SWQudmFsdWUpLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHF1YW50aXR5LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gc3Rha2VUeG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InN0YWtlVHhuIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InN0YWtlVHhuIiwiZmllbGQiOiJhc3NldFJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSB4ZmVyQXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBzdGFrZVR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NzM3NDYxNmI2NTY0NDE3MzczNjU3NDQ5NjQgLy8gInN0YWtlZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InN0YWtlVHhuIiwiZmllbGQiOiJ4ZmVyQXNzZXQiLCJleHBlY3RlZCI6IkFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnN0YWtlZEFzc2V0SWQudmFsdWUpIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJzdGFrZVR4biIsImZpZWxkIjoiYXNzZXRBbW91bnQiLCJleHBlY3RlZCI6InF1YW50aXR5In0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMjgKCS8vIHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSBzdGFrZVR4bi5hc3NldEFtb3VudAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJZnJhbWVfZGlnIC0xIC8vIHN0YWtlVHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMjkKCS8vIHRoaXMuc3Rha2VEdXJhdGlvbih0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gbG9ja1BlcmlvZAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU0NDc1NzI2MTc0Njk2ZjZlIC8vICJzdGFrZUR1cmF0aW9uIgoJZnJhbWVfZGlnIC0zIC8vIGxvY2tQZXJpb2Q6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzAKCS8vIHRoaXMudXNlclN0YWtpbmdXZWlnaHQodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IHVzZXJTdGFraW5nV2VpZ2h0Cgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglmcmFtZV9kaWcgLTQgLy8gdXNlclN0YWtpbmdXZWlnaHQ6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzEKCS8vIHRoaXMudG90YWxTdGFraW5nV2VpZ2h0LnZhbHVlICs9IHRoaXMudXNlclN0YWtpbmdXZWlnaHQodGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidG90YWxTdGFraW5nV2VpZ2h0IgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCWJ5dGUgMHg3NTczNjU3MjUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ1c2VyU3Rha2luZ1dlaWdodCIKCWFwcF9sb2NhbF9nZXQKCSsKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInRvdGFsU3Rha2luZ1dlaWdodCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjIzMwoJLy8gdGhpcy50b3RhbFN0YWtlZC52YWx1ZSArPSB0aGlzLnN0YWtlZCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjU2NCAvLyAidG90YWxTdGFrZWQiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJYXBwX2xvY2FsX2dldAoJKwoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc0NjE2YjY1NjQgLy8gInRvdGFsU3Rha2VkIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjM0CgkvLyB0aGlzLnJld2FyZFJhdGUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IHVzZXJSZXdhcmRSYXRlCgl0eG4gU2VuZGVyCglieXRlIDB4NzI2NTc3NjE3MjY0NTI2MTc0NjUgLy8gInJld2FyZFJhdGUiCglmcmFtZV9kaWcgLTUgLy8gdXNlclJld2FyZFJhdGU6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzUKCS8vIHRoaXMuc3Rha2VTdGFydFRpbWUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IGN1cnJlbnRUaW1lU3RhbXAKCXR4biBTZW5kZXIKCWJ5dGUgMHg3Mzc0NjE2YjY1NTM3NDYxNzI3NDU0Njk2ZDY1IC8vICJzdGFrZVN0YXJ0VGltZSIKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnRUaW1lU3RhbXA6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzYKCS8vIHRoaXMudXNlclN0YWtpbmdXZWlnaHQodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IHVzZXJTdGFraW5nV2VpZ2h0Cgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglmcmFtZV9kaWcgLTQgLy8gdXNlclN0YWtpbmdXZWlnaHQ6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzcKCS8vIHRoaXMudW5sb2NrVGltZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gY3VycmVudFRpbWVTdGFtcCArIGxvY2tQZXJpb2QKCXR4biBTZW5kZXIKCWJ5dGUgMHg3NTZlNmM2ZjYzNmI1NDY5NmQ2NSAvLyAidW5sb2NrVGltZSIKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnRUaW1lU3RhbXA6IHVpbnQ2NAoJZnJhbWVfZGlnIC0zIC8vIGxvY2tQZXJpb2Q6IHVpbnQ2NAoJKwoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyMzgKCS8vIHRoaXMubGFzdFVwZGF0ZVRpbWUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IGN1cnJlbnRUaW1lU3RhbXAKCXR4biBTZW5kZXIKCWJ5dGUgMHg2YzYxNzM3NDU1NzA2NDYxNzQ2NTU0Njk2ZDY1IC8vICJsYXN0VXBkYXRlVGltZSIKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnRUaW1lU3RhbXA6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgovLyBzZXRSZXdhcmRSYXRlKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfc2V0UmV3YXJkUmF0ZToKCS8vIHVzZXJTdGFraW5nV2VpZ2h0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyB1c2VyUmV3YXJkUmF0ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gdXNlckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMiAodXNlckFkZHJlc3MpIGZvciBzZXRSZXdhcmRSYXRlIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHNldFJld2FyZFJhdGUoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0UmV3YXJkUmF0ZQoJaW50IDEKCXJldHVybgoKLy8gc2V0UmV3YXJkUmF0ZSh1c2VyQWRkcmVzczogQWRkcmVzcywgdXNlclJld2FyZFJhdGU6IHVpbnQ2NCwgdXNlclN0YWtpbmdXZWlnaHQ6IHVpbnQ2NCk6IHZvaWQKc2V0UmV3YXJkUmF0ZToKCXByb3RvIDMgMAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNDIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gc2V0IHJld2FyZCByYXRlJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlNDE2NDY0NzI2NTczNzMgLy8gImFkbWluQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgYWRtaW4gY2FuIHNldCByZXdhcmQgcmF0ZQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI0NAoJLy8gdGhpcy50b3RhbFN0YWtpbmdXZWlnaHQudmFsdWUgLT0gdGhpcy51c2VyU3Rha2luZ1dlaWdodCh1c2VyQWRkcmVzcykudmFsdWUKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInRvdGFsU3Rha2luZ1dlaWdodCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3NTczNjU3MjUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ1c2VyU3Rha2luZ1dlaWdodCIKCWFwcF9sb2NhbF9nZXQKCS0KCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInRvdGFsU3Rha2luZ1dlaWdodCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI0NQoJLy8gdGhpcy5yZXdhcmRSYXRlKHVzZXJBZGRyZXNzKS52YWx1ZSA9IHVzZXJSZXdhcmRSYXRlCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3MjY1Nzc2MTcyNjQ1MjYxNzQ2NSAvLyAicmV3YXJkUmF0ZSIKCWZyYW1lX2RpZyAtMiAvLyB1c2VyUmV3YXJkUmF0ZTogdWludDY0CglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI0NgoJLy8gdGhpcy51c2VyU3Rha2luZ1dlaWdodCh1c2VyQWRkcmVzcykudmFsdWUgPSB1c2VyU3Rha2luZ1dlaWdodAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglmcmFtZV9kaWcgLTMgLy8gdXNlclN0YWtpbmdXZWlnaHQ6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNDcKCS8vIHRoaXMudG90YWxTdGFraW5nV2VpZ2h0LnZhbHVlICs9IHRoaXMudXNlclN0YWtpbmdXZWlnaHQodXNlckFkZHJlc3MpLnZhbHVlCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ0b3RhbFN0YWtpbmdXZWlnaHQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglhcHBfbG9jYWxfZ2V0CgkrCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ0b3RhbFN0YWtpbmdXZWlnaHQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBhY2NydWVSZXdhcmRzKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2FjY3J1ZVJld2FyZHM6CgkvLyB1c2VyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh1c2VyQWRkcmVzcykgZm9yIGFjY3J1ZVJld2FyZHMgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWNjcnVlUmV3YXJkcyhhZGRyZXNzKXZvaWQKCWNhbGxzdWIgYWNjcnVlUmV3YXJkcwoJaW50IDEKCXJldHVybgoKLy8gYWNjcnVlUmV3YXJkcyh1c2VyQWRkcmVzczogQWRkcmVzcyk6IHZvaWQKYWNjcnVlUmV3YXJkczoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNTEKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW5BZGRyZXNzLnZhbHVlLCAnT25seSBhZG1pbiBjYW4gYWNjcnVlIHJld2FyZHMnKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmU0MTY0NjQ3MjY1NzM3MyAvLyAiYWRtaW5BZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09CgoJLy8gT25seSBhZG1pbiBjYW4gYWNjcnVlIHJld2FyZHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNTIKCS8vIGFzc2VydCh0aGlzLnVubG9ja1RpbWUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA+IChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCksICd1bmxvY2sgdGltZSByZWFjaGVkJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg3NTZlNmM2ZjYzNmI1NDY5NmQ2NSAvLyAidW5sb2NrVGltZSIKCWFwcF9sb2NhbF9nZXQKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCT4KCgkvLyB1bmxvY2sgdGltZSByZWFjaGVkCglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjU0CgkvLyB0aGlzLmFjY3J1ZWRSZXdhcmRzKHVzZXJBZGRyZXNzKS52YWx1ZSArPSAodGhpcy5yZXdhcmRSYXRlKHVzZXJBZGRyZXNzKS52YWx1ZSAqIChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCAtIHRoaXMubGFzdFVwZGF0ZVRpbWUodXNlckFkZHJlc3MpLnZhbHVlKSkKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzI2NTc3NjE3MjY0NTI2MTc0NjUgLy8gInJld2FyZFJhdGUiCglhcHBfbG9jYWxfZ2V0CglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg2YzYxNzM3NDU1NzA2NDYxNzQ2NTU0Njk2ZDY1IC8vICJsYXN0VXBkYXRlVGltZSIKCWFwcF9sb2NhbF9nZXQKCS0KCSoKCSsKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJdW5jb3ZlciAyCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI1NQoJLy8gdGhpcy5sYXN0VXBkYXRlVGltZSh1c2VyQWRkcmVzcykudmFsdWUgPSBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NmM2MTczNzQ1NTcwNjQ2MTc0NjU1NDY5NmQ2NSAvLyAibGFzdFVwZGF0ZVRpbWUiCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglhcHBfbG9jYWxfcHV0CglyZXRzdWIKCi8vIHVuc3Rha2UoKXZvaWQKKmFiaV9yb3V0ZV91bnN0YWtlOgoJLy8gZXhlY3V0ZSB1bnN0YWtlKCl2b2lkCgljYWxsc3ViIHVuc3Rha2UKCWludCAxCglyZXR1cm4KCi8vIHVuc3Rha2UoKTogdm9pZAp1bnN0YWtlOgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI1OQoJLy8gYXNzZXJ0KHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPiAwLCAnTm8gc3Rha2VkIGFzc2V0cycpCgl0eG4gU2VuZGVyCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglhcHBfbG9jYWxfZ2V0CglpbnQgMAoJPgoKCS8vIE5vIHN0YWtlZCBhc3NldHMKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNjAKCS8vIGFzc2VydCh0aGlzLnVubG9ja1RpbWUodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA8IChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCksICd1bmxvY2sgdGltZSBub3QgcmVhY2hlZCcpCgl0eG4gU2VuZGVyCglieXRlIDB4NzU2ZTZjNmY2MzZiNTQ2OTZkNjUgLy8gInVubG9ja1RpbWUiCglhcHBfbG9jYWxfZ2V0CglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCgk8CgoJLy8gdW5sb2NrIHRpbWUgbm90IHJlYWNoZWQKCWFzc2VydAoKCS8vICppZjZfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjYyCgkvLyB0aGlzLnN0YWtlZCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID4gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJYXBwX2xvY2FsX2dldAoJaW50IDAKCT4KCWJ6ICppZjZfZW5kCgoJLy8gKmlmNl9jb25zZXF1ZW50CgkvLyAqaWY3X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI2MwoJLy8gdGhpcy5zdGFrZWRBc3NldElkLnZhbHVlID09PSAwCglieXRlIDB4NzM3NDYxNmI2NTY0NDE3MzczNjU3NDQ5NjQgLy8gInN0YWtlZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09CglieiAqaWY3X2Vsc2UKCgkvLyAqaWY3X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNjQKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICBhbW91bnQ6IHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUsCgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgZmVlOiAxXzAwMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjY1CgkvLyBhbW91bnQ6IHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCXR4biBTZW5kZXIKCWJ5dGUgMHg3Mzc0NjE2YjY1NjQgLy8gInN0YWtlZCIKCWFwcF9sb2NhbF9nZXQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI2NgoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNjcKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI2OAoJLy8gZmVlOiAxXzAwMAoJaW50IDFfMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWIgKmlmN19lbmQKCippZjdfZWxzZToKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNzEKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnN0YWtlZEFzc2V0SWQudmFsdWUpLAoJLy8gICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUsCgkvLyAgICAgICAgICAgZmVlOiAxXzAwMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNzIKCS8vIHhmZXJBc3NldDogQXNzZXRJRC5mcm9tVWludDY0KHRoaXMuc3Rha2VkQXNzZXRJZC52YWx1ZSkKCWJ5dGUgMHg3Mzc0NjE2YjY1NjQ0MTczNzM2NTc0NDk2NCAvLyAic3Rha2VkQXNzZXRJZCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNzMKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI3NAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6Mjc1CgkvLyBhc3NldEFtb3VudDogdGhpcy5zdGFrZWQodGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJYXBwX2xvY2FsX2dldAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyNzYKCS8vIGZlZTogMV8wMDAKCWludCAxXzAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWY3X2VuZDoKCippZjZfZW5kOgoJLy8gKmlmOF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyODAKCS8vIHRoaXMuYWNjcnVlZFJld2FyZHModGhpcy50eG4uc2VuZGVyKS52YWx1ZSA+IDAKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTYzNjM3Mjc1NjU2NDUyNjU3NzYxNzI2NDczIC8vICJhY2NydWVkUmV3YXJkcyIKCWFwcF9sb2NhbF9nZXQKCWludCAwCgk+CglieiAqaWY4X2VuZAoKCS8vICppZjhfY29uc2VxdWVudAoJLy8gKmlmOV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyODEKCS8vIHRoaXMucmV3YXJkQXNzZXRJZC52YWx1ZSA9PT0gMAoJYnl0ZSAweDcyNjU3NzYxNzI2NDQxNzM3MzY1NzQ0OTY0IC8vICJyZXdhcmRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCgk9PQoJYnogKmlmOV9lbHNlCgoJLy8gKmlmOV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjgyCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgYW1vdW50OiB0aGlzLmFjY3J1ZWRSZXdhcmRzKHRoaXMudHhuLnNlbmRlcikudmFsdWUsCgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgZmVlOiAxXzAwMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjgzCgkvLyBhbW91bnQ6IHRoaXMuYWNjcnVlZFJld2FyZHModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6Mjg0CgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI4NQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6Mjg2CgkvLyBmZWU6IDFfMDAwCglpbnQgMV8wMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJYiAqaWY5X2VuZAoKKmlmOV9lbHNlOgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjI4OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogQXNzZXRJRC5mcm9tVWludDY0KHRoaXMucmV3YXJkQXNzZXRJZC52YWx1ZSksCgkvLyAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgIGFzc2V0QW1vdW50OiB0aGlzLmFjY3J1ZWRSZXdhcmRzKHRoaXMudHhuLnNlbmRlcikudmFsdWUsCgkvLyAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgIGZlZTogMV8wMDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjkwCgkvLyB4ZmVyQXNzZXQ6IEFzc2V0SUQuZnJvbVVpbnQ2NCh0aGlzLnJld2FyZEFzc2V0SWQudmFsdWUpCglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjkxCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyOTIKCS8vIGFzc2V0QW1vdW50OiB0aGlzLmFjY3J1ZWRSZXdhcmRzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTYzNjM3Mjc1NjU2NDUyNjU3NzYxNzI2NDczIC8vICJhY2NydWVkUmV3YXJkcyIKCWFwcF9sb2NhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MjkzCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czoyOTQKCS8vIGZlZTogMV8wMDAKCWludCAxXzAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWY5X2VuZDoKCippZjhfZW5kOgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMwMAoJLy8gdGhpcy50b3RhbFN0YWtpbmdXZWlnaHQudmFsdWUgLT0gdGhpcy51c2VyU3Rha2luZ1dlaWdodCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjk2ZTY3NTc2NTY5Njc2ODc0IC8vICJ0b3RhbFN0YWtpbmdXZWlnaHQiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NzM2NTcyNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInVzZXJTdGFraW5nV2VpZ2h0IgoJYXBwX2xvY2FsX2dldAoJLQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidG90YWxTdGFraW5nV2VpZ2h0IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzAxCgkvLyB0aGlzLnJlbWFpbmluZ1Jld2FyZHMudmFsdWUgLT0gdGhpcy5hY2NydWVkUmV3YXJkcyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlCglieXRlIDB4NzI2NTZkNjE2OTZlNjk2ZTY3NTI2NTc3NjE3MjY0NzMgLy8gInJlbWFpbmluZ1Jld2FyZHMiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJLQoJYnl0ZSAweDcyNjU2ZDYxNjk2ZTY5NmU2NzUyNjU3NzYxNzI2NDczIC8vICJyZW1haW5pbmdSZXdhcmRzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzAyCgkvLyB0aGlzLnRvdGFsU3Rha2VkLnZhbHVlIC09IHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0IC8vICJ0b3RhbFN0YWtlZCIKCWFwcF9nbG9iYWxfZ2V0Cgl0eG4gU2VuZGVyCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglhcHBfbG9jYWxfZ2V0CgktCglieXRlIDB4NzQ2Zjc0NjE2YzUzNzQ2MTZiNjU2NCAvLyAidG90YWxTdGFrZWQiCglzd2FwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMDQKCS8vIHRoaXMuc3Rha2VkKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMDUKCS8vIHRoaXMuYWNjcnVlZFJld2FyZHModGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IDAKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTYzNjM3Mjc1NjU2NDUyNjU3NzYxNzI2NDczIC8vICJhY2NydWVkUmV3YXJkcyIKCWludCAwCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMwNgoJLy8gdGhpcy5yZXdhcmRSYXRlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzI2NTc3NjE3MjY0NTI2MTc0NjUgLy8gInJld2FyZFJhdGUiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMDcKCS8vIHRoaXMudW5sb2NrVGltZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc1NmU2YzZmNjM2YjU0Njk2ZDY1IC8vICJ1bmxvY2tUaW1lIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzA4CgkvLyB0aGlzLnVzZXJTdGFraW5nV2VpZ2h0KHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzU3MzY1NzI1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidXNlclN0YWtpbmdXZWlnaHQiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMDkKCS8vIHRoaXMuc3Rha2VEdXJhdGlvbih0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gMAoJdHhuIFNlbmRlcgoJYnl0ZSAweDczNzQ2MTZiNjU0NDc1NzI2MTc0Njk2ZjZlIC8vICJzdGFrZUR1cmF0aW9uIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzEwCgkvLyB0aGlzLnN0YWtlU3RhcnRUaW1lKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NzM3NDYxNmI2NTUzNzQ2MTcyNzQ1NDY5NmQ2NSAvLyAic3Rha2VTdGFydFRpbWUiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMTEKCS8vIHRoaXMudG90YWxSZXdhcmRzUGFpZCh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlICs9IHRoaXMuYWNjcnVlZFJld2FyZHModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJdHhuIFNlbmRlcgoJYnl0ZSAweDc0NmY3NDYxNmM1MjY1Nzc2MTcyNjQ3MzUwNjE2OTY0IC8vICJ0b3RhbFJld2FyZHNQYWlkIgoJYXBwX2xvY2FsX2dldAoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJKwoJdHhuIFNlbmRlcgoJYnl0ZSAweDc0NmY3NDYxNmM1MjY1Nzc2MTcyNjQ3MzUwNjE2OTY0IC8vICJ0b3RhbFJld2FyZHNQYWlkIgoJdW5jb3ZlciAyCglhcHBfbG9jYWxfcHV0CglyZXRzdWIKCi8vIGFkbWluVW5zdGFrZShhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9hZG1pblVuc3Rha2U6CgkvLyB1c2VyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh1c2VyQWRkcmVzcykgZm9yIGFkbWluVW5zdGFrZSBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZG1pblVuc3Rha2UoYWRkcmVzcyl2b2lkCgljYWxsc3ViIGFkbWluVW5zdGFrZQoJaW50IDEKCXJldHVybgoKLy8gYWRtaW5VbnN0YWtlKHVzZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZAphZG1pblVuc3Rha2U6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzE1CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluQWRkcmVzcy52YWx1ZSwgJ09ubHkgYWRtaW4gY2FuIHVuc3Rha2UgdmlhIHRoaXMgbWV0aG9kJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlNDE2NDY0NzI2NTczNzMgLy8gImFkbWluQWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgYWRtaW4gY2FuIHVuc3Rha2UgdmlhIHRoaXMgbWV0aG9kCglhc3NlcnQKCgkvLyAqaWYxMF9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMTcKCS8vIHRoaXMuc3Rha2VkKHVzZXJBZGRyZXNzKS52YWx1ZSA+IDAKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDczNzQ2MTZiNjU2NCAvLyAic3Rha2VkIgoJYXBwX2xvY2FsX2dldAoJaW50IDAKCT4KCWJ6ICppZjEwX2VuZAoKCS8vICppZjEwX2NvbnNlcXVlbnQKCS8vICppZjExX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMxOAoJLy8gdGhpcy5zdGFrZWRBc3NldElkLnZhbHVlID09PSAwCglieXRlIDB4NzM3NDYxNmI2NTY0NDE3MzczNjU3NDQ5NjQgLy8gInN0YWtlZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09CglieiAqaWYxMV9lbHNlCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMxOQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgIGFtb3VudDogdGhpcy5zdGFrZWQodXNlckFkZHJlc3MpLnZhbHVlLAoJLy8gICAgICAgICAgIHJlY2VpdmVyOiB1c2VyQWRkcmVzcywKCS8vICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgZmVlOiAxXzAwMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzIwCgkvLyBhbW91bnQ6IHRoaXMuc3Rha2VkKHVzZXJBZGRyZXNzKS52YWx1ZQoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglhcHBfbG9jYWxfZ2V0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMjEKCS8vIHJlY2VpdmVyOiB1c2VyQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMyMgoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzIzCgkvLyBmZWU6IDFfMDAwCglpbnQgMV8wMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJYiAqaWYxMV9lbmQKCippZjExX2Vsc2U6CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzI2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgeGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5zdGFrZWRBc3NldElkLnZhbHVlKSwKCS8vICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB1c2VyQWRkcmVzcywKCS8vICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuc3Rha2VkKHVzZXJBZGRyZXNzKS52YWx1ZSwKCS8vICAgICAgICAgICBmZWU6IDFfMDAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMyNwoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5zdGFrZWRBc3NldElkLnZhbHVlKQoJYnl0ZSAweDczNzQ2MTZiNjU2NDQxNzM3MzY1NzQ0OTY0IC8vICJzdGFrZWRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMyOAoJLy8gYXNzZXRSZWNlaXZlcjogdXNlckFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMyOQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzMwCgkvLyBhc3NldEFtb3VudDogdGhpcy5zdGFrZWQodXNlckFkZHJlc3MpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3Mzc0NjE2YjY1NjQgLy8gInN0YWtlZCIKCWFwcF9sb2NhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzMxCgkvLyBmZWU6IDFfMDAwCglpbnQgMV8wMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMTFfZW5kOgoKKmlmMTBfZW5kOgoJLy8gKmlmMTJfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzM1CgkvLyB0aGlzLmFjY3J1ZWRSZXdhcmRzKHVzZXJBZGRyZXNzKS52YWx1ZSA+IDAKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJaW50IDAKCT4KCWJ6ICppZjEyX2VuZAoKCS8vICppZjEyX2NvbnNlcXVlbnQKCS8vICppZjEzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMzNgoJLy8gdGhpcy5yZXdhcmRBc3NldElkLnZhbHVlID09PSAwCglieXRlIDB4NzI2NTc3NjE3MjY0NDE3MzczNjU3NDQ5NjQgLy8gInJld2FyZEFzc2V0SWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCT09CglieiAqaWYxM19lbHNlCgoJLy8gKmlmMTNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjMzNwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgIGFtb3VudDogdGhpcy5hY2NydWVkUmV3YXJkcyh1c2VyQWRkcmVzcykudmFsdWUsCgkvLyAgICAgICAgICAgcmVjZWl2ZXI6IHVzZXJBZGRyZXNzLAoJLy8gICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICBmZWU6IDFfMDAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozMzgKCS8vIGFtb3VudDogdGhpcy5hY2NydWVkUmV3YXJkcyh1c2VyQWRkcmVzcykudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDYxNjM2MzcyNzU2NTY0NTI2NTc3NjE3MjY0NzMgLy8gImFjY3J1ZWRSZXdhcmRzIgoJYXBwX2xvY2FsX2dldAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzM5CgkvLyByZWNlaXZlcjogdXNlckFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNDAKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM0MQoJLy8gZmVlOiAxXzAwMAoJaW50IDFfMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWIgKmlmMTNfZW5kCgoqaWYxM19lbHNlOgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM0NAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgIHhmZXJBc3NldDogQXNzZXRJRC5mcm9tVWludDY0KHRoaXMucmV3YXJkQXNzZXRJZC52YWx1ZSksCgkvLyAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdXNlckFkZHJlc3MsCgkvLyAgICAgICAgICAgYXNzZXRBbW91bnQ6IHRoaXMuYWNjcnVlZFJld2FyZHModXNlckFkZHJlc3MpLnZhbHVlLAoJLy8gICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICBmZWU6IDFfMDAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM0NQoJLy8geGZlckFzc2V0OiBBc3NldElELmZyb21VaW50NjQodGhpcy5yZXdhcmRBc3NldElkLnZhbHVlKQoJYnl0ZSAweDcyNjU3NzYxNzI2NDQxNzM3MzY1NzQ0OTY0IC8vICJyZXdhcmRBc3NldElkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM0NgoJLy8gYXNzZXRSZWNlaXZlcjogdXNlckFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM0NwoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYWNjcnVlZFJld2FyZHModXNlckFkZHJlc3MpLnZhbHVlCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg2MTYzNjM3Mjc1NjU2NDUyNjU3NzYxNzI2NDczIC8vICJhY2NydWVkUmV3YXJkcyIKCWFwcF9sb2NhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzQ4CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNDkKCS8vIGZlZTogMV8wMDAKCWludCAxXzAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoqaWYxM19lbmQ6CgoqaWYxMl9lbmQ6CgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzU1CgkvLyB0aGlzLnRvdGFsU3Rha2luZ1dlaWdodC52YWx1ZSAtPSB0aGlzLnVzZXJTdGFraW5nV2VpZ2h0KHVzZXJBZGRyZXNzKS52YWx1ZQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidG90YWxTdGFraW5nV2VpZ2h0IgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDc1NzM2NTcyNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInVzZXJTdGFraW5nV2VpZ2h0IgoJYXBwX2xvY2FsX2dldAoJLQoJYnl0ZSAweDc0NmY3NDYxNmM1Mzc0NjE2YjY5NmU2NzU3NjU2OTY3Njg3NCAvLyAidG90YWxTdGFraW5nV2VpZ2h0IgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzU2CgkvLyB0aGlzLnJlbWFpbmluZ1Jld2FyZHMudmFsdWUgLT0gdGhpcy5hY2NydWVkUmV3YXJkcyh1c2VyQWRkcmVzcykudmFsdWUKCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg2MTYzNjM3Mjc1NjU2NDUyNjU3NzYxNzI2NDczIC8vICJhY2NydWVkUmV3YXJkcyIKCWFwcF9sb2NhbF9nZXQKCS0KCWJ5dGUgMHg3MjY1NmQ2MTY5NmU2OTZlNjc1MjY1Nzc2MTcyNjQ3MyAvLyAicmVtYWluaW5nUmV3YXJkcyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM1NwoJLy8gdGhpcy50b3RhbFN0YWtlZC52YWx1ZSAtPSB0aGlzLnN0YWtlZCh1c2VyQWRkcmVzcykudmFsdWUKCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0IC8vICJ0b3RhbFN0YWtlZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3Mzc0NjE2YjY1NjQgLy8gInN0YWtlZCIKCWFwcF9sb2NhbF9nZXQKCS0KCWJ5dGUgMHg3NDZmNzQ2MTZjNTM3NDYxNmI2NTY0IC8vICJ0b3RhbFN0YWtlZCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM1OQoJLy8gdGhpcy5zdGFrZWQodXNlckFkZHJlc3MpLnZhbHVlID0gMAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzM3NDYxNmI2NTY0IC8vICJzdGFrZWQiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNjAKCS8vIHRoaXMuYWNjcnVlZFJld2FyZHModXNlckFkZHJlc3MpLnZhbHVlID0gMAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NjE2MzYzNzI3NTY1NjQ1MjY1Nzc2MTcyNjQ3MyAvLyAiYWNjcnVlZFJld2FyZHMiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNjEKCS8vIHRoaXMucmV3YXJkUmF0ZSh1c2VyQWRkcmVzcykudmFsdWUgPSAwCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3MjY1Nzc2MTcyNjQ1MjYxNzQ2NSAvLyAicmV3YXJkUmF0ZSIKCWludCAwCglhcHBfbG9jYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbXBYU3Rha2luZy5hbGdvLnRzOjM2MgoJLy8gdGhpcy51bmxvY2tUaW1lKHVzZXJBZGRyZXNzKS52YWx1ZSA9IDAKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDc1NmU2YzZmNjM2YjU0Njk2ZDY1IC8vICJ1bmxvY2tUaW1lIgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzYzCgkvLyB0aGlzLnVzZXJTdGFraW5nV2VpZ2h0KHVzZXJBZGRyZXNzKS52YWx1ZSA9IDAKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDc1NzM2NTcyNTM3NDYxNmI2OTZlNjc1NzY1Njk2NzY4NzQgLy8gInVzZXJTdGFraW5nV2VpZ2h0IgoJaW50IDAKCWFwcF9sb2NhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29tcFhTdGFraW5nLmFsZ28udHM6MzY0CgkvLyB0aGlzLnN0YWtlRHVyYXRpb24odXNlckFkZHJlc3MpLnZhbHVlID0gMAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzM3NDYxNmI2NTQ0NzU3MjYxNzQ2OTZmNmUgLy8gInN0YWtlRHVyYXRpb24iCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNjUKCS8vIHRoaXMuc3Rha2VTdGFydFRpbWUodXNlckFkZHJlc3MpLnZhbHVlID0gMAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NzM3NDYxNmI2NTUzNzQ2MTcyNzQ1NDY5NmQ2NSAvLyAic3Rha2VTdGFydFRpbWUiCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db21wWFN0YWtpbmcuYWxnby50czozNjYKCS8vIHRoaXMudG90YWxSZXdhcmRzUGFpZCh1c2VyQWRkcmVzcykudmFsdWUgKz0gdGhpcy5hY2NydWVkUmV3YXJkcyh1c2VyQWRkcmVzcykudmFsdWUKCWZyYW1lX2RpZyAtMSAvLyB1c2VyQWRkcmVzczogQWRkcmVzcwoJYnl0ZSAweDc0NmY3NDYxNmM1MjY1Nzc2MTcyNjQ3MzUwNjE2OTY0IC8vICJ0b3RhbFJld2FyZHNQYWlkIgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfZGlnIC0xIC8vIHVzZXJBZGRyZXNzOiBBZGRyZXNzCglieXRlIDB4NjE2MzYzNzI3NTY1NjQ1MjY1Nzc2MTcyNjQ3MyAvLyAiYWNjcnVlZFJld2FyZHMiCglhcHBfbG9jYWxfZ2V0CgkrCglmcmFtZV9kaWcgLTEgLy8gdXNlckFkZHJlc3M6IEFkZHJlc3MKCWJ5dGUgMHg3NDZmNzQ2MTZjNTI2NTc3NjE3MjY0NzM1MDYxNjk2NCAvLyAidG90YWxSZXdhcmRzUGFpZCIKCXVuY292ZXIgMgoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJvcHRJblRvQXNzZXQodWludDY0KXZvaWQiCgltZXRob2QgInVwZGF0ZVBhcmFtcyh1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImFkZFJld2FyZHMoYXhmZXIsdWludDY0KXZvaWQiCgltZXRob2QgImFkZFJld2FyZHNBbGdvKHBheSx1aW50NjQpdm9pZCIKCW1ldGhvZCAicmVtb3ZlUmV3YXJkcyh1aW50NjQpdm9pZCIKCW1ldGhvZCAic3Rha2UoYXhmZXIsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgInNldFJld2FyZFJhdGUoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImFjY3J1ZVJld2FyZHMoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJ1bnN0YWtlKCl2b2lkIgoJbWV0aG9kICJhZG1pblVuc3Rha2UoYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9vcHRJblRvQXNzZXQgKmFiaV9yb3V0ZV91cGRhdGVQYXJhbXMgKmFiaV9yb3V0ZV9hZGRSZXdhcmRzICphYmlfcm91dGVfYWRkUmV3YXJkc0FsZ28gKmFiaV9yb3V0ZV9yZW1vdmVSZXdhcmRzICphYmlfcm91dGVfc3Rha2UgKmFiaV9yb3V0ZV9zZXRSZXdhcmRSYXRlICphYmlfcm91dGVfYWNjcnVlUmV3YXJkcyAqYWJpX3JvdXRlX3Vuc3Rha2UgKmFiaV9yb3V0ZV9hZG1pblVuc3Rha2UKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnIKCipjYWxsX09wdEluOgoJbWV0aG9kICJvcHRJblRvQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX29wdEluVG9BcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE9wdEluCgllcnIKCipjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJkZWxldGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZGVsZXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBEZWxldGVBcHBsaWNhdGlvbgoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "CompXStaking",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAsset",
            "type": "uint64"
          },
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          },
          {
            "name": "startTimestamp",
            "type": "uint64"
          },
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateParams",
        "args": [
          {
            "name": "minLockUp",
            "type": "uint64"
          },
          {
            "name": "contractDuration",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewardsAlgo",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeRewards",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "lockPeriod",
            "type": "uint64"
          },
          {
            "name": "userStakingWeight",
            "type": "uint64"
          },
          {
            "name": "userRewardRate",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setRewardRate",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          },
          {
            "name": "userRewardRate",
            "type": "uint64"
          },
          {
            "name": "userStakingWeight",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "adminUnstake",
        "args": [
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CompXStaking smart contract.
 */
export type CompXStaking = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64,uint64,uint64,uint64,address)void' | 'createApplication', {
      argsObj: {
        stakedAsset: bigint | number
        rewardAsset: bigint | number
        minLockUp: bigint | number
        contractDuration: bigint | number
        startTimestamp: bigint | number
        adminAddress: string
      }
      argsTuple: [stakedAsset: bigint | number, rewardAsset: bigint | number, minLockUp: bigint | number, contractDuration: bigint | number, startTimestamp: bigint | number, adminAddress: string]
      returns: void
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInToAsset(uint64)void' | 'optInToAsset', {
      argsObj: {
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'updateParams(uint64,uint64)void' | 'updateParams', {
      argsObj: {
        minLockUp: bigint | number
        contractDuration: bigint | number
      }
      argsTuple: [minLockUp: bigint | number, contractDuration: bigint | number]
      returns: void
    }>
    & Record<'addRewards(axfer,uint64)void' | 'addRewards', {
      argsObj: {
        rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'addRewardsAlgo(pay,uint64)void' | 'addRewardsAlgo', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'removeRewards(uint64)void' | 'removeRewards', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'stake(axfer,uint64,uint64,uint64,uint64)void' | 'stake', {
      argsObj: {
        stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
        lockPeriod: bigint | number
        userStakingWeight: bigint | number
        userRewardRate: bigint | number
      }
      argsTuple: [stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number, lockPeriod: bigint | number, userStakingWeight: bigint | number, userRewardRate: bigint | number]
      returns: void
    }>
    & Record<'setRewardRate(address,uint64,uint64)void' | 'setRewardRate', {
      argsObj: {
        userAddress: string
        userRewardRate: bigint | number
        userStakingWeight: bigint | number
      }
      argsTuple: [userAddress: string, userRewardRate: bigint | number, userStakingWeight: bigint | number]
      returns: void
    }>
    & Record<'accrueRewards(address)void' | 'accrueRewards', {
      argsObj: {
        userAddress: string
      }
      argsTuple: [userAddress: string]
      returns: void
    }>
    & Record<'unstake()void' | 'unstake', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'adminUnstake(address)void' | 'adminUnstake', {
      argsObj: {
        userAddress: string
      }
      argsTuple: [userAddress: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakedAssetId'?: IntegerState
      'rewardAssetId'?: IntegerState
      'minLockUp'?: IntegerState
      'totalStaked'?: IntegerState
      'totalRewards'?: IntegerState
      'contractDuration'?: IntegerState
      'contractStartTimestamp'?: IntegerState
      'contractEndTimestamp'?: IntegerState
      'totalStakingWeight'?: IntegerState
      'remainingRewards'?: IntegerState
      'adminAddress'?: BinaryState
      'rewardsAvailablePerTick'?: IntegerState
    }
    local: {
      'staked'?: IntegerState
      'unlockTime'?: IntegerState
      'stakeDuration'?: IntegerState
      'stakeStartTime'?: IntegerState
      'userStakingWeight'?: IntegerState
      'rewardRate'?: IntegerState
      'accruedRewards'?: IntegerState
      'lastUpdateTime'?: IntegerState
      'totalRewardsPaid'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CompXStakingSig = keyof CompXStaking['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CompXStakingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CompXStaking smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CompXStakingSig> = CompXStaking['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompXStaking smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompXStakingSig> = CompXStaking['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CompXStakingCreateCalls = (typeof CompXStakingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CompXStakingCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,uint64,uint64,uint64,uint64,address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type CompXStakingDeleteCalls = (typeof CompXStakingCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CompXStakingDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type CompXStakingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CompXStakingCreateCalls) => CompXStakingCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CompXStakingDeleteCalls) => CompXStakingDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CompXStakingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CompXStaking smart contract using the createApplication(uint64,uint64,uint64,uint64,uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,uint64,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,uint64,uint64,uint64,uint64,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.stakedAsset, args.rewardAsset, args.minLockUp, args.contractDuration, args.startTimestamp, args.adminAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CompXStaking smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the CompXStaking smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsset(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateParams(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateParams(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.minLockUp, args.contractDuration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewards(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewards(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewardsAlgo(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewardsAlgo(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeRewards(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeRewards(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(axfer,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(axfer,uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakeTxn, args.quantity, args.lockPeriod, args.userStakingWeight, args.userRewardRate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setRewardRate(address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRewardRate(args: MethodArgs<'setRewardRate(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setRewardRate(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.userRewardRate, args.userStakingWeight],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the accrueRewards(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'accrueRewards(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unstake()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unstake(args: MethodArgs<'unstake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unstake()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the adminUnstake(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static adminUnstake(args: MethodArgs<'adminUnstake(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'adminUnstake(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CompXStaking smart contract
 */
export class CompXStakingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CompXStakingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CompXStaking['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CompXStaking smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CompXStakingDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CompXStakingCallFactory.create)
    const deleteArgs = params.deleteCall?.(CompXStakingCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CompXStaking smart contract using the createApplication(uint64,uint64,uint64,uint64,uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,uint64,uint64,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,uint64,uint64,uint64,uint64,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CompXStakingCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the CompXStaking smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(CompXStakingCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the CompXStaking smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(CompXStakingCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CompXStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the updateParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.updateParams(args, params))
  }

  /**
   * Calls the addRewards(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.addRewards(args, params))
  }

  /**
   * Calls the addRewardsAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.addRewardsAlgo(args, params))
  }

  /**
   * Calls the removeRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.removeRewards(args, params))
  }

  /**
   * Calls the stake(axfer,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(axfer,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.stake(args, params))
  }

  /**
   * Calls the setRewardRate(address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRewardRate(args: MethodArgs<'setRewardRate(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.setRewardRate(args, params))
  }

  /**
   * Calls the accrueRewards(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.accrueRewards(args, params))
  }

  /**
   * Calls the unstake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unstake(args: MethodArgs<'unstake()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.unstake(args, params))
  }

  /**
   * Calls the adminUnstake(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public adminUnstake(args: MethodArgs<'adminUnstake(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompXStakingCallFactory.adminUnstake(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CompXStaking['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakedAssetId() {
        return CompXStakingClient.getIntegerState(state, 'stakedAssetId')
      },
      get rewardAssetId() {
        return CompXStakingClient.getIntegerState(state, 'rewardAssetId')
      },
      get minLockUp() {
        return CompXStakingClient.getIntegerState(state, 'minLockUp')
      },
      get totalStaked() {
        return CompXStakingClient.getIntegerState(state, 'totalStaked')
      },
      get totalRewards() {
        return CompXStakingClient.getIntegerState(state, 'totalRewards')
      },
      get contractDuration() {
        return CompXStakingClient.getIntegerState(state, 'contractDuration')
      },
      get contractStartTimestamp() {
        return CompXStakingClient.getIntegerState(state, 'contractStartTimestamp')
      },
      get contractEndTimestamp() {
        return CompXStakingClient.getIntegerState(state, 'contractEndTimestamp')
      },
      get totalStakingWeight() {
        return CompXStakingClient.getIntegerState(state, 'totalStakingWeight')
      },
      get remainingRewards() {
        return CompXStakingClient.getIntegerState(state, 'remainingRewards')
      },
      get adminAddress() {
        return CompXStakingClient.getBinaryState(state, 'adminAddress')
      },
      get rewardsAvailablePerTick() {
        return CompXStakingClient.getIntegerState(state, 'rewardsAvailablePerTick')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<CompXStaking['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get staked() {
        return CompXStakingClient.getIntegerState(state, 'staked')
      },
      get unlockTime() {
        return CompXStakingClient.getIntegerState(state, 'unlockTime')
      },
      get stakeDuration() {
        return CompXStakingClient.getIntegerState(state, 'stakeDuration')
      },
      get stakeStartTime() {
        return CompXStakingClient.getIntegerState(state, 'stakeStartTime')
      },
      get userStakingWeight() {
        return CompXStakingClient.getIntegerState(state, 'userStakingWeight')
      },
      get rewardRate() {
        return CompXStakingClient.getIntegerState(state, 'rewardRate')
      },
      get accruedRewards() {
        return CompXStakingClient.getIntegerState(state, 'accruedRewards')
      },
      get lastUpdateTime() {
        return CompXStakingClient.getIntegerState(state, 'lastUpdateTime')
      },
      get totalRewardsPaid() {
        return CompXStakingClient.getIntegerState(state, 'totalRewardsPaid')
      },
    }
  }

  public compose(): CompXStakingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateParams(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewardsAlgo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(axfer,uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRewardRate(args: MethodArgs<'setRewardRate(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRewardRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.accrueRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unstake(args: MethodArgs<'unstake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      adminUnstake(args: MethodArgs<'adminUnstake(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.adminUnstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CompXStakingComposer
  }
}
export type CompXStakingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'optInToAsset(uint64)void'>]>

  /**
   * Calls the updateParams(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateParams(args: MethodArgs<'updateParams(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'updateParams(uint64,uint64)void'>]>

  /**
   * Calls the addRewards(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(args: MethodArgs<'addRewards(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'addRewards(axfer,uint64)void'>]>

  /**
   * Calls the addRewardsAlgo(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewardsAlgo(args: MethodArgs<'addRewardsAlgo(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'addRewardsAlgo(pay,uint64)void'>]>

  /**
   * Calls the removeRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeRewards(args: MethodArgs<'removeRewards(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'removeRewards(uint64)void'>]>

  /**
   * Calls the stake(axfer,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(axfer,uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'stake(axfer,uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the setRewardRate(address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRewardRate(args: MethodArgs<'setRewardRate(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'setRewardRate(address,uint64,uint64)void'>]>

  /**
   * Calls the accrueRewards(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueRewards(args: MethodArgs<'accrueRewards(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'accrueRewards(address)void'>]>

  /**
   * Calls the unstake()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(args: MethodArgs<'unstake()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'unstake()void'>]>

  /**
   * Calls the adminUnstake(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminUnstake(args: MethodArgs<'adminUnstake(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, MethodReturn<'adminUnstake(address)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CompXStaking smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): CompXStakingComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompXStaking smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): CompXStakingComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompXStaking smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CompXStakingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CompXStakingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CompXStakingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CompXStakingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CompXStakingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CompXStakingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
