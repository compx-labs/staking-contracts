/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64,uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateOracleAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTreasuryAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateCommision(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToToken(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payCommision()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkToNFD(uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addLST(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeLST(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pickupAlgoRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burnLST(axfer,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "freeze": {
          "type": "bytes",
          "key": "freeze"
        },
        "lstTokenId": {
          "type": "uint64",
          "key": "lstTokenId"
        },
        "commisionPercentage": {
          "type": "uint64",
          "key": "commisionPercentage"
        },
        "oracleAdminAddress": {
          "type": "bytes",
          "key": "oracleAdminAddress"
        },
        "lstBalance": {
          "type": "uint64",
          "key": "lstBalance"
        },
        "circulatingLST": {
          "type": "uint64",
          "key": "circulatingLST"
        },
        "treasuryAddress": {
          "type": "bytes",
          "key": "treasuryAddress"
        },
        "commisionAmount": {
          "type": "uint64",
          "key": "commisionAmount"
        },
        "totalConsensusRewards": {
          "type": "uint64",
          "key": "totalConsensusRewards"
        },
        "nodeAlgo": {
          "type": "uint64",
          "key": "nodeAlgo"
        },
        "lstRatio": {
          "type": "uint64",
          "key": "lstRatio"
        },
        "stakeAmountDue": {
          "type": "uint64",
          "key": "stakeAmountDue"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "InjectedRewardsPoolConsensus",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          },
          {
            "name": "oracleAdminAddress",
            "type": "address"
          },
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          },
          {
            "name": "lstTokenId",
            "type": "uint64"
          },
          {
            "name": "commision",
            "type": "uint64"
          },
          {
            "name": "payTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateOracleAdminAddress",
        "args": [
          {
            "name": "oracleAdminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTreasuryAddress",
        "args": [
          {
            "name": "treasuryAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateCommision",
        "args": [
          {
            "name": "commision",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToToken",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "tokenId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payCommision",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFreeze",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "args": [
          {
            "name": "feePayment",
            "type": "pay"
          },
          {
            "name": "votePK",
            "type": "byte[]"
          },
          {
            "name": "selectionPK",
            "type": "byte[]"
          },
          {
            "name": "stateProofPK",
            "type": "byte[]"
          },
          {
            "name": "voteFirst",
            "type": "uint64"
          },
          {
            "name": "voteLast",
            "type": "uint64"
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "linkToNFD",
        "args": [
          {
            "name": "nfdAppId",
            "type": "uint64"
          },
          {
            "name": "nfdName",
            "type": "string"
          },
          {
            "name": "nfdRegistryAppId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addLST",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeLST",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pickupAlgoRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burnLST",
        "args": [
          {
            "name": "axferTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "userAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the InjectedRewardsPoolConsensus smart contract.
 */
export type InjectedRewardsPoolConsensus = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,address)void' | 'createApplication', {
      argsObj: {
        adminAddress: string
        oracleAdminAddress: string
        treasuryAddress: string
      }
      argsTuple: [adminAddress: string, oracleAdminAddress: string, treasuryAddress: string]
      returns: void
    }>
    & Record<'initApplication(uint64,uint64,uint64,uint64,pay)void' | 'initApplication', {
      argsObj: {
        stakedAsset: bigint | number
        rewardAssetId: bigint | number
        lstTokenId: bigint | number
        commision: bigint | number
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [stakedAsset: bigint | number, rewardAssetId: bigint | number, lstTokenId: bigint | number, commision: bigint | number, payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'updateAdminAddress(address)void' | 'updateAdminAddress', {
      argsObj: {
        adminAddress: string
      }
      argsTuple: [adminAddress: string]
      returns: void
    }>
    & Record<'updateOracleAdminAddress(address)void' | 'updateOracleAdminAddress', {
      argsObj: {
        oracleAdminAddress: string
      }
      argsTuple: [oracleAdminAddress: string]
      returns: void
    }>
    & Record<'updateTreasuryAddress(address)void' | 'updateTreasuryAddress', {
      argsObj: {
        treasuryAddress: string
      }
      argsTuple: [treasuryAddress: string]
      returns: void
    }>
    & Record<'updateCommision(uint64)void' | 'updateCommision', {
      argsObj: {
        commision: bigint | number
      }
      argsTuple: [commision: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'stake(pay,uint64)void' | 'stake', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'optInToToken(pay,uint64)void' | 'optInToToken', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        tokenId: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, tokenId: bigint | number]
      returns: void
    }>
    & Record<'payCommision()void' | 'payCommision', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setFreeze(bool)void' | 'setFreeze', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: {
        feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        votePK: Uint8Array
        selectionPK: Uint8Array
        stateProofPK: Uint8Array
        voteFirst: bigint | number
        voteLast: bigint | number
        voteKeyDilution: bigint | number
      }
      argsTuple: [feePayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, votePK: Uint8Array, selectionPK: Uint8Array, stateProofPK: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
      returns: void
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'linkToNFD(uint64,string,uint64)void' | 'linkToNFD', {
      argsObj: {
        nfdAppId: bigint | number
        nfdName: string
        nfdRegistryAppId: bigint | number
      }
      argsTuple: [nfdAppId: bigint | number, nfdName: string, nfdRegistryAppId: bigint | number]
      returns: void
    }>
    & Record<'addLST(axfer,uint64)void' | 'addLST', {
      argsObj: {
        axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'removeLST(uint64)void' | 'removeLST', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
    & Record<'pickupAlgoRewards()void' | 'pickupAlgoRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burnLST(axfer,uint64,address)void' | 'burnLST', {
      argsObj: {
        axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
        userAddress: string
      }
      argsTuple: [axferTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number, userAddress: string]
      returns: void
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakedAssetId'?: IntegerState
      'totalStaked'?: IntegerState
      'adminAddress'?: BinaryState
      'minimumBalance'?: IntegerState
      'freeze'?: BinaryState
      'lstTokenId'?: IntegerState
      'commisionPercentage'?: IntegerState
      'oracleAdminAddress'?: BinaryState
      'lstBalance'?: IntegerState
      'circulatingLST'?: IntegerState
      'treasuryAddress'?: BinaryState
      'commisionAmount'?: IntegerState
      'totalConsensusRewards'?: IntegerState
      'nodeAlgo'?: IntegerState
      'lstRatio'?: IntegerState
      'stakeAmountDue'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type InjectedRewardsPoolConsensusSig = keyof InjectedRewardsPoolConsensus['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends InjectedRewardsPoolConsensusSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the InjectedRewardsPoolConsensus smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends InjectedRewardsPoolConsensusSig> = InjectedRewardsPoolConsensus['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InjectedRewardsPoolConsensus smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InjectedRewardsPoolConsensusSig> = InjectedRewardsPoolConsensus['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type InjectedRewardsPoolConsensusCreateCalls = (typeof InjectedRewardsPoolConsensusCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type InjectedRewardsPoolConsensusCreateCallParams =
  | (TypedCallParams<'createApplication(address,address,address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type InjectedRewardsPoolConsensusDeleteCalls = (typeof InjectedRewardsPoolConsensusCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type InjectedRewardsPoolConsensusDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type InjectedRewardsPoolConsensusDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: InjectedRewardsPoolConsensusCreateCalls) => InjectedRewardsPoolConsensusCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: InjectedRewardsPoolConsensusDeleteCalls) => InjectedRewardsPoolConsensusDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class InjectedRewardsPoolConsensusCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the InjectedRewardsPoolConsensus smart contract using the createApplication(address,address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.adminAddress, args.oracleAdminAddress, args.treasuryAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(uint64,uint64,uint64,uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initApplication(uint64,uint64,uint64,uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakedAsset, args.rewardAssetId, args.lstTokenId, args.commision, args.payTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateAdminAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateAdminAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.adminAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateOracleAdminAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateOracleAdminAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.oracleAdminAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateTreasuryAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateTreasuryAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.treasuryAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateCommision(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateCommision(args: MethodArgs<'updateCommision(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateCommision(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.commision],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInToToken(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToToken(args: MethodArgs<'optInToToken(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToToken(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the payCommision()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payCommision(args: MethodArgs<'payCommision()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'payCommision()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFreeze(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFreeze(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.feePayment, args.votePK, args.selectionPK, args.stateProofPK, args.voteFirst, args.voteLast, args.voteKeyDilution],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static goOffline(args: MethodArgs<'goOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'goOffline()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the linkToNFD(uint64,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static linkToNfd(args: MethodArgs<'linkToNFD(uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'linkToNFD(uint64,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nfdAppId, args.nfdName, args.nfdRegistryAppId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addLST(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addLst(args: MethodArgs<'addLST(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addLST(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axferTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeLST(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeLst(args: MethodArgs<'removeLST(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeLST(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pickupAlgoRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pickupAlgoRewards(args: MethodArgs<'pickupAlgoRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pickupAlgoRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burnLST(axfer,uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnLst(args: MethodArgs<'burnLST(axfer,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burnLST(axfer,uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axferTxn, args.quantity, args.userAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'gas()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the InjectedRewardsPoolConsensus smart contract
 */
export class InjectedRewardsPoolConsensusClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `InjectedRewardsPoolConsensusClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof InjectedRewardsPoolConsensus['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the InjectedRewardsPoolConsensus smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: InjectedRewardsPoolConsensusDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(InjectedRewardsPoolConsensusCallFactory.create)
    const deleteArgs = params.deleteCall?.(InjectedRewardsPoolConsensusCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the InjectedRewardsPoolConsensus smart contract using the createApplication(address,address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address,address,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(InjectedRewardsPoolConsensusCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(InjectedRewardsPoolConsensusCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initApplication(uint64,uint64,uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.initApplication(args, params))
  }

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.updateAdminAddress(args, params))
  }

  /**
   * Calls the updateOracleAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.updateOracleAdminAddress(args, params))
  }

  /**
   * Calls the updateTreasuryAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.updateTreasuryAddress(args, params))
  }

  /**
   * Calls the updateCommision(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateCommision(args: MethodArgs<'updateCommision(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.updateCommision(args, params))
  }

  /**
   * Calls the stake(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.stake(args, params))
  }

  /**
   * Calls the optInToToken(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToToken(args: MethodArgs<'optInToToken(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.optInToToken(args, params))
  }

  /**
   * Calls the payCommision()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payCommision(args: MethodArgs<'payCommision()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.payCommision(args, params))
  }

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.setFreeze(args, params))
  }

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.goOnline(args, params))
  }

  /**
   * Calls the goOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public goOffline(args: MethodArgs<'goOffline()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.goOffline(args, params))
  }

  /**
   * Calls the linkToNFD(uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public linkToNfd(args: MethodArgs<'linkToNFD(uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.linkToNfd(args, params))
  }

  /**
   * Calls the addLST(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addLst(args: MethodArgs<'addLST(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.addLst(args, params))
  }

  /**
   * Calls the removeLST(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeLst(args: MethodArgs<'removeLST(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.removeLst(args, params))
  }

  /**
   * Calls the pickupAlgoRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pickupAlgoRewards(args: MethodArgs<'pickupAlgoRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.pickupAlgoRewards(args, params))
  }

  /**
   * Calls the burnLST(axfer,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnLst(args: MethodArgs<'burnLST(axfer,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.burnLst(args, params))
  }

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolConsensusCallFactory.gas(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<InjectedRewardsPoolConsensus['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakedAssetId() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'stakedAssetId')
      },
      get totalStaked() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'totalStaked')
      },
      get adminAddress() {
        return InjectedRewardsPoolConsensusClient.getBinaryState(state, 'adminAddress')
      },
      get minimumBalance() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'minimumBalance')
      },
      get freeze() {
        return InjectedRewardsPoolConsensusClient.getBinaryState(state, 'freeze')
      },
      get lstTokenId() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'lstTokenId')
      },
      get commisionPercentage() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'commisionPercentage')
      },
      get oracleAdminAddress() {
        return InjectedRewardsPoolConsensusClient.getBinaryState(state, 'oracleAdminAddress')
      },
      get lstBalance() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'lstBalance')
      },
      get circulatingLST() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'circulatingLST')
      },
      get treasuryAddress() {
        return InjectedRewardsPoolConsensusClient.getBinaryState(state, 'treasuryAddress')
      },
      get commisionAmount() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'commisionAmount')
      },
      get totalConsensusRewards() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'totalConsensusRewards')
      },
      get nodeAlgo() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'nodeAlgo')
      },
      get lstRatio() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'lstRatio')
      },
      get stakeAmountDue() {
        return InjectedRewardsPoolConsensusClient.getIntegerState(state, 'stakeAmountDue')
      },
    }
  }

  public compose(): InjectedRewardsPoolConsensusComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAdminAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateOracleAdminAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTreasuryAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateCommision(args: MethodArgs<'updateCommision(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateCommision(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInToToken(args: MethodArgs<'optInToToken(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      payCommision(args: MethodArgs<'payCommision()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payCommision(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFreeze(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOnline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      goOffline(args: MethodArgs<'goOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.goOffline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      linkToNfd(args: MethodArgs<'linkToNFD(uint64,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.linkToNfd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addLst(args: MethodArgs<'addLST(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeLst(args: MethodArgs<'removeLST(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pickupAlgoRewards(args: MethodArgs<'pickupAlgoRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pickupAlgoRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnLst(args: MethodArgs<'burnLST(axfer,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnLst(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as InjectedRewardsPoolConsensusComposer
  }
}
export type InjectedRewardsPoolConsensusComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(uint64,uint64,uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(args: MethodArgs<'initApplication(uint64,uint64,uint64,uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'initApplication(uint64,uint64,uint64,uint64,pay)void'>]>

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'updateAdminAddress(address)void'>]>

  /**
   * Calls the updateOracleAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'updateOracleAdminAddress(address)void'>]>

  /**
   * Calls the updateTreasuryAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTreasuryAddress(args: MethodArgs<'updateTreasuryAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'updateTreasuryAddress(address)void'>]>

  /**
   * Calls the updateCommision(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCommision(args: MethodArgs<'updateCommision(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'updateCommision(uint64)void'>]>

  /**
   * Calls the stake(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'stake(pay,uint64)void'>]>

  /**
   * Calls the optInToToken(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToToken(args: MethodArgs<'optInToToken(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'optInToToken(pay,uint64)void'>]>

  /**
   * Calls the payCommision()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payCommision(args: MethodArgs<'payCommision()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'payCommision()void'>]>

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'setFreeze(bool)void'>]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(args: MethodArgs<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'>]>

  /**
   * Calls the goOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(args: MethodArgs<'goOffline()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'goOffline()void'>]>

  /**
   * Calls the linkToNFD(uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  linkToNfd(args: MethodArgs<'linkToNFD(uint64,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'linkToNFD(uint64,string,uint64)void'>]>

  /**
   * Calls the addLST(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLst(args: MethodArgs<'addLST(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'addLST(axfer,uint64)void'>]>

  /**
   * Calls the removeLST(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLst(args: MethodArgs<'removeLST(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'removeLST(uint64)void'>]>

  /**
   * Calls the pickupAlgoRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pickupAlgoRewards(args: MethodArgs<'pickupAlgoRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'pickupAlgoRewards()void'>]>

  /**
   * Calls the burnLST(axfer,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLst(args: MethodArgs<'burnLST(axfer,uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'burnLST(axfer,uint64,address)void'>]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'gas()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): InjectedRewardsPoolConsensusComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolConsensusComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): InjectedRewardsPoolConsensusComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<InjectedRewardsPoolConsensusComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<InjectedRewardsPoolConsensusComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type InjectedRewardsPoolConsensusComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type InjectedRewardsPoolConsensusComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
