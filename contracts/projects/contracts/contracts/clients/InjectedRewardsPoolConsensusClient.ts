/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"InjectedRewardsPoolConsensus","desc":"","methods":[{"name":"createApplication","args":[{"name":"adminAddress","type":"address"},{"name":"treasuryAddress","type":"address"},{"name":"migrationAdmin","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"initApplication","args":[{"name":"lstTokenId","type":"uint64"},{"name":"commision","type":"uint64"},{"name":"payTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateAdminAddress","args":[{"name":"adminAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateMigrationAdmin","args":[{"name":"migrationAdmin","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateMaxStake","args":[{"name":"maxStake","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateTreasuryAddress","args":[{"name":"treasuryAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateCommision","args":[{"name":"commision","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateCommisionAmount","args":[{"name":"commisionAmount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateConsenusRewards","args":[{"name":"totalConsensusRewards","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateMinimumBalance","args":[{"name":"minimumBalance","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updatePaidCommision","args":[{"name":"paidCommision","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"optInToToken","args":[{"name":"payTxn","type":"pay"},{"name":"tokenId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"payCommision","args":[{"name":"payTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"goOnline","args":[{"name":"feePayment","type":"pay"},{"name":"votePK","type":"byte[]"},{"name":"selectionPK","type":"byte[]"},{"name":"stateProofPK","type":"byte[]"},{"name":"voteFirst","type":"uint64"},{"name":"voteLast","type":"uint64"},{"name":"voteKeyDilution","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"goOffline","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"linkToNFD","args":[{"name":"nfdAppId","type":"uint64"},{"name":"nfdName","type":"string"},{"name":"nfdRegistryAppId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"addLST","args":[{"name":"axferTxn","type":"axfer"},{"name":"quantity","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeLST","args":[{"name":"quantity","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"pickupAlgoRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"stake","args":[{"name":"payTxn","type":"pay"},{"name":"quantity","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"burnLST","args":[{"name":"axferTxn","type":"axfer"},{"name":"payTxn","type":"pay"},{"name":"quantity","type":"uint64"},{"name":"userAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"acceptMigration","args":[{"name":"algoTransfer","type":"pay"},{"name":"lstTransfer","type":"axfer"},{"name":"lstBalance","type":"uint64"},{"name":"totalStaked","type":"uint64"},{"name":"circulatingLST","type":"uint64"},{"name":"totalConsensusRewards","type":"uint64"},{"name":"commisionAmount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"migrateContract","args":[{"name":"mbrTxn","type":"pay"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)","struct":"MigrationParams"},"actions":{"create":[],"call":["NoOp"]}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"MigrationParams":[{"name":"lstBalance","type":"uint64"},{"name":"totalStaked","type":"uint64"},{"name":"circulatingLst","type":"uint64"},{"name":"totalConsensusRewards","type":"uint64"},{"name":"commisionAmount","type":"uint64"}]},"state":{"schema":{"global":{"bytes":3,"ints":12},"local":{"bytes":0,"ints":0}},"keys":{"global":{"stakedAssetId":{"key":"c3Rha2VkQXNzZXRJZA==","keyType":"AVMBytes","valueType":"uint64"},"lstTokenId":{"key":"bHN0VG9rZW5JZA==","keyType":"AVMBytes","valueType":"uint64"},"totalStaked":{"key":"dG90YWxTdGFrZWQ=","keyType":"AVMBytes","valueType":"uint64"},"adminAddress":{"key":"YWRtaW5BZGRyZXNz","keyType":"AVMBytes","valueType":"address"},"minimumBalance":{"key":"bWluaW11bUJhbGFuY2U=","keyType":"AVMBytes","valueType":"uint64"},"commisionPercentage":{"key":"Y29tbWlzaW9uUGVyY2VudGFnZQ==","keyType":"AVMBytes","valueType":"uint64"},"lstBalance":{"key":"bHN0QmFsYW5jZQ==","keyType":"AVMBytes","valueType":"uint64"},"circulatingLST":{"key":"Y2lyY3VsYXRpbmdMU1Q=","keyType":"AVMBytes","valueType":"uint64"},"treasuryAddress":{"key":"dHJlYXN1cnlBZGRyZXNz","keyType":"AVMBytes","valueType":"address"},"commisionAmount":{"key":"Y29tbWlzaW9uQW1vdW50","keyType":"AVMBytes","valueType":"uint64"},"totalConsensusRewards":{"key":"dG90YWxDb25zZW5zdXNSZXdhcmRz","keyType":"AVMBytes","valueType":"uint64"},"maxStake":{"key":"bWF4U3Rha2U=","keyType":"AVMBytes","valueType":"uint64"},"migrationAdmin":{"key":"bWlncmF0aW9uQWRtaW4=","keyType":"AVMBytes","valueType":"address"},"paidCommision":{"key":"cGFpZENvbW1pc2lvbg==","keyType":"AVMBytes","valueType":"uint64"},"contractVersion":{"key":"Y29udHJhY3RWZXJzaW9u","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[263],"errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","teal":25},{"pc":[272],"errorMessage":"argument 0 (migrationAdmin) for createApplication must be a address","teal":37},{"pc":[281],"errorMessage":"argument 1 (treasuryAddress) for createApplication must be a address","teal":47},{"pc":[290],"errorMessage":"argument 2 (adminAddress) for createApplication must be a address","teal":57},{"pc":[323],"errorMessage":"argument 0 (payTxn) for initApplication must be a pay transaction","teal":99},{"pc":[345],"errorMessage":"Only admin can init application","teal":126},{"pc":[457],"errorMessage":"argument 0 (adminAddress) for updateAdminAddress must be a address","teal":257},{"pc":[471],"errorMessage":"Only admin can update admin address","teal":276},{"pc":[485],"errorMessage":"argument 0 (migrationAdmin) for updateMigrationAdmin must be a address","teal":295},{"pc":[499],"errorMessage":"Only admin can update migration admin address","teal":314},{"pc":[523],"errorMessage":"Only admin can update max stake","teal":346},{"pc":[538],"errorMessage":"argument 0 (treasuryAddress) for updateTreasuryAddress must be a address","teal":365},{"pc":[552],"errorMessage":"Only admin can update treasury address","teal":384},{"pc":[576],"errorMessage":"Only admin can update commision","teal":416},{"pc":[600],"errorMessage":"Only admin can update commision amount","teal":448},{"pc":[624],"errorMessage":"Only admin can update rewards","teal":480},{"pc":[647],"errorMessage":"Only admin can update minimum balance","teal":512},{"pc":[671],"errorMessage":"Only admin can update paid commision","teal":544},{"pc":[691],"errorMessage":"argument 1 (payTxn) for optInToToken must be a pay transaction","teal":569},{"pc":[705],"errorMessage":"Only admin can opt in to token","teal":588},{"pc":[713],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":602},{"pc":[723],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"110000\"}","teal":611},{"pc":[753],"errorMessage":"argument 0 (payTxn) for payCommision must be a pay transaction","teal":658},{"pc":[767],"errorMessage":"Only admin can pay commision","teal":677},{"pc":[775],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":691},{"pc":[783],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"1000\"}","teal":700},{"pc":[873],"errorMessage":"argument 6 (feePayment) for goOnline must be a pay transaction","teal":812},{"pc":[889],"errorMessage":"Only admin can go online","teal":834},{"pc":[902],"errorMessage":"transaction verification failed: {\"txn\":\"feePayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":853},{"pc":[910],"errorMessage":"transaction verification failed: {\"txn\":\"feePayment\",\"field\":\"amount\",\"expected\":\"extraFee\"}","teal":862},{"pc":[959],"errorMessage":"Only admin can go offline","teal":936},{"pc":[997],"errorMessage":"Only admin can link to NFD","teal":983},{"pc":[1061],"errorMessage":"argument 1 (axferTxn) for addLST must be a axfer transaction","teal":1041},{"pc":[1077],"errorMessage":"Only admin can send LST","teal":1063},{"pc":[1090],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"assetAmount\",\"expected\":\"quantity\"}","teal":1085},{"pc":[1098],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":1094},{"pc":[1106],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","teal":1103},{"pc":[1114],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(lstTokenId)\"}","teal":1112},{"pc":[1142],"errorMessage":"Only admin can remove LST","teal":1150},{"pc":[1148],"errorMessage":"Invalid quantity","teal":1160},{"pc":[1213],"errorMessage":"Only admin can pickup rewards","teal":1256},{"pc":[1317],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":1370},{"pc":[1328],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"minPayment + stake\"}","teal":1381},{"pc":[1439],"errorMessage":"Only admin can delete application","teal":1513},{"pc":[1483],"errorMessage":"argument 1 (payTxn) for stake must be a pay transaction","teal":1580},{"pc":[1500],"errorMessage":"Invalid quantity","teal":1602},{"pc":[1510],"errorMessage":"Max stake reached","teal":1615},{"pc":[1546],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"sender\",\"expected\":\"this.txn.sender\"}","teal":1655},{"pc":[1557],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"quantity + 1000\"}","teal":1666},{"pc":[1565],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":1675},{"pc":[1607],"errorMessage":"wideRatio failed","teal":1727},{"pc":[1623],"errorMessage":"wideRatio failed","teal":1744},{"pc":[1653],"errorMessage":"argument 0 (userAddress) for burnLST must be a address","teal":1776},{"pc":[1667],"errorMessage":"argument 2 (payTxn) for burnLST must be a pay transaction","teal":1792},{"pc":[1678],"errorMessage":"argument 3 (axferTxn) for burnLST must be a axfer transaction","teal":1804},{"pc":[1698],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"assetAmount\",\"expected\":\"quantity\"}","teal":1833},{"pc":[1706],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":1842},{"pc":[1714],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"sender\",\"expected\":\"userAddress\"}","teal":1851},{"pc":[1723],"errorMessage":"transaction verification failed: {\"txn\":\"axferTxn\",\"field\":\"xferAsset\",\"expected\":\"AssetID.fromUint64(this.lstTokenId.value)\"}","teal":1861},{"pc":[1731],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":1875},{"pc":[1738],"errorMessage":"transaction verification failed: {\"txn\":\"payTxn\",\"field\":\"amount\",\"expected\":\"1_000\"}","teal":1884},{"pc":[1745],"errorMessage":"Invalid quantity","teal":1894},{"pc":[1767],"errorMessage":"wideRatio failed","teal":1920},{"pc":[1783],"errorMessage":"wideRatio failed","teal":1937},{"pc":[1962],"errorMessage":"argument 5 (lstTransfer) for acceptMigration must be a axfer transaction","teal":2172},{"pc":[1973],"errorMessage":"argument 6 (algoTransfer) for acceptMigration must be a pay transaction","teal":2184},{"pc":[1989],"errorMessage":"transaction verification failed: {\"txn\":\"algoTransfer\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","teal":2207},{"pc":[1998],"errorMessage":"transaction verification failed: {\"txn\":\"algoTransfer\",\"field\":\"sender\",\"expected\":\"this.migrationAdmin.value\"}","teal":2217},{"pc":[2006],"errorMessage":"transaction verification failed: {\"txn\":\"lstTransfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","teal":2231},{"pc":[2015],"errorMessage":"transaction verification failed: {\"txn\":\"lstTransfer\",\"field\":\"sender\",\"expected\":\"this.migrationAdmin.value\"}","teal":2241},{"pc":[2054],"errorMessage":"argument 0 (mbrTxn) for migrateContract must be a pay transaction","teal":2289},{"pc":[2071],"errorMessage":"Only admin can migrate contract","teal":2310},{"pc":[2083],"errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"sender\",\"expected\":\"this.migrationAdmin.value\"}","teal":2329},{"pc":[2093],"errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"expected\":\"1_000_000\"}","teal":2338},{"pc":[2192],"errorMessage":"this contract does not implement the given ABI method for create NoOp","teal":2472},{"pc":[2382],"errorMessage":"this contract does not implement the given ABI method for call NoOp","teal":2502},{"pc":[2396],"errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","teal":2510}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEx"},"byteCode":{"approval":"CyALAQAE6AcgBqwCkE4CBegHJhAMYWRtaW5BZGRyZXNzCmxzdEJhbGFuY2UVdG90YWxDb25zZW5zdXNSZXdhcmRzC3RvdGFsU3Rha2VkD2NvbW1pc2lvbkFtb3VudA5jaXJjdWxhdGluZ0xTVAAKbHN0VG9rZW5JZA5taWdyYXRpb25BZG1pbgMKgQENcGFpZENvbW1pc2lvbhNjb21taXNpb25QZXJjZW50YWdlD3RyZWFzdXJ5QWRkcmVzcw5taW5pbXVtQmFsYW5jZQ1zdGFrZWRBc3NldElkCG1heFN0YWtlMRgUIQULMRkIjQwHigAAAAAAAAAACEgHfAAAAAAAAAAAAAAANhoDSRUhBBJENhoCSRUhBBJENhoBSRUhBBJEiAACIkOKAwAoi/9nJwyL/mcnCIv9Z4kxFiIJSTgQIhJENhoCFzYaAReIAAIiQ4oDADEAKGQSRCsjZycHi/9nKSNnJwUjZycNi/04CGcnC4v+ZyojZycEI2cnD4HAu8yoovUPZycOI2cnCiNngA9jb250cmFjdFZlcnNpb26BzQhnJwdkIxNBABSxJLIQJwdkshEyCrIUI7ISI7IBs4k2GgFJFSEEEkSIAAIiQ4oBADEAKGQSRCiL/2eJNhoBSRUhBBJEiAACIkOKAQAxAChkEkQnCIv/Z4k2GgEXiAACIkOKAQAxAChkEkQnD4v/Z4k2GgFJFSEEEkSIAAIiQ4oBADEAKGQSRCcMi/9niTYaAReIAAIiQ4oBADEAKGQSRCcLi/9niTYaAReIAAIiQ4oBADEAKGQSRCcEi/9niTYaAReIAAIiQ4oBADEAKGQSRCqL/2eJNhoBF4gAAiJDigEAMQAoZBJEJw2L/2eJNhoBF4gAAiJDigEAMQAoZBJEJwqL/2eJNhoBFzEWIglJOBAiEkSIAAIiQ4oCADEAKGQSRIv/OAcyChJEi/84CIGw2wYSRLEkshCL/rIRMgqyFCOyEiOyAbOJMRYiCUk4ECISRIgAAiJDigEAMQAoZBJEi/84BzIKEkSL/zgIIQoSRCcEZCMNQQAjsSKyECcEZLIIJwxksgcyCrIAJbIBsycKSWQnBGQIZycEI2eJigABMhOJNhoGFzYaBRc2GgQXNhoDVwIANhoCVwIANhoBVwIAMRYiCUk4ECISRIgAAiJDigcAJwYxAChkEkSI/7+MAIv/OAcyChJEi/84CIsAEkSxIQiyEIv+sgqL/bILi/yyP4v7sgyL+rINi/myDosAsgGziYgAAiJDigAAMQAoZBJEsSEIshAjsgGziTYaAxc2GgJXAgA2GgEXiAACIkOKAwAxAChkEkSxIQWyEIv9shiAD3ZlcmlmeV9uZmRfYWRkcrIai/6yGov/FrIaMgqyGov/sjIjsgGziTYaARcxFiIJSTgQJBJEiAACIkOKAgAnBjEAKGQSRCcHZIwAi/84Eov+EkSL/zgUMgoSRIv/OAAxABJEi/84EYsAEkQpSWSL/ghniTYaAReIAAIiQ4oBACcGMQAoZBJEKWSL/w9Ei/+MAIsAIxJBAAQpZIwAsSSyEIsAshIoZLIUMgqyACcHZLIRI7IBsylJZIsACWeJiAACIkOKAAAnBkkxAChkEkQyCnMASCcNZAkqZAkrZAknBGQJjACLAIHAhD0NQQAhiwCBZAonC2QLjAEnBElkiwEIZ4sAiwEJjAAqSWSLAAhniYoEADIMIQYMQQAUsSEFshAjsgEnCUmyHrIfIQmyGbOL/TgHMgoSRIv9OAghCov/CBJEsSSyECcHZLIRi/yyFDIKsgCL/rISJbIBszIMIQYMQQAUsSEFshAjsgEnCUmyHrIfIQmyGbMpSWSL/glnJwVJZIv+CGcyDCEGDEEAFLEhBbIQI7IBJwlJsh6yHyEJshmziYgAAiJDigAAMQAoZBJEsSSyEChkshUoZLIUMgqyACcHZLIRKWSyEiOyAbOJNhoBFzEWIglJOBAiEkSIAAIiQ4oCACcGRwKL/iMNRCtki/4IJw9kDkQyDCEGDEEAFLEhBbIQI7IBJwlJsh6yHyEJshmzi/84ADEAEkSL/zgIi/4hCggSRIv/OAcyChJEI4wAI4wBK2QqZAiMAosCIxJBAAeL/owBQgAhJwVkIQcdI4sCH0hITBREjACLAIv+HSMhBx9ISEwURIwBMQCL/4sBi/6I/porSWSL/ghniTYaAkkVIQQSRDYaARcxFiIJSTgQIhJEMRYhCAlJOBAkEkSIAAIiQ4oEACcGRwKL/zgSi/0SRIv/OBQyChJEi/84AIv8EkSL/zgRJwdkEkSL/jgHMgoSRIv+OAglEkQnBWSL/Q9EK2QqZAiMAIsAIQcdIycFZB9ISEwURIwBiwGL/R0jIQcfSEhMFESMAosCMgpzAEgMQQA4Jw5kIxJBABexIrIQiwKyCIv8sgcyCrIAJbIBs0IAGbEkshAnDmSyEYv8shQyCrIAiwKyEiWyAbMpSWSL/QhnJwVki/0MQQAHJwUjZ0IACCcFSWSL/QlnK2SLAgxBAAYrI2dCAAcrSWSLAglnKmSLAov9CQxBAAYqI2dCAAoqSWSLAov9CQlniTYaBRc2GgQXNhoDFzYaAhc2GgEXMRYiCUk4ECQSRDEWIQgJSTgQIhJEiAACIkOKBwCL/zgHMgoSRIv/OAAnCGQSRIv+OBQyChJEi/44ACcIZBJEKYv9ZyuL/GcnBYv7ZyqL+mcnBIv5Z4mABBUffHUxFiIJSTgQIhJEiAAEULAiQ4oBATEAJwhkEkSI+5yL/zgAJwhkEkSL/zgIgcCEPRJEsSKyECtkKmQIJwRkCLIIJwhksgcyCrIAJbIBs7EkshAnB2SyEScIZLIUMgqyAClkshIlsgGzKWQWK2QWUCcFZBZQKmQWUCcEZBZQiYgAAiJDigAAiYAENeRMHzYaAI4B+HgAgAQTw/UDgASj/qQPgASyEH8lgATj5sxKgAQbkkFZgATCb2lTgAThzeM0gASBI1dcgARzaqkkgARw2FU0gATjlGldgATPyylzgARADhT7gARR7zshgAQtwHNdgAQgsVlwgAT465regARxdXUJgARThTCFgAQbOusggAQpOMNjgARCjlRhgAQxcsqdNhoAjhf37Phz+I/4rPjE+OH4+fkR+Sj5QPlY+Zr59Ppk+nz6yvsV+1/8cP0f/j/+qf8sAIAEJIfDLDYaAI4B/DYA","clear":"Cw=="}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type MigrationParams = {
  lstBalance: bigint,
  totalStaked: bigint,
  circulatingLst: bigint,
  totalConsensusRewards: bigint,
  commisionAmount: bigint
}


/**
 * Converts the ABI tuple representation of a MigrationParams to the struct representation
 */
export function MigrationParamsFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MigrationParams, APP_SPEC.structs) as MigrationParams
}

/**
 * The argument types for the InjectedRewardsPoolConsensus contract
 */
export type InjectedRewardsPoolConsensusArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address,address)void': {
      adminAddress: string
      treasuryAddress: string
      migrationAdmin: string
    }
    'initApplication(uint64,uint64,pay)void': {
      lstTokenId: bigint | number
      commision: bigint | number
      payTxn: AppMethodCallTransactionArgument
    }
    'updateAdminAddress(address)void': {
      adminAddress: string
    }
    'updateMigrationAdmin(address)void': {
      migrationAdmin: string
    }
    'updateMaxStake(uint64)void': {
      maxStake: bigint | number
    }
    'updateTreasuryAddress(address)void': {
      treasuryAddress: string
    }
    'updateCommision(uint64)void': {
      commision: bigint | number
    }
    'updateCommisionAmount(uint64)void': {
      commisionAmount: bigint | number
    }
    'updateConsenusRewards(uint64)void': {
      totalConsensusRewards: bigint | number
    }
    'updateMinimumBalance(uint64)void': {
      minimumBalance: bigint | number
    }
    'updatePaidCommision(uint64)void': {
      paidCommision: bigint | number
    }
    'optInToToken(pay,uint64)void': {
      payTxn: AppMethodCallTransactionArgument
      tokenId: bigint | number
    }
    'payCommision(pay)void': {
      payTxn: AppMethodCallTransactionArgument
    }
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      feePayment: AppMethodCallTransactionArgument
      votePk: Uint8Array
      selectionPk: Uint8Array
      stateProofPk: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
    }
    'goOffline()void': Record<string, never>
    'linkToNFD(uint64,string,uint64)void': {
      nfdAppId: bigint | number
      nfdName: string
      nfdRegistryAppId: bigint | number
    }
    'addLST(axfer,uint64)void': {
      axferTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
    }
    'removeLST(uint64)void': {
      quantity: bigint | number
    }
    'pickupAlgoRewards()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
    'stake(pay,uint64)void': {
      payTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
    }
    'burnLST(axfer,pay,uint64,address)void': {
      axferTxn: AppMethodCallTransactionArgument
      payTxn: AppMethodCallTransactionArgument
      quantity: bigint | number
      userAddress: string
    }
    'acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void': {
      algoTransfer: AppMethodCallTransactionArgument
      lstTransfer: AppMethodCallTransactionArgument
      lstBalance: bigint | number
      totalStaked: bigint | number
      circulatingLst: bigint | number
      totalConsensusRewards: bigint | number
      commisionAmount: bigint | number
    }
    'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)': {
      mbrTxn: AppMethodCallTransactionArgument
    }
    'gas()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address,address)void': [adminAddress: string, treasuryAddress: string, migrationAdmin: string]
    'initApplication(uint64,uint64,pay)void': [lstTokenId: bigint | number, commision: bigint | number, payTxn: AppMethodCallTransactionArgument]
    'updateAdminAddress(address)void': [adminAddress: string]
    'updateMigrationAdmin(address)void': [migrationAdmin: string]
    'updateMaxStake(uint64)void': [maxStake: bigint | number]
    'updateTreasuryAddress(address)void': [treasuryAddress: string]
    'updateCommision(uint64)void': [commision: bigint | number]
    'updateCommisionAmount(uint64)void': [commisionAmount: bigint | number]
    'updateConsenusRewards(uint64)void': [totalConsensusRewards: bigint | number]
    'updateMinimumBalance(uint64)void': [minimumBalance: bigint | number]
    'updatePaidCommision(uint64)void': [paidCommision: bigint | number]
    'optInToToken(pay,uint64)void': [payTxn: AppMethodCallTransactionArgument, tokenId: bigint | number]
    'payCommision(pay)void': [payTxn: AppMethodCallTransactionArgument]
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': [feePayment: AppMethodCallTransactionArgument, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'goOffline()void': []
    'linkToNFD(uint64,string,uint64)void': [nfdAppId: bigint | number, nfdName: string, nfdRegistryAppId: bigint | number]
    'addLST(axfer,uint64)void': [axferTxn: AppMethodCallTransactionArgument, quantity: bigint | number]
    'removeLST(uint64)void': [quantity: bigint | number]
    'pickupAlgoRewards()void': []
    'deleteApplication()void': []
    'stake(pay,uint64)void': [payTxn: AppMethodCallTransactionArgument, quantity: bigint | number]
    'burnLST(axfer,pay,uint64,address)void': [axferTxn: AppMethodCallTransactionArgument, payTxn: AppMethodCallTransactionArgument, quantity: bigint | number, userAddress: string]
    'acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void': [algoTransfer: AppMethodCallTransactionArgument, lstTransfer: AppMethodCallTransactionArgument, lstBalance: bigint | number, totalStaked: bigint | number, circulatingLst: bigint | number, totalConsensusRewards: bigint | number, commisionAmount: bigint | number]
    'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)': [mbrTxn: AppMethodCallTransactionArgument]
    'gas()void': []
  }
}

/**
 * The return type for each method
 */
export type InjectedRewardsPoolConsensusReturns = {
  'createApplication(address,address,address)void': void
  'initApplication(uint64,uint64,pay)void': void
  'updateAdminAddress(address)void': void
  'updateMigrationAdmin(address)void': void
  'updateMaxStake(uint64)void': void
  'updateTreasuryAddress(address)void': void
  'updateCommision(uint64)void': void
  'updateCommisionAmount(uint64)void': void
  'updateConsenusRewards(uint64)void': void
  'updateMinimumBalance(uint64)void': void
  'updatePaidCommision(uint64)void': void
  'optInToToken(pay,uint64)void': void
  'payCommision(pay)void': void
  'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'goOffline()void': void
  'linkToNFD(uint64,string,uint64)void': void
  'addLST(axfer,uint64)void': void
  'removeLST(uint64)void': void
  'pickupAlgoRewards()void': void
  'deleteApplication()void': void
  'stake(pay,uint64)void': void
  'burnLST(axfer,pay,uint64,address)void': void
  'acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void': void
  'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)': MigrationParams
  'gas()void': void
}

/**
 * Defines the types of available calls and state of the InjectedRewardsPoolConsensus smart contract.
 */
export type InjectedRewardsPoolConsensusTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,address)void' | 'createApplication', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']
      returns: InjectedRewardsPoolConsensusReturns['createApplication(address,address,address)void']
    }>
    & Record<'initApplication(uint64,uint64,pay)void' | 'initApplication', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']
      returns: InjectedRewardsPoolConsensusReturns['initApplication(uint64,uint64,pay)void']
    }>
    & Record<'updateAdminAddress(address)void' | 'updateAdminAddress', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']
      returns: InjectedRewardsPoolConsensusReturns['updateAdminAddress(address)void']
    }>
    & Record<'updateMigrationAdmin(address)void' | 'updateMigrationAdmin', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']
      returns: InjectedRewardsPoolConsensusReturns['updateMigrationAdmin(address)void']
    }>
    & Record<'updateMaxStake(uint64)void' | 'updateMaxStake', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updateMaxStake(uint64)void']
    }>
    & Record<'updateTreasuryAddress(address)void' | 'updateTreasuryAddress', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']
      returns: InjectedRewardsPoolConsensusReturns['updateTreasuryAddress(address)void']
    }>
    & Record<'updateCommision(uint64)void' | 'updateCommision', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updateCommision(uint64)void']
    }>
    & Record<'updateCommisionAmount(uint64)void' | 'updateCommisionAmount', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updateCommisionAmount(uint64)void']
    }>
    & Record<'updateConsenusRewards(uint64)void' | 'updateConsenusRewards', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updateConsenusRewards(uint64)void']
    }>
    & Record<'updateMinimumBalance(uint64)void' | 'updateMinimumBalance', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updateMinimumBalance(uint64)void']
    }>
    & Record<'updatePaidCommision(uint64)void' | 'updatePaidCommision', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['updatePaidCommision(uint64)void']
    }>
    & Record<'optInToToken(pay,uint64)void' | 'optInToToken', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['optInToToken(pay,uint64)void']
    }>
    & Record<'payCommision(pay)void' | 'payCommision', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']
      returns: InjectedRewardsPoolConsensusReturns['payCommision(pay)void']
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['goOffline()void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']
      returns: InjectedRewardsPoolConsensusReturns['goOffline()void']
    }>
    & Record<'linkToNFD(uint64,string,uint64)void' | 'linkToNFD', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['linkToNFD(uint64,string,uint64)void']
    }>
    & Record<'addLST(axfer,uint64)void' | 'addLST', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['addLST(axfer,uint64)void']
    }>
    & Record<'removeLST(uint64)void' | 'removeLST', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['removeLST(uint64)void']
    }>
    & Record<'pickupAlgoRewards()void' | 'pickupAlgoRewards', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']
      returns: InjectedRewardsPoolConsensusReturns['pickupAlgoRewards()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']
      returns: InjectedRewardsPoolConsensusReturns['deleteApplication()void']
    }>
    & Record<'stake(pay,uint64)void' | 'stake', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['stake(pay,uint64)void']
    }>
    & Record<'burnLST(axfer,pay,uint64,address)void' | 'burnLST', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']
      returns: InjectedRewardsPoolConsensusReturns['burnLST(axfer,pay,uint64,address)void']
    }>
    & Record<'acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void' | 'acceptMigration', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']
      returns: InjectedRewardsPoolConsensusReturns['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)' | 'migrateContract', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']
      returns: InjectedRewardsPoolConsensusReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: InjectedRewardsPoolConsensusArgs['obj']['gas()void']
      argsTuple: InjectedRewardsPoolConsensusArgs['tuple']['gas()void']
      returns: InjectedRewardsPoolConsensusReturns['gas()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        stakedAssetId: bigint
        lstTokenId: bigint
        totalStaked: bigint
        adminAddress: string
        minimumBalance: bigint
        commisionPercentage: bigint
        lstBalance: bigint
        circulatingLst: bigint
        treasuryAddress: string
        commisionAmount: bigint
        totalConsensusRewards: bigint
        maxStake: bigint
        migrationAdmin: string
        paidCommision: bigint
        contractVersion: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type InjectedRewardsPoolConsensusSignatures = keyof InjectedRewardsPoolConsensusTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type InjectedRewardsPoolConsensusNonVoidMethodSignatures = keyof InjectedRewardsPoolConsensusTypes['methods'] extends infer T ? T extends keyof InjectedRewardsPoolConsensusTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the InjectedRewardsPoolConsensus smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends InjectedRewardsPoolConsensusSignatures> = InjectedRewardsPoolConsensusTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InjectedRewardsPoolConsensus smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InjectedRewardsPoolConsensusSignatures> = InjectedRewardsPoolConsensusTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = InjectedRewardsPoolConsensusTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type InjectedRewardsPoolConsensusCreateCallParams =
  | Expand<CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & {method: 'createApplication(address,address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type InjectedRewardsPoolConsensusDeleteCallParams =
  | Expand<CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type InjectedRewardsPoolConsensusDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: InjectedRewardsPoolConsensusCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: InjectedRewardsPoolConsensusDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the InjectedRewardsPoolConsensus smart contract
 */
export abstract class InjectedRewardsPoolConsensusParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends InjectedRewardsPoolConsensusCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address,address)void':
            return InjectedRewardsPoolConsensusParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the InjectedRewardsPoolConsensus smart contract using the createApplication(address,address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.adminAddress, params.args.treasuryAddress, params.args.migrationAdmin],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends InjectedRewardsPoolConsensusDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return InjectedRewardsPoolConsensusParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(uint64,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lstTokenId, params.args.commision, params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the updateAdminAddress(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdminAddress(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdminAddress(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.adminAddress],
    }
  }
  /**
   * Constructs a no op call for the updateMigrationAdmin(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMigrationAdmin(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateMigrationAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.migrationAdmin],
    }
  }
  /**
   * Constructs a no op call for the updateMaxStake(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMaxStake(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateMaxStake(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxStake],
    }
  }
  /**
   * Constructs a no op call for the updateTreasuryAddress(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTreasuryAddress(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateTreasuryAddress(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.treasuryAddress],
    }
  }
  /**
   * Constructs a no op call for the updateCommision(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateCommision(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.commision],
    }
  }
  /**
   * Constructs a no op call for the updateCommisionAmount(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateCommisionAmount(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateCommisionAmount(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.commisionAmount],
    }
  }
  /**
   * Constructs a no op call for the updateConsenusRewards(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateConsenusRewards(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateConsenusRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.totalConsensusRewards],
    }
  }
  /**
   * Constructs a no op call for the updateMinimumBalance(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateMinimumBalance(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateMinimumBalance(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.minimumBalance],
    }
  }
  /**
   * Constructs a no op call for the updatePaidCommision(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePaidCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePaidCommision(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.paidCommision],
    }
  }
  /**
   * Constructs a no op call for the optInToToken(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToToken(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToToken(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn, params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the payCommision(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payCommision(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOnline(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feePayment, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOffline(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOffline()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the linkToNFD(uint64,string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static linkToNfd(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'linkToNFD(uint64,string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdAppId, params.args.nfdName, params.args.nfdRegistryAppId],
    }
  }
  /**
   * Constructs a no op call for the addLST(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLST(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axferTxn, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the removeLST(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLST(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the pickupAlgoRewards()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pickupAlgoRewards(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pickupAlgoRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the stake(pay,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the burnLST(axfer,pay,uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static burnLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'burnLST(axfer,pay,uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axferTxn, params.args.payTxn, params.args.quantity, params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static acceptMigration(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.algoTransfer, params.args.lstTransfer, params.args.lstBalance, params.args.totalStaked, params.args.circulatingLst, params.args.totalConsensusRewards, params.args.commisionAmount],
    }
  }
  /**
   * Constructs a no op call for the migrateContract(pay)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static migrateContract(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the InjectedRewardsPoolConsensus smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class InjectedRewardsPoolConsensusFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `InjectedRewardsPoolConsensusFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new InjectedRewardsPoolConsensusClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new InjectedRewardsPoolConsensusClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the InjectedRewardsPoolConsensus smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: InjectedRewardsPoolConsensusDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? InjectedRewardsPoolConsensusParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (InjectedRewardsPoolConsensusCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? InjectedRewardsPoolConsensusParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (InjectedRewardsPoolConsensusDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new InjectedRewardsPoolConsensusClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InjectedRewardsPoolConsensus smart contract using the createApplication(address,address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(InjectedRewardsPoolConsensusParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(InjectedRewardsPoolConsensusParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InjectedRewardsPoolConsensus smart contract using the createApplication(address,address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(InjectedRewardsPoolConsensusParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the InjectedRewardsPoolConsensus smart contract using an ABI method call using the createApplication(address,address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['createApplication(address,address,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['createApplication(address,address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(InjectedRewardsPoolConsensusParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['createApplication(address,address,address)void']) }, appClient: new InjectedRewardsPoolConsensusClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the InjectedRewardsPoolConsensus smart contract
 */
export class InjectedRewardsPoolConsensusClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `InjectedRewardsPoolConsensusClient`
   *
   * @param appClient An `AppClient` instance which has been created with the InjectedRewardsPoolConsensus app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `InjectedRewardsPoolConsensusClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends InjectedRewardsPoolConsensusNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `InjectedRewardsPoolConsensusClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<InjectedRewardsPoolConsensusClient> {
    return new InjectedRewardsPoolConsensusClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `InjectedRewardsPoolConsensusClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<InjectedRewardsPoolConsensusClient> {
    return new InjectedRewardsPoolConsensusClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(InjectedRewardsPoolConsensusParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `initApplication(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateAdminAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdminAddress: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateAdminAddress(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMigrationAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMigrationAdmin: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateMigrationAdmin(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMaxStake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMaxStake: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateMaxStake(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateTreasuryAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTreasuryAddress: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateTreasuryAddress(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommisionAmount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateCommisionAmount: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateCommisionAmount(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateConsenusRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateConsenusRewards: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateConsenusRewards(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateMinimumBalance: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updateMinimumBalance(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updatePaidCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePaidCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.updatePaidCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToToken: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.optInToToken(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `payCommision(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.payCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOnline: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOffline()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOffline: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `linkToNFD(uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    linkToNfd: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.linkToNfd(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `addLST(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.addLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `removeLST(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.removeLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pickupAlgoRewards: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.pickupAlgoRewards(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `stake(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.stake(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `burnLST(axfer,pay,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    burnLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.burnLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    acceptMigration: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.acceptMigration(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    migrateContract: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.migrateContract(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(InjectedRewardsPoolConsensusParamsFactory.gas(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(InjectedRewardsPoolConsensusParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `initApplication(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateAdminAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdminAddress: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateAdminAddress(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMigrationAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMigrationAdmin: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateMigrationAdmin(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMaxStake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMaxStake: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateMaxStake(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateTreasuryAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTreasuryAddress: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateTreasuryAddress(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommisionAmount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateCommisionAmount: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateCommisionAmount(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateConsenusRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateConsenusRewards: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateConsenusRewards(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateMinimumBalance: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updateMinimumBalance(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updatePaidCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePaidCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.updatePaidCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToToken: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.optInToToken(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `payCommision(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payCommision: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.payCommision(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOnline: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOffline()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOffline: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `linkToNFD(uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    linkToNfd: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.linkToNfd(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `addLST(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.addLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `removeLST(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.removeLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pickupAlgoRewards: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.pickupAlgoRewards(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `stake(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.stake(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `burnLST(axfer,pay,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    burnLst: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.burnLst(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    acceptMigration: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.acceptMigration(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    migrateContract: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.migrateContract(params))
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(InjectedRewardsPoolConsensusParamsFactory.gas(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(InjectedRewardsPoolConsensusParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `initApplication(uint64,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['initApplication(uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateAdminAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdminAddress: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateAdminAddress(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateAdminAddress(address)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMigrationAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMigrationAdmin: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateMigrationAdmin(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateMigrationAdmin(address)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMaxStake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMaxStake: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateMaxStake(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateMaxStake(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateTreasuryAddress(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTreasuryAddress: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateTreasuryAddress(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateTreasuryAddress(address)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateCommision: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateCommision(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateCommision(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateCommisionAmount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateCommisionAmount: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateCommisionAmount(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateCommisionAmount(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateConsenusRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateConsenusRewards: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateConsenusRewards(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateConsenusRewards(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updateMinimumBalance(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateMinimumBalance: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updateMinimumBalance(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updateMinimumBalance(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `updatePaidCommision(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePaidCommision: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.updatePaidCommision(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['updatePaidCommision(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToToken: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.optInToToken(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['optInToToken(pay,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `payCommision(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payCommision: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.payCommision(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['payCommision(pay)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOnline: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.goOnline(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `goOffline()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOffline: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.goOffline(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['goOffline()void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `linkToNFD(uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    linkToNfd: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.linkToNfd(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['linkToNFD(uint64,string,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `addLST(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLst: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.addLst(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['addLST(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `removeLST(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLst: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.removeLst(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['removeLST(uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `pickupAlgoRewards()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pickupAlgoRewards: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.pickupAlgoRewards(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['pickupAlgoRewards()void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `stake(pay,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['stake(pay,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `burnLST(axfer,pay,uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    burnLst: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.burnLst(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['burnLST(axfer,pay,uint64,address)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    acceptMigration: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.acceptMigration(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    migrateContract: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.migrateContract(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the InjectedRewardsPoolConsensus smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(InjectedRewardsPoolConsensusParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | InjectedRewardsPoolConsensusReturns['gas()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new InjectedRewardsPoolConsensusClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current InjectedRewardsPoolConsensus app
   */
  state = {
    /**
     * Methods to access global state for the current InjectedRewardsPoolConsensus app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          stakedAssetId: result.stakedAssetId,
          lstTokenId: result.lstTokenId,
          totalStaked: result.totalStaked,
          adminAddress: result.adminAddress,
          minimumBalance: result.minimumBalance,
          commisionPercentage: result.commisionPercentage,
          lstBalance: result.lstBalance,
          circulatingLst: result.circulatingLST,
          treasuryAddress: result.treasuryAddress,
          commisionAmount: result.commisionAmount,
          totalConsensusRewards: result.totalConsensusRewards,
          maxStake: result.maxStake,
          migrationAdmin: result.migrationAdmin,
          paidCommision: result.paidCommision,
          contractVersion: result.contractVersion,
        }
      },
      /**
       * Get the current value of the stakedAssetId key in global state
       */
      stakedAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakedAssetId")) as bigint | undefined },
      /**
       * Get the current value of the lstTokenId key in global state
       */
      lstTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lstTokenId")) as bigint | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the adminAddress key in global state
       */
      adminAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("adminAddress")) as string | undefined },
      /**
       * Get the current value of the minimumBalance key in global state
       */
      minimumBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimumBalance")) as bigint | undefined },
      /**
       * Get the current value of the commisionPercentage key in global state
       */
      commisionPercentage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("commisionPercentage")) as bigint | undefined },
      /**
       * Get the current value of the lstBalance key in global state
       */
      lstBalance: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lstBalance")) as bigint | undefined },
      /**
       * Get the current value of the circulatingLST key in global state
       */
      circulatingLst: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("circulatingLST")) as bigint | undefined },
      /**
       * Get the current value of the treasuryAddress key in global state
       */
      treasuryAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("treasuryAddress")) as string | undefined },
      /**
       * Get the current value of the commisionAmount key in global state
       */
      commisionAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("commisionAmount")) as bigint | undefined },
      /**
       * Get the current value of the totalConsensusRewards key in global state
       */
      totalConsensusRewards: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalConsensusRewards")) as bigint | undefined },
      /**
       * Get the current value of the maxStake key in global state
       */
      maxStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxStake")) as bigint | undefined },
      /**
       * Get the current value of the migrationAdmin key in global state
       */
      migrationAdmin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("migrationAdmin")) as string | undefined },
      /**
       * Get the current value of the paidCommision key in global state
       */
      paidCommision: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("paidCommision")) as bigint | undefined },
      /**
       * Get the current value of the contractVersion key in global state
       */
      contractVersion: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractVersion")) as bigint | undefined },
    },
  }

  public newGroup(): InjectedRewardsPoolConsensusComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(uint64,uint64,pay)void method call against the InjectedRewardsPoolConsensus contract
       */
      initApplication(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdminAddress(address)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateAdminAddress(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdminAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateMigrationAdmin(address)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateMigrationAdmin(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMigrationAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateMaxStake(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateMaxStake(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMaxStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateTreasuryAddress(address)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateTreasuryAddress(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTreasuryAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateCommision(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateCommision(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateCommisionAmount(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateCommisionAmount(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateCommisionAmount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateConsenusRewards(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateConsenusRewards(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateConsenusRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateMinimumBalance(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updateMinimumBalance(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateMinimumBalance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePaidCommision(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      updatePaidCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePaidCommision(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToToken(pay,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      optInToToken(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payCommision(pay)void method call against the InjectedRewardsPoolConsensus contract
       */
      payCommision(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payCommision(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      goOnline(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOnline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOffline()void method call against the InjectedRewardsPoolConsensus contract
       */
      goOffline(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOffline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a linkToNFD(uint64,string,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      linkToNfd(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.linkToNfd(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addLST(axfer,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      addLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeLST(uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      removeLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pickupAlgoRewards()void method call against the InjectedRewardsPoolConsensus contract
       */
      pickupAlgoRewards(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pickupAlgoRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stake(pay,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      stake(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a burnLST(axfer,pay,uint64,address)void method call against the InjectedRewardsPoolConsensus contract
       */
      burnLst(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.burnLst(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void method call against the InjectedRewardsPoolConsensus contract
       */
      acceptMigration(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.acceptMigration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a migrateContract(pay)(uint64,uint64,uint64,uint64,uint64) method call against the InjectedRewardsPoolConsensus contract
       */
      migrateContract(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.migrateContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a gas()void method call against the InjectedRewardsPoolConsensus contract
       */
      gas(params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the InjectedRewardsPoolConsensus contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as InjectedRewardsPoolConsensusComposer
  }
}
export type InjectedRewardsPoolConsensusComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(uint64,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['initApplication(uint64,uint64,pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['initApplication(uint64,uint64,pay)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['initApplication(uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAddress(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateAdminAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateAdminAddress(address)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateAdminAddress(address)void'] | undefined]>

  /**
   * Calls the updateMigrationAdmin(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMigrationAdmin(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMigrationAdmin(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMigrationAdmin(address)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateMigrationAdmin(address)void'] | undefined]>

  /**
   * Calls the updateMaxStake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMaxStake(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMaxStake(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMaxStake(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateMaxStake(uint64)void'] | undefined]>

  /**
   * Calls the updateTreasuryAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTreasuryAddress(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateTreasuryAddress(address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateTreasuryAddress(address)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateTreasuryAddress(address)void'] | undefined]>

  /**
   * Calls the updateCommision(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCommision(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommision(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateCommision(uint64)void'] | undefined]>

  /**
   * Calls the updateCommisionAmount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCommisionAmount(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateCommisionAmount(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateCommisionAmount(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateCommisionAmount(uint64)void'] | undefined]>

  /**
   * Calls the updateConsenusRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateConsenusRewards(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateConsenusRewards(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateConsenusRewards(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateConsenusRewards(uint64)void'] | undefined]>

  /**
   * Calls the updateMinimumBalance(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinimumBalance(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updateMinimumBalance(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updateMinimumBalance(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updateMinimumBalance(uint64)void'] | undefined]>

  /**
   * Calls the updatePaidCommision(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePaidCommision(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['updatePaidCommision(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['updatePaidCommision(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['updatePaidCommision(uint64)void'] | undefined]>

  /**
   * Calls the optInToToken(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToToken(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['optInToToken(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['optInToToken(pay,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['optInToToken(pay,uint64)void'] | undefined]>

  /**
   * Calls the payCommision(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payCommision(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['payCommision(pay)void'] | InjectedRewardsPoolConsensusArgs['tuple']['payCommision(pay)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['payCommision(pay)void'] | undefined]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the goOffline()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['goOffline()void'] | InjectedRewardsPoolConsensusArgs['tuple']['goOffline()void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['goOffline()void'] | undefined]>

  /**
   * Calls the linkToNFD(uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  linkToNfd(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['linkToNFD(uint64,string,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['linkToNFD(uint64,string,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['linkToNFD(uint64,string,uint64)void'] | undefined]>

  /**
   * Calls the addLST(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLst(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['addLST(axfer,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['addLST(axfer,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['addLST(axfer,uint64)void'] | undefined]>

  /**
   * Calls the removeLST(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLst(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['removeLST(uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['removeLST(uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['removeLST(uint64)void'] | undefined]>

  /**
   * Calls the pickupAlgoRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pickupAlgoRewards(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['pickupAlgoRewards()void'] | InjectedRewardsPoolConsensusArgs['tuple']['pickupAlgoRewards()void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['pickupAlgoRewards()void'] | undefined]>

  /**
   * Calls the stake(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['stake(pay,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['stake(pay,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['stake(pay,uint64)void'] | undefined]>

  /**
   * Calls the burnLST(axfer,pay,uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnLst(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['burnLST(axfer,pay,uint64,address)void'] | InjectedRewardsPoolConsensusArgs['tuple']['burnLST(axfer,pay,uint64,address)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['burnLST(axfer,pay,uint64,address)void'] | undefined]>

  /**
   * Calls the acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  acceptMigration(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | InjectedRewardsPoolConsensusArgs['tuple']['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the migrateContract(pay)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  migrateContract(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | InjectedRewardsPoolConsensusArgs['tuple']['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['gas()void'] | InjectedRewardsPoolConsensusArgs['tuple']['gas()void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['gas()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the InjectedRewardsPoolConsensus smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<InjectedRewardsPoolConsensusArgs['obj']['deleteApplication()void'] | InjectedRewardsPoolConsensusArgs['tuple']['deleteApplication()void']>): InjectedRewardsPoolConsensusComposer<[...TReturns, InjectedRewardsPoolConsensusReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the InjectedRewardsPoolConsensus smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): InjectedRewardsPoolConsensusComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): InjectedRewardsPoolConsensusComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<InjectedRewardsPoolConsensusComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<InjectedRewardsPoolConsensusComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<InjectedRewardsPoolConsensusComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<InjectedRewardsPoolConsensusComposerResults<TReturns>>
}
export type InjectedRewardsPoolConsensusComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

