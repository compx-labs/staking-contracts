/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initApplication(uint64,uint64[5],uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "updateMinStakePeriod(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTotalStakingWeight(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateOracleAdminAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMBRForPoolCreation()(uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addRewardAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRewardAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectRewards(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "injectAlgoRewards(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "stake(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculateShares()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "accrueRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimRewards()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unstake(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setFreeze(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "accruedRewards": {
          "type": "bytes",
          "key": "accruedRewards"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakedAssetId": {
          "type": "uint64",
          "key": "stakedAssetId"
        },
        "minStakePeriodForRewards": {
          "type": "uint64",
          "key": "minStakePeriodForRewards"
        },
        "totalStaked": {
          "type": "uint64",
          "key": "totalStaked"
        },
        "algoInjectedRewards": {
          "type": "uint64",
          "key": "algoInjectedRewards"
        },
        "lastRewardInjectionTime": {
          "type": "uint64",
          "key": "lastRewardInjectionTime"
        },
        "totalStakingWeight": {
          "type": "bytes",
          "key": "totalStakingWeight"
        },
        "oracleAdminAddress": {
          "type": "bytes",
          "key": "oracleAdminAddress"
        },
        "adminAddress": {
          "type": "bytes",
          "key": "adminAddress"
        },
        "minimumBalance": {
          "type": "uint64",
          "key": "minimumBalance"
        },
        "numRewards": {
          "type": "uint64",
          "key": "numRewards"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "freeze": {
          "type": "bytes",
          "key": "freeze"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 1,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "InjectedRewardsPool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initApplication",
        "args": [
          {
            "name": "stakedAsset",
            "type": "uint64"
          },
          {
            "name": "rewardAssets",
            "type": "uint64[5]"
          },
          {
            "name": "minStakePeriodForRewards",
            "type": "uint64"
          },
          {
            "name": "oracleAdmin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateMinStakePeriod",
        "args": [
          {
            "name": "minStakePeriodForRewards",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateTotalStakingWeight",
        "args": [
          {
            "name": "totalStakingWeight",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAdminAddress",
        "args": [
          {
            "name": "adminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateOracleAdminAddress",
        "args": [
          {
            "name": "oracleAdminAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMBRForPoolCreation",
        "args": [],
        "returns": {
          "type": "(uint64)"
        }
      },
      {
        "name": "initStorage",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addRewardAsset",
        "args": [
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeRewardAsset",
        "args": [
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectRewards",
        "args": [
          {
            "name": "rewardTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          },
          {
            "name": "rewardAssetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "injectAlgoRewards",
        "args": [
          {
            "name": "payTxn",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stake",
        "args": [
          {
            "name": "stakeTxn",
            "type": "axfer"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "calculateShares",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "accrueRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimRewards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "unstake",
        "args": [
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setFreeze",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the InjectedRewardsPool smart contract.
 */
export type InjectedRewardsPool = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: {
        adminAddress: string
      }
      argsTuple: [adminAddress: string]
      returns: void
    }>
    & Record<'initApplication(uint64,uint64[5],uint64,address)void' | 'initApplication', {
      argsObj: {
        stakedAsset: bigint | number
        rewardAssets: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]
        minStakePeriodForRewards: bigint | number
        oracleAdmin: string
      }
      argsTuple: [stakedAsset: bigint | number, rewardAssets: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number], minStakePeriodForRewards: bigint | number, oracleAdmin: string]
      returns: void
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateMinStakePeriod(uint64)void' | 'updateMinStakePeriod', {
      argsObj: {
        minStakePeriodForRewards: bigint | number
      }
      argsTuple: [minStakePeriodForRewards: bigint | number]
      returns: void
    }>
    & Record<'updateTotalStakingWeight(uint64)void' | 'updateTotalStakingWeight', {
      argsObj: {
        totalStakingWeight: bigint | number
      }
      argsTuple: [totalStakingWeight: bigint | number]
      returns: void
    }>
    & Record<'updateAdminAddress(address)void' | 'updateAdminAddress', {
      argsObj: {
        adminAddress: string
      }
      argsTuple: [adminAddress: string]
      returns: void
    }>
    & Record<'updateOracleAdminAddress(address)void' | 'updateOracleAdminAddress', {
      argsObj: {
        oracleAdminAddress: string
      }
      argsTuple: [oracleAdminAddress: string]
      returns: void
    }>
    & Record<'getMBRForPoolCreation()(uint64)' | 'getMBRForPoolCreation', {
      argsObj: {
      }
      argsTuple: []
      returns: [bigint]
    }>
    & Record<'initStorage(pay)void' | 'initStorage', {
      argsObj: {
        mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'addRewardAsset(uint64)void' | 'addRewardAsset', {
      argsObj: {
        rewardAssetId: bigint | number
      }
      argsTuple: [rewardAssetId: bigint | number]
      returns: void
    }>
    & Record<'removeRewardAsset(uint64)void' | 'removeRewardAsset', {
      argsObj: {
        rewardAssetId: bigint | number
      }
      argsTuple: [rewardAssetId: bigint | number]
      returns: void
    }>
    & Record<'injectRewards(axfer,uint64,uint64)void' | 'injectRewards', {
      argsObj: {
        rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
        rewardAssetId: bigint | number
      }
      argsTuple: [rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number, rewardAssetId: bigint | number]
      returns: void
    }>
    & Record<'injectAlgoRewards(pay,uint64)void' | 'injectAlgoRewards', {
      argsObj: {
        payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'stake(axfer,uint64)void' | 'stake', {
      argsObj: {
        stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [stakeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'calculateShares()void' | 'calculateShares', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'accrueRewards()void' | 'accrueRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claimRewards()void' | 'claimRewards', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'unstake(uint64)void' | 'unstake', {
      argsObj: {
        quantity: bigint | number
      }
      argsTuple: [quantity: bigint | number]
      returns: void
    }>
    & Record<'setFreeze(bool)void' | 'setFreeze', {
      argsObj: {
        enabled: boolean
      }
      argsTuple: [enabled: boolean]
      returns: void
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'stakedAssetId'?: IntegerState
      'minStakePeriodForRewards'?: IntegerState
      'totalStaked'?: IntegerState
      'algoInjectedRewards'?: IntegerState
      'lastRewardInjectionTime'?: IntegerState
      'totalStakingWeight'?: BinaryState
      'oracleAdminAddress'?: BinaryState
      'adminAddress'?: BinaryState
      'minimumBalance'?: IntegerState
      'numRewards'?: IntegerState
      'numStakers'?: IntegerState
      'freeze'?: BinaryState
    }
    local: {
      'accruedRewards'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type InjectedRewardsPoolSig = keyof InjectedRewardsPool['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends InjectedRewardsPoolSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the InjectedRewardsPool smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends InjectedRewardsPoolSig> = InjectedRewardsPool['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InjectedRewardsPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InjectedRewardsPoolSig> = InjectedRewardsPool['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type InjectedRewardsPoolCreateCalls = (typeof InjectedRewardsPoolCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type InjectedRewardsPoolCreateCallParams =
  | (TypedCallParams<'createApplication(address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type InjectedRewardsPoolDeleteCalls = (typeof InjectedRewardsPoolCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type InjectedRewardsPoolDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type InjectedRewardsPoolDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: InjectedRewardsPoolCreateCalls) => InjectedRewardsPoolCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: InjectedRewardsPoolDeleteCalls) => InjectedRewardsPoolDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class InjectedRewardsPoolCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the InjectedRewardsPool smart contract using the createApplication(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.adminAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the InjectedRewardsPool smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the InjectedRewardsPool smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(uint64,uint64[5],uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initApplication(args: MethodArgs<'initApplication(uint64,uint64[5],uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initApplication(uint64,uint64[5],uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakedAsset, args.rewardAssets, args.minStakePeriodForRewards, args.oracleAdmin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateMinStakePeriod(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateMinStakePeriod(args: MethodArgs<'updateMinStakePeriod(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateMinStakePeriod(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.minStakePeriodForRewards],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateTotalStakingWeight(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTotalStakingWeight(args: MethodArgs<'updateTotalStakingWeight(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateTotalStakingWeight(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.totalStakingWeight],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateAdminAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateAdminAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.adminAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateOracleAdminAddress(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateOracleAdminAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.oracleAdminAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getMBRForPoolCreation()(uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getMBRForPoolCreation()(uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initStorage(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initStorage(args: MethodArgs<'initStorage(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initStorage(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPayment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addRewardAsset(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addRewardAsset(args: MethodArgs<'addRewardAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addRewardAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardAssetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeRewardAsset(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeRewardAsset(args: MethodArgs<'removeRewardAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeRewardAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardAssetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the injectRewards(axfer,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'injectRewards(axfer,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardTxn, args.quantity, args.rewardAssetId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the injectAlgoRewards(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static injectAlgoRewards(args: MethodArgs<'injectAlgoRewards(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'injectAlgoRewards(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stake(axfer,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stake(args: MethodArgs<'stake(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stake(axfer,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.stakeTxn, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculateShares()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculateShares(args: MethodArgs<'calculateShares()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculateShares()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the accrueRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static accrueRewards(args: MethodArgs<'accrueRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'accrueRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimRewards(args: MethodArgs<'claimRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimRewards()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unstake(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unstake(args: MethodArgs<'unstake(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unstake(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setFreeze(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setFreeze(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.enabled],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'gas()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the InjectedRewardsPool smart contract
 */
export class InjectedRewardsPoolClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `InjectedRewardsPoolClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof InjectedRewardsPool['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the InjectedRewardsPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: InjectedRewardsPoolDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(InjectedRewardsPoolCallFactory.create)
    const deleteArgs = params.deleteCall?.(InjectedRewardsPoolCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the InjectedRewardsPool smart contract using the createApplication(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(InjectedRewardsPoolCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the InjectedRewardsPool smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(InjectedRewardsPoolCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the InjectedRewardsPool smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(InjectedRewardsPoolCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the InjectedRewardsPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initApplication(uint64,uint64[5],uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initApplication(args: MethodArgs<'initApplication(uint64,uint64[5],uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.initApplication(args, params))
  }

  /**
   * Calls the updateMinStakePeriod(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateMinStakePeriod(args: MethodArgs<'updateMinStakePeriod(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.updateMinStakePeriod(args, params))
  }

  /**
   * Calls the updateTotalStakingWeight(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTotalStakingWeight(args: MethodArgs<'updateTotalStakingWeight(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.updateTotalStakingWeight(args, params))
  }

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.updateAdminAddress(args, params))
  }

  /**
   * Calls the updateOracleAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.updateOracleAdminAddress(args, params))
  }

  /**
   * Calls the getMBRForPoolCreation()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.getMbrForPoolCreation(args, params))
  }

  /**
   * Calls the initStorage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initStorage(args: MethodArgs<'initStorage(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.initStorage(args, params))
  }

  /**
   * Calls the addRewardAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addRewardAsset(args: MethodArgs<'addRewardAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.addRewardAsset(args, params))
  }

  /**
   * Calls the removeRewardAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeRewardAsset(args: MethodArgs<'removeRewardAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.removeRewardAsset(args, params))
  }

  /**
   * Calls the injectRewards(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.injectRewards(args, params))
  }

  /**
   * Calls the injectAlgoRewards(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public injectAlgoRewards(args: MethodArgs<'injectAlgoRewards(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.injectAlgoRewards(args, params))
  }

  /**
   * Calls the stake(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stake(args: MethodArgs<'stake(axfer,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.stake(args, params))
  }

  /**
   * Calls the calculateShares()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculateShares(args: MethodArgs<'calculateShares()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.calculateShares(args, params))
  }

  /**
   * Calls the accrueRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public accrueRewards(args: MethodArgs<'accrueRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.accrueRewards(args, params))
  }

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimRewards(args: MethodArgs<'claimRewards()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.claimRewards(args, params))
  }

  /**
   * Calls the unstake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unstake(args: MethodArgs<'unstake(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.unstake(args, params))
  }

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.setFreeze(args, params))
  }

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public gas(args: MethodArgs<'gas()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InjectedRewardsPoolCallFactory.gas(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<InjectedRewardsPool['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get stakedAssetId() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'stakedAssetId')
      },
      get minStakePeriodForRewards() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'minStakePeriodForRewards')
      },
      get totalStaked() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'totalStaked')
      },
      get algoInjectedRewards() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'algoInjectedRewards')
      },
      get lastRewardInjectionTime() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'lastRewardInjectionTime')
      },
      get totalStakingWeight() {
        return InjectedRewardsPoolClient.getBinaryState(state, 'totalStakingWeight')
      },
      get oracleAdminAddress() {
        return InjectedRewardsPoolClient.getBinaryState(state, 'oracleAdminAddress')
      },
      get adminAddress() {
        return InjectedRewardsPoolClient.getBinaryState(state, 'adminAddress')
      },
      get minimumBalance() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'minimumBalance')
      },
      get numRewards() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'numRewards')
      },
      get numStakers() {
        return InjectedRewardsPoolClient.getIntegerState(state, 'numStakers')
      },
      get freeze() {
        return InjectedRewardsPoolClient.getBinaryState(state, 'freeze')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<InjectedRewardsPool['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get accruedRewards() {
        return InjectedRewardsPoolClient.getBinaryState(state, 'accruedRewards')
      },
    }
  }

  public compose(): InjectedRewardsPoolComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initApplication(args: MethodArgs<'initApplication(uint64,uint64[5],uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateMinStakePeriod(args: MethodArgs<'updateMinStakePeriod(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateMinStakePeriod(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateTotalStakingWeight(args: MethodArgs<'updateTotalStakingWeight(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTotalStakingWeight(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateAdminAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateOracleAdminAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getMbrForPoolCreation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      initStorage(args: MethodArgs<'initStorage(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initStorage(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addRewardAsset(args: MethodArgs<'addRewardAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addRewardAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeRewardAsset(args: MethodArgs<'removeRewardAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeRewardAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.injectRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      injectAlgoRewards(args: MethodArgs<'injectAlgoRewards(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.injectAlgoRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      stake(args: MethodArgs<'stake(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculateShares(args: MethodArgs<'calculateShares()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculateShares(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      accrueRewards(args: MethodArgs<'accrueRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.accrueRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimRewards(args: MethodArgs<'claimRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimRewards(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unstake(args: MethodArgs<'unstake(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unstake(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFreeze(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.gas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as InjectedRewardsPoolComposer
  }
}
export type InjectedRewardsPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(uint64,uint64[5],uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(args: MethodArgs<'initApplication(uint64,uint64[5],uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'initApplication(uint64,uint64[5],uint64,address)void'>]>

  /**
   * Calls the updateMinStakePeriod(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateMinStakePeriod(args: MethodArgs<'updateMinStakePeriod(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateMinStakePeriod(uint64)void'>]>

  /**
   * Calls the updateTotalStakingWeight(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTotalStakingWeight(args: MethodArgs<'updateTotalStakingWeight(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateTotalStakingWeight(uint64)void'>]>

  /**
   * Calls the updateAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAddress(args: MethodArgs<'updateAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateAdminAddress(address)void'>]>

  /**
   * Calls the updateOracleAdminAddress(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOracleAdminAddress(args: MethodArgs<'updateOracleAdminAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'updateOracleAdminAddress(address)void'>]>

  /**
   * Calls the getMBRForPoolCreation()(uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrForPoolCreation(args: MethodArgs<'getMBRForPoolCreation()(uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'getMBRForPoolCreation()(uint64)'>]>

  /**
   * Calls the initStorage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStorage(args: MethodArgs<'initStorage(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'initStorage(pay)void'>]>

  /**
   * Calls the addRewardAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewardAsset(args: MethodArgs<'addRewardAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'addRewardAsset(uint64)void'>]>

  /**
   * Calls the removeRewardAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeRewardAsset(args: MethodArgs<'removeRewardAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'removeRewardAsset(uint64)void'>]>

  /**
   * Calls the injectRewards(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  injectRewards(args: MethodArgs<'injectRewards(axfer,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'injectRewards(axfer,uint64,uint64)void'>]>

  /**
   * Calls the injectAlgoRewards(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  injectAlgoRewards(args: MethodArgs<'injectAlgoRewards(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'injectAlgoRewards(pay,uint64)void'>]>

  /**
   * Calls the stake(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(args: MethodArgs<'stake(axfer,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'stake(axfer,uint64)void'>]>

  /**
   * Calls the calculateShares()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateShares(args: MethodArgs<'calculateShares()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'calculateShares()void'>]>

  /**
   * Calls the accrueRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueRewards(args: MethodArgs<'accrueRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'accrueRewards()void'>]>

  /**
   * Calls the claimRewards()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(args: MethodArgs<'claimRewards()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'claimRewards()void'>]>

  /**
   * Calls the unstake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unstake(args: MethodArgs<'unstake(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'unstake(uint64)void'>]>

  /**
   * Calls the setFreeze(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFreeze(args: MethodArgs<'setFreeze(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'setFreeze(bool)void'>]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(args: MethodArgs<'gas()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'gas()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the InjectedRewardsPool smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the InjectedRewardsPool smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): InjectedRewardsPoolComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the InjectedRewardsPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): InjectedRewardsPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): InjectedRewardsPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<InjectedRewardsPoolComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<InjectedRewardsPoolComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type InjectedRewardsPoolComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type InjectedRewardsPoolComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
