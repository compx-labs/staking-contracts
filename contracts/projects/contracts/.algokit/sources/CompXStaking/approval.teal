#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 7
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// oracleAdmin: address
	txna ApplicationArgs 6
	dup
	len
	int 32
	==

	// argument 1 (oracleAdmin) for createApplication must be a address
	assert

	// startTimestamp: uint64
	txna ApplicationArgs 5
	btoi

	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minLockUp: uint64, contractDuration: uint64, startTimestamp: uint64, oracleAdmin: Address, adminAddress: Address): void
createApplication:
	proto 7 0

	// contracts/CompXStaking.algo.ts:64
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:65
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:66
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -3 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:67
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:68
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:69
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:70
	// this.contractStartTimestamp.value = startTimestamp
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	frame_dig -5 // startTimestamp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:71
	// this.contractEndTimestamp.value = startTimestamp + contractDuration
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	frame_dig -5 // startTimestamp: uint64
	frame_dig -4 // contractDuration: uint64
	+
	app_global_put

	// contracts/CompXStaking.algo.ts:72
	// this.totalStakingWeight.value = 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:73
	// this.remainingRewards.value = 0
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:74
	// this.oracleAdminAddress.value = oracleAdmin
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	frame_dig -6 // oracleAdmin: Address
	app_global_put

	// contracts/CompXStaking.algo.ts:75
	// this.stakeTokenPrice.value = 0
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:76
	// this.rewardTokenPrice.value = 0
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:77
	// this.rewardsAvailablePerTick.value = 0
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:78
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -7 // adminAddress: Address
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:82
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:83
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:84
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:85
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:86
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:87
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:88
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/CompXStaking.algo.ts:92
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:94
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:95
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:96
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:97
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:98
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64,uint64)void
*abi_route_updateParams:
	// contractDuration: uint64
	txna ApplicationArgs 2
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64,uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minLockUp: uint64, contractDuration: uint64): void
updateParams:
	proto 2 0

	// contracts/CompXStaking.algo.ts:104
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update params')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update params
	assert

	// contracts/CompXStaking.algo.ts:106
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -1 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:107
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -2 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:108
	// this.contractEndTimestamp.value = this.contractStartTimestamp.value + contractDuration
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	+
	app_global_put

	// *if0_condition
	// contracts/CompXStaking.algo.ts:109
	// this.totalRewards.value > 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	int 0
	>
	bz *if0_end

	// *if0_consequent
	// contracts/CompXStaking.algo.ts:110
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / contractDuration
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // contractDuration: uint64
	/
	app_global_put

*if0_end:
	retsub

// addRewards(axfer,uint64)void
*abi_route_addRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for addRewards must be a axfer transaction
	assert

	// execute addRewards(axfer,uint64)void
	callsub addRewards
	int 1
	return

// addRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
addRewards:
	proto 2 0

	// contracts/CompXStaking.algo.ts:115
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:116
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:117
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:119
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:125
	// this.totalRewards.value += quantity
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:126
	// this.remainingRewards.value += quantity
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:127
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put
	retsub

// addRewardsAlgo(pay,uint64)void
*abi_route_addRewardsAlgo:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for addRewardsAlgo must be a pay transaction
	assert

	// execute addRewardsAlgo(pay,uint64)void
	callsub addRewardsAlgo
	int 1
	return

// addRewardsAlgo(payTxn: PayTxn, quantity: uint64): void
addRewardsAlgo:
	proto 2 0

	// contracts/CompXStaking.algo.ts:131
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can add rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can add rewards
	assert

	// contracts/CompXStaking.algo.ts:132
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:133
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:135
	// verifyPayTxn(payTxn, {
	//       sender: this.app.creator,
	//       receiver: this.app.address,
	//       amount: quantity,
	//     })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:141
	// this.totalRewards.value += payTxn.amount
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:142
	// this.remainingRewards.value += payTxn.amount
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	+
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:143
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put
	retsub

// removeRewards(uint64)void
*abi_route_removeRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeRewards(uint64)void
	callsub removeRewards
	int 1
	return

// removeRewards(quantity: uint64): void
removeRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/CompXStaking.algo.ts:147
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can remove rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can remove rewards
	assert

	// contracts/CompXStaking.algo.ts:148
	// assert(this.remainingRewards.value >= quantity, 'Insufficient rewards')
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // quantity: uint64
	>=

	// Insufficient rewards
	assert

	// contracts/CompXStaking.algo.ts:150
	// rewardsToRemove = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // rewardsToRemove: uint64

	// *if1_condition
	// contracts/CompXStaking.algo.ts:151
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	int 0
	==
	bz *if1_end

	// *if1_consequent
	// contracts/CompXStaking.algo.ts:152
	// rewardsToRemove = this.remainingRewards.value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_bury 0 // rewardsToRemove: uint64

*if1_end:
	// *if2_condition
	// contracts/CompXStaking.algo.ts:154
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if2_else

	// *if2_consequent
	// contracts/CompXStaking.algo.ts:155
	// sendPayment({
	//         amount: rewardsToRemove,
	//         receiver: this.app.creator,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:156
	// amount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:157
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:158
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:159
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts/CompXStaking.algo.ts:162
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: rewardsToRemove,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:163
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:164
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:165
	// assetAmount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:166
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:167
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// contracts/CompXStaking.algo.ts:170
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	int 0
	==
	bz *if3_else

	// *if3_consequent
	// contracts/CompXStaking.algo.ts:171
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:172
	// this.remainingRewards.value = 0
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:173
	// this.rewardsAvailablePerTick.value = 0
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	int 0
	app_global_put
	b *if3_end

*if3_else:
	// contracts/CompXStaking.algo.ts:175
	// this.totalRewards.value -= rewardsToRemove
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig 0 // rewardsToRemove: uint64
	-
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:176
	// this.remainingRewards.value = this.totalRewards.value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	app_global_put

	// contracts/CompXStaking.algo.ts:177
	// this.rewardsAvailablePerTick.value = this.totalRewards.value / this.contractDuration.value
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	/
	app_global_put

*if3_end:
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:182
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/CompXStaking.algo.ts:183
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert

	// *if4_condition
	// contracts/CompXStaking.algo.ts:185
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if4_end

	// *if4_consequent
	// contracts/CompXStaking.algo.ts:186
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:187
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:188
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:189
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:190
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:191
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// *if5_condition
	// contracts/CompXStaking.algo.ts:195
	// this.stakedAssetId.value !== 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=
	bz *if5_end

	// *if5_consequent
	// contracts/CompXStaking.algo.ts:196
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:197
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:198
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:199
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:200
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:201
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if5_end:
	retsub

// setPrices(uint64,uint64)void
*abi_route_setPrices:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrices(uint64,uint64)void
	callsub setPrices
	int 1
	return

// setPrices(stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
setPrices:
	proto 2 0

	// contracts/CompXStaking.algo.ts:208
	// assert(this.txn.sender === this.oracleAdminAddress.value, 'Only oracle admin can set prices')
	txn Sender
	byte 0x6f7261636c6541646d696e41646472657373 // "oracleAdminAddress"
	app_global_get
	==

	// Only oracle admin can set prices
	assert

	// contracts/CompXStaking.algo.ts:209
	// assert(stakeTokenPrice > 0, 'Invalid stake token price')
	frame_dig -1 // stakeTokenPrice: uint64
	int 0
	>

	// Invalid stake token price
	assert

	// contracts/CompXStaking.algo.ts:210
	// assert(rewardTokenPrice > 0, 'Invalid reward token price')
	frame_dig -2 // rewardTokenPrice: uint64
	int 0
	>

	// Invalid reward token price
	assert

	// contracts/CompXStaking.algo.ts:212
	// this.stakeTokenPrice.value = stakeTokenPrice
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	frame_dig -1 // stakeTokenPrice: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:213
	// this.rewardTokenPrice.value = rewardTokenPrice
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	frame_dig -2 // rewardTokenPrice: uint64
	app_global_put
	retsub

// stake(axfer,uint64,uint64)void
*abi_route_stake:
	// lockPeriod: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 2 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64, lockPeriod: uint64): void
stake:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 11

	// contracts/CompXStaking.algo.ts:221
	// currentTimeStamp = globals.latestTimestamp * 1000
	global LatestTimestamp
	int 1000
	*
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/CompXStaking.algo.ts:222
	// assert(lockPeriod >= this.minLockUp.value, 'Lock period too short')
	frame_dig -3 // lockPeriod: uint64
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	>=

	// Lock period too short
	assert

	// contracts/CompXStaking.algo.ts:223
	// assert(currentTimeStamp + lockPeriod < this.contractEndTimestamp.value, 'Lock period too long')
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<

	// Lock period too long
	assert

	// contracts/CompXStaking.algo.ts:224
	// assert(currentTimeStamp <= this.contractEndTimestamp.value, 'Contract has ended')
	frame_dig 0 // currentTimeStamp: uint64
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<=

	// Contract has ended
	assert

	// contracts/CompXStaking.algo.ts:225
	// assert(currentTimeStamp >= this.contractStartTimestamp.value, 'Contract has not started')
	frame_dig 0 // currentTimeStamp: uint64
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	app_global_get
	>=

	// Contract has not started
	assert

	// contracts/CompXStaking.algo.ts:226
	// assert(this.stakeTokenPrice.value > 0, 'Stake token price not set')
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	int 0
	>

	// Stake token price not set
	assert

	// contracts/CompXStaking.algo.ts:227
	// assert(this.rewardTokenPrice.value > 0, 'Reward token price not set')
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	int 0
	>

	// Reward token price not set
	assert

	// contracts/CompXStaking.algo.ts:228
	// assert(this.staked(this.txn.sender).value === 0, 'User already staked')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	==

	// User already staked
	assert

	// contracts/CompXStaking.algo.ts:229
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/CompXStaking.algo.ts:231
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:237
	// this.staked(this.txn.sender).value = stakeTxn.assetAmount
	txn Sender
	byte 0x7374616b6564 // "staked"
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	app_local_put

	// contracts/CompXStaking.algo.ts:238
	// this.stakeDuration(this.txn.sender).value = lockPeriod
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	frame_dig -3 // lockPeriod: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:240
	// normalisedAmount = ((this.staked(this.txn.sender).value * this.stakeTokenPrice.value * PRECISION) / this.rewardTokenPrice.value) / PRECISION
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	int 10000
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	int 10000
	/
	frame_bury 1 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:241
	// userStakingWeight = (normalisedAmount * this.stakeDuration(this.txn.sender).value)
	frame_dig 1 // normalisedAmount: uint64
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	*
	frame_bury 2 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:242
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 2 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:245
	// userShare = (userStakingWeight * PRECISION) / this.totalStakingWeight.value
	frame_dig 2 // userStakingWeight: uint64
	int 10000
	*
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 3 // userShare: uint64

	// contracts/CompXStaking.algo.ts:246
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 3 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 4 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:247
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 4 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 5 // numerator: uint64

	// contracts/CompXStaking.algo.ts:248
	// denominator = PRECISION
	int 10000
	frame_bury 6 // denominator: uint64

	// contracts/CompXStaking.algo.ts:250
	// a = numerator
	frame_dig 5 // numerator: uint64
	frame_bury 7 // a: uint64

	// contracts/CompXStaking.algo.ts:251
	// b = denominator
	frame_dig 6 // denominator: uint64
	frame_bury 8 // b: uint64

*while_0:

*while_0_continue:
	// contracts/CompXStaking.algo.ts:252
	// b !== 0
	frame_dig 8 // b: uint64
	int 0
	!=
	bz *while_0_end

	// contracts/CompXStaking.algo.ts:253
	// temp = b
	frame_dig 8 // b: uint64
	frame_bury 9 // temp: uint64

	// contracts/CompXStaking.algo.ts:254
	// b = a % b
	frame_dig 7 // a: uint64
	frame_dig 8 // b: uint64
	%
	frame_bury 8 // b: uint64

	// contracts/CompXStaking.algo.ts:255
	// a = temp
	frame_dig 9 // temp: uint64
	frame_bury 7 // a: uint64
	b *while_0

*while_0_end:
	// contracts/CompXStaking.algo.ts:257
	// gcdValue = a
	frame_dig 7 // a: uint64
	frame_bury 10 // gcdValue: uint64

	// contracts/CompXStaking.algo.ts:259
	// numerator = numerator / gcdValue
	frame_dig 5 // numerator: uint64
	frame_dig 10 // gcdValue: uint64
	/
	frame_bury 5 // numerator: uint64

	// contracts/CompXStaking.algo.ts:260
	// denominator = denominator / gcdValue
	frame_dig 6 // denominator: uint64
	frame_dig 10 // gcdValue: uint64
	/
	frame_bury 6 // denominator: uint64

	// contracts/CompXStaking.algo.ts:261
	// userRewardRate = (this.rewardsAvailablePerTick.value * numerator) / denominator
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	app_global_get
	frame_dig 5 // numerator: uint64
	*
	frame_dig 6 // denominator: uint64
	/
	frame_bury 11 // userRewardRate: uint64

	// contracts/CompXStaking.algo.ts:263
	// this.totalStaked.value += this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:264
	// this.rewardRate(this.txn.sender).value = userRewardRate
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig 11 // userRewardRate: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:265
	// this.stakeStartTime(this.txn.sender).value = currentTimeStamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	frame_dig 0 // currentTimeStamp: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:266
	// this.userStakingWeight(this.txn.sender).value = userStakingWeight
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig 2 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:267
	// this.unlockTime(this.txn.sender).value = currentTimeStamp + lockPeriod
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	frame_dig 0 // currentTimeStamp: uint64
	frame_dig -3 // lockPeriod: uint64
	+
	app_local_put
	retsub

// getRewardRate()void
*abi_route_getRewardRate:
	// execute getRewardRate()void
	callsub getRewardRate
	int 1
	return

// getRewardRate(): void
getRewardRate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 10

	// contracts/CompXStaking.algo.ts:271
	// this.totalStakingWeight.value += this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:272
	// normalisedAmount = ((this.staked(this.txn.sender).value * this.stakeTokenPrice.value * PRECISION) / this.rewardTokenPrice.value) / PRECISION
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	int 10000
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	int 10000
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:273
	// userStakingWeight = (normalisedAmount * this.stakeDuration(this.txn.sender).value)
	frame_dig 0 // normalisedAmount: uint64
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	*
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:274
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:277
	// userShare = (userStakingWeight * PRECISION) / this.totalStakingWeight.value
	frame_dig 1 // userStakingWeight: uint64
	int 10000
	*
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 2 // userShare: uint64

	// contracts/CompXStaking.algo.ts:278
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 2 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 3 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:279
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 3 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:280
	// denominator = PRECISION
	int 10000
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:282
	// a = numerator
	frame_dig 4 // numerator: uint64
	frame_bury 6 // a: uint64

	// contracts/CompXStaking.algo.ts:283
	// b = denominator
	frame_dig 5 // denominator: uint64
	frame_bury 7 // b: uint64

*while_1:

*while_1_continue:
	// contracts/CompXStaking.algo.ts:284
	// b !== 0
	frame_dig 7 // b: uint64
	int 0
	!=
	bz *while_1_end

	// contracts/CompXStaking.algo.ts:285
	// temp = b
	frame_dig 7 // b: uint64
	frame_bury 8 // temp: uint64

	// contracts/CompXStaking.algo.ts:286
	// b = a % b
	frame_dig 6 // a: uint64
	frame_dig 7 // b: uint64
	%
	frame_bury 7 // b: uint64

	// contracts/CompXStaking.algo.ts:287
	// a = temp
	frame_dig 8 // temp: uint64
	frame_bury 6 // a: uint64
	b *while_1

*while_1_end:
	// contracts/CompXStaking.algo.ts:289
	// gcdValue = a
	frame_dig 6 // a: uint64
	frame_bury 9 // gcdValue: uint64

	// contracts/CompXStaking.algo.ts:291
	// numerator = numerator / gcdValue
	frame_dig 4 // numerator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:292
	// denominator = denominator / gcdValue
	frame_dig 5 // denominator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:293
	// userRewardRate = (this.rewardsAvailablePerTick.value * numerator) / denominator
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	app_global_get
	frame_dig 4 // numerator: uint64
	*
	frame_dig 5 // denominator: uint64
	/
	frame_bury 10 // userRewardRate: uint64

	// contracts/CompXStaking.algo.ts:295
	// this.rewardRate(this.txn.sender).value = userRewardRate
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig 10 // userRewardRate: uint64
	app_local_put
	retsub

// getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void
*abi_route_getRewardRate_Dev:
	// i_RewardsAvailablePerTick: uint64
	txna ApplicationArgs 6
	btoi

	// i_StakeAmount: uint64
	txna ApplicationArgs 5
	btoi

	// i_StakeDuration: uint64
	txna ApplicationArgs 4
	btoi

	// i_RewardTokenPrice: uint64
	txna ApplicationArgs 3
	btoi

	// i_StakeTokenPrice: uint64
	txna ApplicationArgs 2
	btoi

	// i_TotalStakingWeight: uint64
	txna ApplicationArgs 1
	btoi

	// execute getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void
	callsub getRewardRate_Dev
	int 1
	return

// getRewardRate_Dev(i_TotalStakingWeight: uint64, i_StakeTokenPrice: uint64, i_RewardTokenPrice: uint64, i_StakeDuration: uint64, i_StakeAmount: uint64, i_RewardsAvailablePerTick: uint64): void
getRewardRate_Dev:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 10

	// contracts/CompXStaking.algo.ts:307
	// normalisedAmount = ((i_StakeAmount * i_StakeTokenPrice * PRECISION) / i_RewardTokenPrice) / PRECISION
	frame_dig -5 // i_StakeAmount: uint64
	frame_dig -2 // i_StakeTokenPrice: uint64
	*
	int 10000
	*
	frame_dig -3 // i_RewardTokenPrice: uint64
	/
	int 10000
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:308
	// userStakingWeight = (normalisedAmount * i_StakeDuration)
	frame_dig 0 // normalisedAmount: uint64
	frame_dig -4 // i_StakeDuration: uint64
	*
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:309
	// i_TotalStakingWeight += userStakingWeight
	frame_dig -1 // i_TotalStakingWeight: uint64
	frame_dig 1 // userStakingWeight: uint64
	+
	frame_bury -1 // i_TotalStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:312
	// userShare = (userStakingWeight * PRECISION) / i_TotalStakingWeight
	frame_dig 1 // userStakingWeight: uint64
	int 10000
	*
	frame_dig -1 // i_TotalStakingWeight: uint64
	/
	frame_bury 2 // userShare: uint64

	// contracts/CompXStaking.algo.ts:313
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 2 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 3 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:317
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 3 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:318
	// denominator = PRECISION
	int 10000
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:320
	// a = numerator
	frame_dig 4 // numerator: uint64
	frame_bury 6 // a: uint64

	// contracts/CompXStaking.algo.ts:321
	// b = denominator
	frame_dig 5 // denominator: uint64
	frame_bury 7 // b: uint64

*while_2:

*while_2_continue:
	// contracts/CompXStaking.algo.ts:322
	// b !== 0
	frame_dig 7 // b: uint64
	int 0
	!=
	bz *while_2_end

	// contracts/CompXStaking.algo.ts:323
	// temp = b
	frame_dig 7 // b: uint64
	frame_bury 8 // temp: uint64

	// contracts/CompXStaking.algo.ts:324
	// b = a % b
	frame_dig 6 // a: uint64
	frame_dig 7 // b: uint64
	%
	frame_bury 7 // b: uint64

	// contracts/CompXStaking.algo.ts:325
	// a = temp
	frame_dig 8 // temp: uint64
	frame_bury 6 // a: uint64
	b *while_2

*while_2_end:
	// contracts/CompXStaking.algo.ts:327
	// gcdValue = a
	frame_dig 6 // a: uint64
	frame_bury 9 // gcdValue: uint64

	// contracts/CompXStaking.algo.ts:329
	// numerator = numerator / gcdValue
	frame_dig 4 // numerator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:330
	// denominator = denominator / gcdValue
	frame_dig 5 // denominator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:331
	// userRewardRate = (i_RewardsAvailablePerTick * numerator) / denominator
	frame_dig -6 // i_RewardsAvailablePerTick: uint64
	frame_dig 4 // numerator: uint64
	*
	frame_dig 5 // denominator: uint64
	/
	frame_bury 10 // userRewardRate: uint64

	// contracts/CompXStaking.algo.ts:333
	// this.rewardRate(this.txn.sender).value = userRewardRate
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	frame_dig 10 // userRewardRate: uint64
	app_local_put
	retsub

// accrueRewards(address)void
*abi_route_accrueRewards:
	// userAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for accrueRewards must be a address
	assert

	// execute accrueRewards(address)void
	callsub accrueRewards
	int 1
	return

// accrueRewards(userAddress: Address): void
accrueRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 9

	// contracts/CompXStaking.algo.ts:337
	// assert(this.staked(userAddress).value > 0, 'User has no staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// User has no staked assets
	assert

	// contracts/CompXStaking.algo.ts:338
	// assert(this.unlockTime(userAddress).value > globals.latestTimestamp * 1000, 'User has not unlocked assets')
	frame_dig -1 // userAddress: Address
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	app_local_get
	global LatestTimestamp
	int 1000
	*
	>

	// User has not unlocked assets
	assert

	// contracts/CompXStaking.algo.ts:339
	// assert(this.stakeStartTime(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:340
	// assert(this.stakeDuration(userAddress).value > 0, 'User has not staked assets')
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:341
	// this.totalStakingWeight.value += this.userStakingWeight(userAddress).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig -1 // userAddress: Address
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:342
	// normalisedAmount = ((this.staked(userAddress).value * this.stakeTokenPrice.value * PRECISION) / this.rewardTokenPrice.value) / PRECISION
	frame_dig -1 // userAddress: Address
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	int 10000
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	int 10000
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:343
	// userStakingWeight = (normalisedAmount * this.stakeDuration(userAddress).value)
	frame_dig 0 // normalisedAmount: uint64
	frame_dig -1 // userAddress: Address
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	*
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:344
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:347
	// userShare = (userStakingWeight * PRECISION) / this.totalStakingWeight.value
	frame_dig 1 // userStakingWeight: uint64
	int 10000
	*
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 2 // userShare: uint64

	// contracts/CompXStaking.algo.ts:348
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 2 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 3 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:349
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 3 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:350
	// denominator = PRECISION
	int 10000
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:352
	// a = numerator
	frame_dig 4 // numerator: uint64
	frame_bury 6 // a: uint64

	// contracts/CompXStaking.algo.ts:353
	// b = denominator
	frame_dig 5 // denominator: uint64
	frame_bury 7 // b: uint64

*while_3:

*while_3_continue:
	// contracts/CompXStaking.algo.ts:354
	// b !== 0
	frame_dig 7 // b: uint64
	int 0
	!=
	bz *while_3_end

	// contracts/CompXStaking.algo.ts:355
	// temp = b
	frame_dig 7 // b: uint64
	frame_bury 8 // temp: uint64

	// contracts/CompXStaking.algo.ts:356
	// b = a % b
	frame_dig 6 // a: uint64
	frame_dig 7 // b: uint64
	%
	frame_bury 7 // b: uint64

	// contracts/CompXStaking.algo.ts:357
	// a = temp
	frame_dig 8 // temp: uint64
	frame_bury 6 // a: uint64
	b *while_3

*while_3_end:
	// contracts/CompXStaking.algo.ts:359
	// gcdValue = a
	frame_dig 6 // a: uint64
	frame_bury 9 // gcdValue: uint64

	// contracts/CompXStaking.algo.ts:361
	// numerator = numerator / gcdValue
	frame_dig 4 // numerator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:362
	// denominator = denominator / gcdValue
	frame_dig 5 // denominator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:363
	// this.rewardRate(userAddress).value = (this.rewardsAvailablePerTick.value * numerator) / denominator
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	app_global_get
	frame_dig 4 // numerator: uint64
	*
	frame_dig 5 // denominator: uint64
	/
	app_local_put

	// contracts/CompXStaking.algo.ts:365
	// this.accruedRewards(userAddress).value = (this.rewardRate(userAddress).value * ((globals.latestTimestamp * 1000) - this.stakeStartTime(userAddress).value))
	frame_dig -1 // userAddress: Address
	byte 0x6163637275656452657761726473 // "accruedRewards"
	frame_dig -1 // userAddress: Address
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	global LatestTimestamp
	int 1000
	*
	frame_dig -1 // userAddress: Address
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	*
	app_local_put
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	int 1
	return

// unstake(): void
unstake:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 9

	// contracts/CompXStaking.algo.ts:370
	// assert(this.staked(this.txn.sender).value > 0, 'No staked assets')
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	int 0
	>

	// No staked assets
	assert

	// contracts/CompXStaking.algo.ts:371
	// assert(this.unlockTime(this.txn.sender).value < (globals.latestTimestamp * 1000), 'unlock time not reached')
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	app_local_get
	global LatestTimestamp
	int 1000
	*
	<

	// unlock time not reached
	assert

	// contracts/CompXStaking.algo.ts:372
	// assert(this.stakeStartTime(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:373
	// assert(this.stakeDuration(this.txn.sender).value > 0, 'User has not staked assets')
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	int 0
	>

	// User has not staked assets
	assert

	// contracts/CompXStaking.algo.ts:374
	// assert(this.accruedRewards(this.txn.sender).value > 0, 'User has no accrued rewards')
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	int 0
	>

	// User has no accrued rewards
	assert

	// contracts/CompXStaking.algo.ts:375
	// this.totalStakingWeight.value += this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:376
	// normalisedAmount = ((this.staked(this.txn.sender).value * this.stakeTokenPrice.value * PRECISION) / this.rewardTokenPrice.value) / PRECISION
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	byte 0x7374616b65546f6b656e5072696365 // "stakeTokenPrice"
	app_global_get
	*
	int 10000
	*
	byte 0x726577617264546f6b656e5072696365 // "rewardTokenPrice"
	app_global_get
	/
	int 10000
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:377
	// userStakingWeight = (normalisedAmount * this.stakeDuration(this.txn.sender).value)
	frame_dig 0 // normalisedAmount: uint64
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	app_local_get
	*
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:378
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:381
	// userShare = (userStakingWeight * PRECISION) / this.totalStakingWeight.value
	frame_dig 1 // userStakingWeight: uint64
	int 10000
	*
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 2 // userShare: uint64

	// contracts/CompXStaking.algo.ts:382
	// userSharePercentage = (userShare * 100) / PRECISION
	frame_dig 2 // userShare: uint64
	int 100
	*
	int 10000
	/
	frame_bury 3 // userSharePercentage: uint64

	// contracts/CompXStaking.algo.ts:383
	// numerator = (userSharePercentage * PRECISION)
	frame_dig 3 // userSharePercentage: uint64
	int 10000
	*
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:384
	// denominator = PRECISION
	int 10000
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:386
	// a = numerator
	frame_dig 4 // numerator: uint64
	frame_bury 6 // a: uint64

	// contracts/CompXStaking.algo.ts:387
	// b = denominator
	frame_dig 5 // denominator: uint64
	frame_bury 7 // b: uint64

*while_4:

*while_4_continue:
	// contracts/CompXStaking.algo.ts:388
	// b !== 0
	frame_dig 7 // b: uint64
	int 0
	!=
	bz *while_4_end

	// contracts/CompXStaking.algo.ts:389
	// temp = b
	frame_dig 7 // b: uint64
	frame_bury 8 // temp: uint64

	// contracts/CompXStaking.algo.ts:390
	// b = a % b
	frame_dig 6 // a: uint64
	frame_dig 7 // b: uint64
	%
	frame_bury 7 // b: uint64

	// contracts/CompXStaking.algo.ts:391
	// a = temp
	frame_dig 8 // temp: uint64
	frame_bury 6 // a: uint64
	b *while_4

*while_4_end:
	// contracts/CompXStaking.algo.ts:393
	// gcdValue = a
	frame_dig 6 // a: uint64
	frame_bury 9 // gcdValue: uint64

	// contracts/CompXStaking.algo.ts:395
	// numerator = numerator / gcdValue
	frame_dig 4 // numerator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 4 // numerator: uint64

	// contracts/CompXStaking.algo.ts:396
	// denominator = denominator / gcdValue
	frame_dig 5 // denominator: uint64
	frame_dig 9 // gcdValue: uint64
	/
	frame_bury 5 // denominator: uint64

	// contracts/CompXStaking.algo.ts:397
	// this.rewardRate(this.txn.sender).value = (this.rewardsAvailablePerTick.value * numerator) / denominator
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	byte 0x72657761726473417661696c61626c655065725469636b // "rewardsAvailablePerTick"
	app_global_get
	frame_dig 4 // numerator: uint64
	*
	frame_dig 5 // denominator: uint64
	/
	app_local_put

	// contracts/CompXStaking.algo.ts:398
	// this.accruedRewards(this.txn.sender).value = (this.rewardRate(this.txn.sender).value * ((globals.latestTimestamp * 1000) - this.stakeStartTime(this.txn.sender).value))
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	app_local_get
	global LatestTimestamp
	int 1000
	*
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	app_local_get
	-
	*
	app_local_put

	// *if6_condition
	// contracts/CompXStaking.algo.ts:402
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if6_else

	// *if6_consequent
	// contracts/CompXStaking.algo.ts:403
	// sendPayment({
	//         amount: this.staked(this.txn.sender).value,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:404
	// amount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:405
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:406
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:407
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if6_end

*if6_else:
	// contracts/CompXStaking.algo.ts:410
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: this.staked(this.txn.sender).value,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:411
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:412
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:413
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:414
	// assetAmount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:415
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if6_end:
	// *if7_condition
	// contracts/CompXStaking.algo.ts:418
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if7_else

	// *if7_consequent
	// contracts/CompXStaking.algo.ts:419
	// sendPayment({
	//         amount: this.accruedRewards(this.txn.sender).value,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:420
	// amount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:421
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:422
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:423
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if7_end

*if7_else:
	// contracts/CompXStaking.algo.ts:426
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         assetAmount: this.accruedRewards(this.txn.sender).value,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:427
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:428
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:429
	// assetAmount: this.accruedRewards(this.txn.sender).value
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:430
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:431
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if7_end:
	// contracts/CompXStaking.algo.ts:436
	// this.totalStakingWeight.value -= this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:437
	// this.remainingRewards.value -= this.accruedRewards(this.txn.sender).value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	app_local_get
	-
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:438
	// this.totalStaked.value -= this.staked(this.txn.sender).value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:440
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:441
	// this.accruedRewards(this.txn.sender).value = 0
	txn Sender
	byte 0x6163637275656452657761726473 // "accruedRewards"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:442
	// this.rewardRate(this.txn.sender).value = 0
	txn Sender
	byte 0x72657761726452617465 // "rewardRate"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:443
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:444
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:445
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:446
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(uint64)void"
	method "updateParams(uint64,uint64)void"
	method "addRewards(axfer,uint64)void"
	method "addRewardsAlgo(pay,uint64)void"
	method "removeRewards(uint64)void"
	method "setPrices(uint64,uint64)void"
	method "stake(axfer,uint64,uint64)void"
	method "getRewardRate()void"
	method "getRewardRate_Dev(uint64,uint64,uint64,uint64,uint64,uint64)void"
	method "accrueRewards(address)void"
	method "unstake()void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_addRewards *abi_route_addRewardsAlgo *abi_route_removeRewards *abi_route_setPrices *abi_route_stake *abi_route_getRewardRate *abi_route_getRewardRate_Dev *abi_route_accrueRewards *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err