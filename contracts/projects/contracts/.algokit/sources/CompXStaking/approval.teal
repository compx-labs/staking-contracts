#pragma version 9

// This TEAL was generated by TEALScript v0.96.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// startTimestamp: uint64
	txna ApplicationArgs 6
	btoi

	// oracleAppID: uint64
	txna ApplicationArgs 5
	btoi

	// contractDuration: uint64
	txna ApplicationArgs 4
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAsset: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64,uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(stakedAsset: uint64, rewardAsset: uint64, minLockUp: uint64, contractDuration: uint64, oracleAppID: uint64, startTimestamp: uint64): void
createApplication:
	proto 6 0

	// contracts/CompXStaking.algo.ts:50
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:51
	// this.rewardAssetId.value = rewardAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAsset: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:52
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -3 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:53
	// this.totalRewards.value = 0
	byte 0x746f74616c52657761726473 // "totalRewards"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:54
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:55
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -4 // contractDuration: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:56
	// this.contractStartTimestamp.value = startTimestamp
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	frame_dig -6 // startTimestamp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:57
	// this.contractEndTimestamp.value = startTimestamp + contractDuration
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	frame_dig -6 // startTimestamp: uint64
	frame_dig -4 // contractDuration: uint64
	+
	app_global_put

	// contracts/CompXStaking.algo.ts:58
	// this.oracleAppID.value = oracleAppID
	byte 0x6f7261636c654170704944 // "oracleAppID"
	frame_dig -5 // oracleAppID: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:59
	// this.totalStakingWeight.value = 0
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	int 0
	app_global_put

	// contracts/CompXStaking.algo.ts:60
	// this.remainingRewards.value = 0
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	int 0
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:64
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:65
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:66
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:67
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put
	retsub

// optInToAsset(uint64)void
*abi_route_optInToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsset(uint64)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(asset: AssetID): void
optInToAsset:
	proto 1 0

	// contracts/CompXStaking.algo.ts:71
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:73
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:74
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:75
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:76
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:77
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateParams(uint64,uint64,uint64)void
*abi_route_updateParams:
	// contractDuration: uint64
	txna ApplicationArgs 3
	btoi

	// oracleAppID: uint64
	txna ApplicationArgs 2
	btoi

	// minLockUp: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateParams(uint64,uint64,uint64)void
	callsub updateParams
	int 1
	return

// updateParams(minLockUp: uint64, oracleAppID: uint64, contractDuration: uint64): void
updateParams:
	proto 3 0

	// contracts/CompXStaking.algo.ts:82
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:84
	// this.minLockUp.value = minLockUp
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	frame_dig -1 // minLockUp: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:85
	// this.oracleAppID.value = oracleAppID
	byte 0x6f7261636c654170704944 // "oracleAppID"
	frame_dig -2 // oracleAppID: uint64
	app_global_put

	// contracts/CompXStaking.algo.ts:86
	// this.contractDuration.value = contractDuration
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	frame_dig -3 // contractDuration: uint64
	app_global_put
	retsub

// addRewards(axfer,uint64)void
*abi_route_addRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (rewardTxn) for addRewards must be a axfer transaction
	assert

	// execute addRewards(axfer,uint64)void
	callsub addRewards
	int 1
	return

// addRewards(rewardTxn: AssetTransferTxn, quantity: uint64): void
addRewards:
	proto 2 0

	// contracts/CompXStaking.algo.ts:90
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:91
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:92
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:94
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.app.creator,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.rewardAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/CompXStaking.algo.ts:100
	// this.totalRewards.value += quantity
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:101
	// this.remainingRewards.value += quantity
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put
	retsub

// addRewardsAlgo(pay,uint64)void
*abi_route_addRewardsAlgo:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for addRewardsAlgo must be a pay transaction
	assert

	// execute addRewardsAlgo(pay,uint64)void
	callsub addRewardsAlgo
	int 1
	return

// addRewardsAlgo(payTxn: PayTxn, quantity: uint64): void
addRewardsAlgo:
	proto 2 0

	// contracts/CompXStaking.algo.ts:105
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:106
	// assert(this.minLockUp.value !== 0, 'Minimum lockup not set')
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	int 0
	!=

	// Minimum lockup not set
	assert

	// contracts/CompXStaking.algo.ts:107
	// assert(this.contractDuration.value !== 0, 'Contract duration not set')
	byte 0x636f6e74726163744475726174696f6e // "contractDuration"
	app_global_get
	int 0
	!=

	// Contract duration not set
	assert

	// contracts/CompXStaking.algo.ts:109
	// verifyPayTxn(payTxn, {
	//       sender: this.app.creator,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.app.creator"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/CompXStaking.algo.ts:114
	// this.totalRewards.value += quantity
	byte 0x746f74616c52657761726473 // "totalRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c52657761726473 // "totalRewards"
	swap
	app_global_put
	retsub

// removeRewards(uint64)void
*abi_route_removeRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeRewards(uint64)void
	callsub removeRewards
	int 1
	return

// removeRewards(quantity: uint64): void
removeRewards:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/CompXStaking.algo.ts:118
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:119
	// assert(this.remainingRewards.value >= quantity, 'Insufficient rewards')
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig -1 // quantity: uint64
	>=

	// Insufficient rewards
	assert

	// contracts/CompXStaking.algo.ts:121
	// rewardsToRemove = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // rewardsToRemove: uint64

	// *if0_condition
	// contracts/CompXStaking.algo.ts:122
	// rewardsToRemove === 0
	frame_dig 0 // rewardsToRemove: uint64
	int 0
	==
	bz *if0_end

	// *if0_consequent
	// contracts/CompXStaking.algo.ts:123
	// rewardsToRemove = this.remainingRewards.value
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_bury 0 // rewardsToRemove: uint64

*if0_end:
	// *if1_condition
	// contracts/CompXStaking.algo.ts:125
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts/CompXStaking.algo.ts:126
	// sendPayment({
	//         amount: rewardsToRemove,
	//         receiver: this.app.creator,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:127
	// amount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:128
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:129
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:130
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts/CompXStaking.algo.ts:133
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: rewardsToRemove,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:134
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:135
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:136
	// assetAmount: rewardsToRemove
	frame_dig 0 // rewardsToRemove: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:137
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:138
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// stake(axfer,uint64,uint64,uint64,uint64)void
*abi_route_stake:
	// rewardTokenPrice: uint64
	txna ApplicationArgs 4
	btoi

	// stakeTokenPrice: uint64
	txna ApplicationArgs 3
	btoi

	// lockPeriod: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 4 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64,uint64,uint64,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64, lockPeriod: uint64, stakeTokenPrice: uint64, rewardTokenPrice: uint64): void
stake:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/CompXStaking.algo.ts:150
	// assert(lockPeriod >= this.minLockUp.value, 'Lock period too short')
	frame_dig -3 // lockPeriod: uint64
	byte 0x6d696e4c6f636b5570 // "minLockUp"
	app_global_get
	>=

	// Lock period too short
	assert

	// contracts/CompXStaking.algo.ts:151
	// assert(globals.latestTimestamp + lockPeriod < this.contractEndTimestamp.value, 'Lock period too long')
	global LatestTimestamp
	frame_dig -3 // lockPeriod: uint64
	+
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<

	// Lock period too long
	assert

	// contracts/CompXStaking.algo.ts:152
	// assert(globals.latestTimestamp <= this.contractEndTimestamp.value, 'Contract has ended')
	global LatestTimestamp
	byte 0x636f6e7472616374456e6454696d657374616d70 // "contractEndTimestamp"
	app_global_get
	<=

	// Contract has ended
	assert

	// contracts/CompXStaking.algo.ts:153
	// assert(globals.latestTimestamp >= this.contractStartTimestamp.value, 'Contract has not started')
	global LatestTimestamp
	byte 0x636f6e7472616374537461727454696d657374616d70 // "contractStartTimestamp"
	app_global_get
	>=

	// Contract has not started
	assert

	// contracts/CompXStaking.algo.ts:155
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// contracts/CompXStaking.algo.ts:160
	// normalisedAmount = (quantity * stakeTokenPrice) / rewardTokenPrice
	frame_dig -2 // quantity: uint64
	frame_dig -4 // stakeTokenPrice: uint64
	*
	frame_dig -5 // rewardTokenPrice: uint64
	/
	frame_bury 0 // normalisedAmount: uint64

	// contracts/CompXStaking.algo.ts:161
	// userStakingWeight = normalisedAmount * lockPeriod
	frame_dig 0 // normalisedAmount: uint64
	frame_dig -3 // lockPeriod: uint64
	*
	frame_bury 1 // userStakingWeight: uint64

	// contracts/CompXStaking.algo.ts:163
	// this.totalStaked.value += quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:164
	// this.totalStakingWeight.value += userStakingWeight
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	frame_dig 1 // userStakingWeight: uint64
	+
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:166
	// this.staked(this.txn.sender).value += quantity
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_dig -2 // quantity: uint64
	+
	txn Sender
	byte 0x7374616b6564 // "staked"
	uncover 2
	app_local_put

	// contracts/CompXStaking.algo.ts:167
	// this.stakeStartTime(this.txn.sender).value = globals.latestTimestamp
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	global LatestTimestamp
	app_local_put

	// contracts/CompXStaking.algo.ts:168
	// this.stakeDuration(this.txn.sender).value = lockPeriod
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	frame_dig -3 // lockPeriod: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:169
	// this.userStakingWeight(this.txn.sender).value = userStakingWeight
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	frame_dig 1 // userStakingWeight: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:170
	// this.unlockTime(this.txn.sender).value = globals.latestTimestamp + lockPeriod
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	global LatestTimestamp
	frame_dig -3 // lockPeriod: uint64
	+
	app_local_put
	retsub

// unstake()void
*abi_route_unstake:
	// execute unstake()void
	callsub unstake
	int 1
	return

// unstake(): void
unstake:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/CompXStaking.algo.ts:174
	// quantity = this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	frame_bury 0 // quantity: uint64

	// contracts/CompXStaking.algo.ts:175
	// assert(quantity > 0, 'No staked assets')
	frame_dig 0 // quantity: uint64
	int 0
	>

	// No staked assets
	assert

	// contracts/CompXStaking.algo.ts:178
	// userShare = this.userStakingWeight(this.txn.sender).value / this.totalStakingWeight.value
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	/
	frame_bury 1 // userShare: uint64

	// contracts/CompXStaking.algo.ts:179
	// this.userShare(this.txn.sender).value = userShare
	txn Sender
	byte 0x757365725368617265 // "userShare"
	frame_dig 1 // userShare: uint64
	app_local_put

	// contracts/CompXStaking.algo.ts:182
	// userTotalRewards = userShare * this.remainingRewards.value
	frame_dig 1 // userShare: uint64
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	*
	frame_bury 2 // userTotalRewards: uint64

	// contracts/CompXStaking.algo.ts:184
	// assert(userTotalRewards > 0, 'No rewards to claim')
	frame_dig 2 // userTotalRewards: uint64
	int 0
	>

	// No rewards to claim
	assert

	// contracts/CompXStaking.algo.ts:185
	// assert(userTotalRewards <= this.remainingRewards.value, 'Insufficient rewards')
	frame_dig 2 // userTotalRewards: uint64
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	<=

	// Insufficient rewards
	assert

	// contracts/CompXStaking.algo.ts:188
	// this.totalStakingWeight.value -= this.userStakingWeight(this.txn.sender).value
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	app_global_get
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	app_local_get
	-
	byte 0x746f74616c5374616b696e67576569676874 // "totalStakingWeight"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:191
	// this.remainingRewards.value -= userTotalRewards
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	app_global_get
	frame_dig 2 // userTotalRewards: uint64
	-
	byte 0x72656d61696e696e6752657761726473 // "remainingRewards"
	swap
	app_global_put

	// *if2_condition
	// contracts/CompXStaking.algo.ts:193
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if2_else

	// *if2_consequent
	// contracts/CompXStaking.algo.ts:194
	// sendPayment({
	//         amount: this.staked(this.txn.sender).value,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:195
	// amount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:196
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:197
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:198
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if2_end

*if2_else:
	// contracts/CompXStaking.algo.ts:201
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: this.staked(this.txn.sender).value,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:202
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:203
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:204
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:205
	// assetAmount: this.staked(this.txn.sender).value
	txn Sender
	byte 0x7374616b6564 // "staked"
	app_local_get
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:206
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// *if3_condition
	// contracts/CompXStaking.algo.ts:209
	// this.rewardAssetId.value === 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	==
	bz *if3_else

	// *if3_consequent
	// contracts/CompXStaking.algo.ts:210
	// sendPayment({
	//         amount: userTotalRewards,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:211
	// amount: userTotalRewards
	frame_dig 2 // userTotalRewards: uint64
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:212
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:213
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:214
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if3_end

*if3_else:
	// contracts/CompXStaking.algo.ts:217
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         assetAmount: userTotalRewards,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:218
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:219
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:220
	// assetAmount: userTotalRewards
	frame_dig 2 // userTotalRewards: uint64
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:221
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:222
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if3_end:
	// contracts/CompXStaking.algo.ts:226
	// this.totalStaked.value -= quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig 0 // quantity: uint64
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/CompXStaking.algo.ts:228
	// this.staked(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b6564 // "staked"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:229
	// this.unlockTime(this.txn.sender).value = 0
	txn Sender
	byte 0x756e6c6f636b54696d65 // "unlockTime"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:230
	// this.userStakingWeight(this.txn.sender).value = 0
	txn Sender
	byte 0x757365725374616b696e67576569676874 // "userStakingWeight"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:231
	// this.stakeDuration(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b654475726174696f6e // "stakeDuration"
	int 0
	app_local_put

	// contracts/CompXStaking.algo.ts:232
	// this.stakeStartTime(this.txn.sender).value = 0
	txn Sender
	byte 0x7374616b65537461727454696d65 // "stakeStartTime"
	int 0
	app_local_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/CompXStaking.algo.ts:236
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/CompXStaking.algo.ts:237
	// assert(this.totalStaked.value === 0, 'Staked assets still exist')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	int 0
	==

	// Staked assets still exist
	assert

	// *if4_condition
	// contracts/CompXStaking.algo.ts:239
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if4_end

	// *if4_consequent
	// contracts/CompXStaking.algo.ts:240
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:241
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:242
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:243
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:244
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:245
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if4_end:
	// *if5_condition
	// contracts/CompXStaking.algo.ts:249
	// this.stakedAssetId.value !== 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=
	bz *if5_end

	// *if5_consequent
	// contracts/CompXStaking.algo.ts:250
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//         assetReceiver: this.app.creator,
	//         assetAmount: 0,
	//         sender: this.app.address,
	//         assetCloseTo: this.app.creator,
	//
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:251
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/CompXStaking.algo.ts:252
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts/CompXStaking.algo.ts:253
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/CompXStaking.algo.ts:254
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/CompXStaking.algo.ts:255
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if5_end:
	// contracts/CompXStaking.algo.ts:260
	// sendPayment({
	//       amount: this.app.address.balance,
	//       receiver: this.app.creator,
	//       closeRemainderTo: this.app.creator,
	//       fee: 1000,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/CompXStaking.algo.ts:261
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts/CompXStaking.algo.ts:262
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/CompXStaking.algo.ts:263
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// contracts/CompXStaking.algo.ts:264
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64,uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optInToAsset(uint64)void"
	method "updateParams(uint64,uint64,uint64)void"
	method "addRewards(axfer,uint64)void"
	method "addRewardsAlgo(pay,uint64)void"
	method "removeRewards(uint64)void"
	method "stake(axfer,uint64,uint64,uint64,uint64)void"
	method "unstake()void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsset *abi_route_updateParams *abi_route_addRewards *abi_route_addRewardsAlgo *abi_route_removeRewards *abi_route_stake *abi_route_unstake

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err