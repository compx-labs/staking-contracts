#pragma version 9

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,address)void
*abi_route_createApplication:
	// injectorAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (injectorAddress) for createApplication must be a address
	assert

	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (adminAddress) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	int 1
	return

// createApplication(adminAddress: Address, injectorAddress: Address): void
createApplication:
	proto 2 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:56
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:57
	// this.injectorAddress.value = injectorAddress
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	frame_dig -2 // injectorAddress: Address
	app_global_put
	retsub

// initApplication(uint64,uint64,uint64)void
*abi_route_initApplication:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute initApplication(uint64,uint64,uint64)void
	callsub initApplication
	int 1
	return

// initApplication(stakedAsset: uint64, rewardAssetId: uint64, minStakePeriodForRewards: uint64): void
initApplication:
	proto 3 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:65
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init application
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:67
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:68
	// this.rewardAssetId.value = rewardAssetId
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAssetId: uint64
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:69
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:70
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -3 // minStakePeriodForRewards: uint64
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:71
	// this.lastRewardInjectionTime.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	int 0
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:72
	// this.freeze.value = false
	byte 0x667265657a65 // "freeze"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:73
	// this.injectedASARewards.value = 0
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	int 0
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:74
	// this.numStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:75
	// this.algoInjectedRewards.value = 0
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	int 0
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:77
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(stakedAsset),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:78
	// xferAsset: AssetID.fromUint64(stakedAsset)
	frame_dig -1 // stakedAsset: uint64
	itxn_field XferAsset

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:79
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:80
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateMinStakePeriod(uint64)void
*abi_route_updateMinStakePeriod:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateMinStakePeriod(uint64)void
	callsub updateMinStakePeriod
	int 1
	return

// updateMinStakePeriod(minStakePeriodForRewards: uint64): void
updateMinStakePeriod:
	proto 1 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:86
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update min stake period')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update min stake period
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:87
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -1 // minStakePeriodForRewards: uint64
	app_global_put
	retsub

// updateAdminAddress(address)void
*abi_route_updateAdminAddress:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for updateAdminAddress must be a address
	assert

	// execute updateAdminAddress(address)void
	callsub updateAdminAddress
	int 1
	return

// updateAdminAddress(adminAddress: Address): void
updateAdminAddress:
	proto 1 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:90
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update admin address')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update admin address
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:91
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put
	retsub

// updateInjectedASARewards(uint64)void
*abi_route_updateInjectedASARewards:
	// injectedASARewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateInjectedASARewards(uint64)void
	callsub updateInjectedASARewards
	int 1
	return

// updateInjectedASARewards(injectedASARewards: uint64): void
updateInjectedASARewards:
	proto 1 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:94
	// assert(this.txn.sender === this.injectorAddress.value, 'Only admin can update injected rewards')
	txn Sender
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	app_global_get
	==

	// Only admin can update injected rewards
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:95
	// this.injectedASARewards.value = injectedASARewards
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	frame_dig -1 // injectedASARewards: uint64
	app_global_put
	retsub

// updateInjectedAlgoRewards(uint64)void
*abi_route_updateInjectedAlgoRewards:
	// injectedAlgoRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateInjectedAlgoRewards(uint64)void
	callsub updateInjectedAlgoRewards
	int 1
	return

// updateInjectedAlgoRewards(injectedAlgoRewards: uint64): void
updateInjectedAlgoRewards:
	proto 1 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:98
	// assert(this.txn.sender === this.injectorAddress.value, 'Only admin can update injected rewards')
	txn Sender
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	app_global_get
	==

	// Only admin can update injected rewards
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:99
	// this.algoInjectedRewards.value = injectedAlgoRewards
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	frame_dig -1 // injectedAlgoRewards: uint64
	app_global_put
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:106
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// getMBRForPoolCreation()(uint64)
*abi_route_getMBRForPoolCreation:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getMBRForPoolCreation()(uint64)
	callsub getMBRForPoolCreation
	concat
	log
	int 1
	return

// getMBRForPoolCreation(): mbrReturn
getMBRForPoolCreation:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:110
	// nonAlgoRewardMBR = 0
	int 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if0_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:111
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:112
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if0_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:114
	// mbr = ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	int 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	int 28007
	callsub costForBoxStorage
	+
	int 127
	callsub costForBoxStorage
	+
	frame_bury 1 // mbr: uint64

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:119
	// return {
	//       mbrPayment: mbr
	//     }
	frame_dig 1 // mbr: uint64
	itob

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:125
	// assert(!this.stakers.exists, 'staking pool already initialized')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:126
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init storage')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init storage
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:128
	// nonAlgoRewardMBR = 0
	int 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if1_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:129
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:130
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if1_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:132
	// poolMBR = ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	int 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	int 28007
	callsub costForBoxStorage
	+
	int 127
	callsub costForBoxStorage
	+
	frame_bury 1 // poolMBR: uint64

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:138
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: poolMBR })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 1 // poolMBR: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"poolMBR"}
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:139
	// this.stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 28000
	box_create
	pop

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:140
	// this.minimumBalance.value = poolMBR
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	frame_dig 1 // poolMBR: uint64
	app_global_put

	// *if2_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:142
	// nonAlgoRewardMBR > 0
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 0
	>
	bz *if2_end

	// *if2_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:144
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:145
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:146
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:147
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	retsub

// injectRewards(axfer,uint64,uint64)void
*abi_route_injectRewards:
	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 2 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64,uint64)void
	callsub injectRewards
	int 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64, rewardAssetId: uint64): void
injectRewards:
	proto 3 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:155
	// assert(this.txn.sender === this.injectorAddress.value, 'Only injector can inject rewards')
	txn Sender
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	app_global_get
	==

	// Only injector can inject rewards
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:157
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.injectorAddress.value,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(rewardAssetId),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.injectorAddress.value"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	frame_dig -3 // rewardAssetId: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(rewardAssetId)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:163
	// this.injectedASARewards.value += quantity
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	swap
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:164
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// injectAlgoRewards(pay,uint64)void
*abi_route_injectAlgoRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for injectAlgoRewards must be a pay transaction
	assert

	// execute injectAlgoRewards(pay,uint64)void
	callsub injectAlgoRewards
	int 1
	return

// injectAlgoRewards(payTxn: PayTxn, quantity: uint64): void
injectAlgoRewards:
	proto 2 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:168
	// assert(this.txn.sender === this.injectorAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x696e6a6563746f7241646472657373 // "injectorAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:170
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: quantity,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:175
	// this.algoInjectedRewards.value += quantity
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	swap
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:176
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:181
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:196
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:197
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// *if3_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:198
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if3_end

	// *if3_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:199
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if3_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:201
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:207
	// actionComplete: boolean = false
	int 0
	frame_bury 1 // actionComplete: boolean

	// *if4_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:208
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if4_end

	// *if4_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:209
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if4_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:211
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:211
	// i < this.stakers.value.length
	frame_dig 2 // i: uint64
	int 500
	<
	bz *for_0_end

	// *if5_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:212
	// actionComplete
	frame_dig 1 // actionComplete: boolean
	bz *if5_end

	// *if5_consequent
	b *for_0_end

*if5_end:
	// *if6_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:214
	// this.stakers.value[i].account === this.txn.sender
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	txn Sender
	==
	bz *if6_elseif1_condition

	// *if6_consequent
	// *if7_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:217
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if7_end

	// *if7_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:218
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if7_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:221
	// staker = clone(this.stakers.value[i])
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 3 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:222
	// staker.stake += stakeTxn.assetAmount
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	replace3
	frame_bury 3 // staker: (address,uint64,uint64,uint64)

	// *if8_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:224
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if8_end

	// *if8_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:225
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if8_end:
	// *if9_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:227
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if9_end

	// *if9_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:228
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if9_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:230
	// this.stakers.value[i] = staker
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 3 // staker: (address,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// *if10_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:231
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if10_end

	// *if10_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:232
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if10_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:234
	// this.totalStaked.value += stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:235
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean
	b *if6_end

*if6_elseif1_condition:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:237
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if6_end

	// *if6_elseif1_consequent
	// *if11_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:238
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if11_end

	// *if11_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:239
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if11_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:241
	// this.totalStaked.value = this.totalStaked.value + stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	app_global_put

	// *if12_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:242
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if12_end

	// *if12_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:243
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if12_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:245
	// this.stakers.value[i] = {
	//           account: this.txn.sender,
	//           stake: stakeTxn.assetAmount,
	//           algoAccruedRewards: 0,
	//           accruedASARewards: 0,
	//         }
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	txn Sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// *if13_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:251
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if13_end

	// *if13_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:252
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if13_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:254
	// this.numStakers.value = this.numStakers.value + 1
	byte 0x6e756d5374616b657273 // "numStakers"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// *if14_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:255
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if14_end

	// *if14_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:256
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if14_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:258
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean

*if6_end:
	// *if15_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:261
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if15_end

	// *if15_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:262
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if15_end:

*for_0_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:211
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:265
	// assert(actionComplete, 'Stake  failed')
	frame_dig 1 // actionComplete: boolean

	// Stake  failed
	assert
	retsub

// accrueRewards()void
*abi_route_accrueRewards:
	// execute accrueRewards()void
	callsub accrueRewards
	int 1
	return

// accrueRewards(): void
accrueRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:271
	// algoRewards = this.algoInjectedRewards.value
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	frame_bury 0 // algoRewards: uint64

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:273
	// additionalASARewards = this.injectedASARewards.value
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	app_global_get
	frame_bury 1 // additionalASARewards: uint64

	// *if16_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:274
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if16_end

	// *if16_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:275
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if16_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:279
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_1:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:279
	// i < this.numStakers.value
	frame_dig 2 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_1_end

	// *if17_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:280
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if17_end

	// *if17_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:281
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if17_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:283
	// stake = this.stakers.value[i].stake
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	frame_bury 3 // stake: uint64

	// *if18_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:285
	// stake > 0
	frame_dig 3 // stake: uint64
	int 0
	>
	bz *if18_end

	// *if18_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:286
	// staker = clone(this.stakers.value[i])
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 4 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:288
	// stakerShare = wideRatio([stake, PRECISION], [this.totalStaked.value])
	frame_dig 3 // stake: uint64
	int 1000000000000000
	mulw
	int 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 5 // stakerShare: uint64

	// *if19_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:290
	// algoRewards > this.numStakers.value
	frame_dig 0 // algoRewards: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	>
	bz *if19_end

	// *if19_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:291
	// algoRewardRate = wideRatio([algoRewards, stakerShare], [PRECISION])
	frame_dig 0 // algoRewards: uint64
	frame_dig 5 // stakerShare: uint64
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 6 // algoRewardRate: uint64

	// *if20_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:292
	// algoRewardRate === 0
	frame_dig 6 // algoRewardRate: uint64
	int 0
	==
	bz *if20_end

	// *if20_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:293
	// algoRewardRate = 1
	int 1
	frame_bury 6 // algoRewardRate: uint64

*if20_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:295
	// staker.algoAccruedRewards = staker.algoAccruedRewards + algoRewardRate
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	int 40 // headOffset
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 6 // algoRewardRate: uint64
	+
	itob
	replace3
	frame_bury 4 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:296
	// this.algoInjectedRewards.value = this.algoInjectedRewards.value - algoRewardRate
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	dup
	app_global_get
	frame_dig 6 // algoRewardRate: uint64
	-
	app_global_put

	// *if21_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:298
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if21_end

	// *if21_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:299
	// staker.stake = staker.stake + algoRewardRate
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 6 // algoRewardRate: uint64
	+
	itob
	replace3
	frame_bury 4 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:300
	// this.totalStaked.value = this.totalStaked.value + algoRewardRate
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 6 // algoRewardRate: uint64
	+
	app_global_put

*if21_end:

*if19_end:
	// *if22_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:304
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if22_end

	// *if22_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:305
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if22_end:
	// *if23_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:308
	// additionalASARewards > this.numStakers.value
	frame_dig 1 // additionalASARewards: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	>
	bz *if23_end

	// *if23_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:309
	// rewardRate = wideRatio([additionalASARewards, stakerShare], [PRECISION])
	frame_dig 1 // additionalASARewards: uint64
	frame_dig 5 // stakerShare: uint64
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // rewardRate: uint64

	// *if24_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:310
	// rewardRate === 0
	frame_dig 7 // rewardRate: uint64
	int 0
	==
	bz *if24_end

	// *if24_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:311
	// rewardRate = 1
	int 1
	frame_bury 7 // rewardRate: uint64

*if24_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:315
	// this.injectedASARewards.value = this.injectedASARewards.value - rewardRate
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	dup
	app_global_get
	frame_dig 7 // rewardRate: uint64
	-
	app_global_put

	// *if25_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:316
	// this.rewardAssetId.value === this.stakedAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==
	bz *if25_else

	// *if25_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:318
	// staker.stake = staker.stake + rewardRate
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 7 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 4 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:319
	// this.totalStaked.value = this.totalStaked.value + rewardRate
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 7 // rewardRate: uint64
	+
	app_global_put
	b *if25_end

*if25_else:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:321
	// staker.accruedASARewards = staker.accruedASARewards + rewardRate
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 7 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 4 // staker: (address,uint64,uint64,uint64)

*if25_end:

*if23_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:325
	// this.stakers.value[i] = staker
	frame_dig 2 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig 4 // staker: (address,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if18_end:

*for_1_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:279
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	retsub

// getStaker(address: Address): StakeInfo
getStaker:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:331
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:331
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_2_end

	// *if26_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:332
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if26_end

	// *if26_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:333
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if26_end:
	// *if27_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:335
	// this.stakers.value[i].account === address
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // address: Address
	==
	bz *if27_end

	// *if27_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:336
	// return clone(this.stakers.value[i]);
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	b *getStaker*return

*if27_end:

*for_2_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:331
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:339
	// return {
	//       account: globals.zeroAddress,
	//       stake: 0,
	//       algoAccruedRewards: 0,
	//       accruedASARewards: 0,
	//     }
	global ZeroAddress
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat

*getStaker*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// claimRewards()void
*abi_route_claimRewards:
	// execute claimRewards()void
	callsub claimRewards
	int 1
	return

// claimRewards(): void
claimRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if28_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:348
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if28_end

	// *if28_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:349
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if28_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:351
	// staker = this.getStaker(this.txn.sender)
	txn Sender
	callsub getStaker
	frame_bury 0 // staker: (address,uint64,uint64,uint64)

	// *if29_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:354
	// staker.algoAccruedRewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	int 0
	>
	bz *if29_end

	// *if29_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:355
	// sendPayment({
	//         amount: staker.algoAccruedRewards,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:356
	// amount: staker.algoAccruedRewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	itxn_field Amount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:357
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:358
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:359
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:361
	// staker.algoAccruedRewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 0 // staker: (address,uint64,uint64,uint64)

*if29_end:
	// *if30_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:365
	// staker.accruedASARewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	int 0
	>
	bz *if30_end

	// *if30_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:366
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: staker.accruedASARewards,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:367
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:368
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:369
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:370
	// assetAmount: staker.accruedASARewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:371
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:373
	// staker.accruedASARewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 0 // staker: (address,uint64,uint64,uint64)

*if30_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:376
	// this.setStaker(staker.account, staker)
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// *if31_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:377
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if31_end

	// *if31_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:378
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if31_end:
	retsub

// unstake(uint64)void
*abi_route_unstake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute unstake(uint64)void
	callsub unstake
	int 1
	return

// unstake(quantity: uint64): void
unstake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:383
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:383
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_3_end

	// *if32_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:384
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if32_end

	// *if32_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:385
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if32_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:387
	// staker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 56
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

	// *if33_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:388
	// staker.account === this.txn.sender
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	txn Sender
	==
	bz *if33_end

	// *if33_consequent
	// *if34_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:390
	// staker.stake > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	>
	bz *if34_end

	// *if34_consequent
	// *if35_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:391
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if35_else

	// *if35_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:392
	// sendPayment({
	//               amount: quantity === 0 ? staker.stake : quantity,
	//               receiver: this.txn.sender,
	//               sender: this.app.address,
	//               fee: 1_000,
	//             })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:393
	// amount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary0_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary0_end

*ternary0_false:
	frame_dig -1 // quantity: uint64

*ternary0_end:
	itxn_field Amount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:394
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:395
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:396
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if35_end

*if35_else:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:400
	// sendAssetTransfer({
	//               xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//               assetReceiver: this.txn.sender,
	//               sender: this.app.address,
	//               assetAmount: quantity === 0 ? staker.stake : quantity,
	//               fee: 1_000,
	//             })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:401
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:402
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:403
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:404
	// assetAmount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary1_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // quantity: uint64

*ternary1_end:
	itxn_field AssetAmount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:405
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if35_end:

*if34_end:
	// *if36_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:411
	// staker.algoAccruedRewards > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	int 0
	>
	bz *if36_end

	// *if36_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:412
	// sendPayment({
	//             amount: staker.algoAccruedRewards,
	//             receiver: this.txn.sender,
	//             sender: this.app.address,
	//             fee: 1_000,
	//           })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:413
	// amount: staker.algoAccruedRewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 40 8
	btoi
	itxn_field Amount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:414
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:415
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:416
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:418
	// staker.algoAccruedRewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

*if36_end:
	// *if37_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:422
	// staker.accruedASARewards > 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	int 0
	>
	bz *if37_end

	// *if37_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:423
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//             assetReceiver: this.txn.sender,
	//             sender: this.app.address,
	//             assetAmount: staker.accruedASARewards,
	//             fee: 1_000,
	//           })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:424
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:425
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:426
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:427
	// assetAmount: staker.accruedASARewards
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:428
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:430
	// staker.accruedASARewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

*if37_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:434
	// this.totalStaked.value = this.totalStaked.value - (quantity === 0 ? staker.stake : quantity)
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary3_false
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary3_end

*ternary3_false:
	frame_dig -1 // quantity: uint64

*ternary3_end:
	-
	app_global_put

	// *if38_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:436
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if38_end

	// *if38_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:437
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if38_end:
	// *if39_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:440
	// quantity === 0
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *if39_else

	// *if39_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:441
	// removedStaker: StakeInfo = {
	//             account: globals.zeroAddress,
	//             stake: 0,
	//             algoAccruedRewards: 0,
	//             accruedASARewards: 0,
	//           }
	global ZeroAddress
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_bury 2 // removedStaker: StakeInfo

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:447
	// this.setStaker(staker.account, removedStaker)
	frame_dig 2 // removedStaker: StakeInfo
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:449
	// lastStaker = this.getStaker(this.stakers.value[this.numStakers.value - 1].account)
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	callsub getStaker
	frame_bury 3 // lastStaker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:450
	// lastStakerIndex = this.getStakerIndex(this.stakers.value[this.numStakers.value - 1].account)
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 1
	-
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	callsub getStakerIndex
	frame_bury 4 // lastStakerIndex: uint64

	// *if40_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:451
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if40_end

	// *if40_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:452
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if40_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:454
	// this.setStakerAtIndex(lastStaker, i)
	frame_dig 0 // i: uint64
	frame_dig 3 // lastStaker: (address,uint64,uint64,uint64)
	callsub setStakerAtIndex

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:456
	// this.setStakerAtIndex(removedStaker, lastStakerIndex)
	frame_dig 4 // lastStakerIndex: uint64
	frame_dig 2 // removedStaker: StakeInfo
	callsub setStakerAtIndex

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:457
	// this.numStakers.value = this.numStakers.value - 1
	byte 0x6e756d5374616b657273 // "numStakers"
	dup
	app_global_get
	int 1
	-
	app_global_put
	b *if39_end

*if39_else:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:460
	// staker.stake = staker.stake - quantity
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // quantity: uint64
	-
	itob
	replace3
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:461
	// staker.accruedASARewards = 0
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 48
	frame_bury 1 // staker: (address,uint64,uint64,uint64)

*if39_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:463
	// this.setStaker(staker.account, staker)
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	frame_dig 1 // staker: (address,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

*if33_end:

*for_3_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:383
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	retsub

// getStakerIndex(address: Address): uint64
getStakerIndex:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:469
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:469
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_4_end

	// *if41_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:470
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if41_end

	// *if41_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:471
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if41_end:
	// *if42_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:473
	// this.stakers.value[i].account === address
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // address: Address
	==
	bz *if42_end

	// *if42_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:474
	// return i;
	frame_dig 0 // i: uint64
	b *getStakerIndex*return

*if42_end:

*for_4_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:469
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:477
	// return 0;
	int 0

*getStakerIndex*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// setStaker(stakerAccount: Address, staker: StakeInfo): void
setStaker:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:481
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_5:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:481
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_5_end

	// *if43_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:482
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if43_end

	// *if43_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:483
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if43_end:
	// *if44_condition
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:485
	// this.stakers.value[i].account === stakerAccount
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // stakerAccount: Address
	==
	bz *if44_elseif1_condition

	// *if44_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:486
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig -2 // staker: StakeInfo
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:487
	// return;
	retsub
	b *if44_end

*if44_elseif1_condition:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:488
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if44_end

	// *if44_elseif1_consequent
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:489
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 56
	* // acc * typeLength
	frame_dig -2 // staker: StakeInfo
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:490
	// return;
	retsub

*if44_end:

*for_5_continue:
	// contracts/PermissionlessInjectedRewardsPool.algo.ts:481
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_5

*for_5_end:
	retsub

// setStakerAtIndex(staker: StakeInfo, index: uint64): void
setStakerAtIndex:
	proto 2 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:495
	// this.stakers.value[index] = staker
	frame_dig -2 // index: uint64
	int 56
	* // acc * typeLength
	frame_dig -1 // staker: StakeInfo
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace
	retsub

// setFreeze(bool)void
*abi_route_setFreeze:
	// enabled: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==

	// argument 0 (enabled) for setFreeze must be a bool
	assert
	int 0
	getbit

	// execute setFreeze(bool)void
	callsub setFreeze
	int 1
	return

// setFreeze(enabled: boolean): void
setFreeze:
	proto 1 0

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:499
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can freeze payouts')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can freeze payouts
	assert

	// contracts/PermissionlessInjectedRewardsPool.algo.ts:500
	// this.freeze.value = enabled
	byte 0x667265657a65 // "freeze"
	frame_dig -1 // enabled: boolean
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
gas:
	proto 0 0
	retsub

*create_NoOp:
	method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "initApplication(uint64,uint64,uint64)void"
	method "updateMinStakePeriod(uint64)void"
	method "updateAdminAddress(address)void"
	method "updateInjectedASARewards(uint64)void"
	method "updateInjectedAlgoRewards(uint64)void"
	method "getMBRForPoolCreation()(uint64)"
	method "initStorage(pay)void"
	method "injectRewards(axfer,uint64,uint64)void"
	method "injectAlgoRewards(pay,uint64)void"
	method "stake(axfer,uint64)void"
	method "accrueRewards()void"
	method "claimRewards()void"
	method "unstake(uint64)void"
	method "setFreeze(bool)void"
	method "gas()void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_updateMinStakePeriod *abi_route_updateAdminAddress *abi_route_updateInjectedASARewards *abi_route_updateInjectedAlgoRewards *abi_route_getMBRForPoolCreation *abi_route_initStorage *abi_route_injectRewards *abi_route_injectAlgoRewards *abi_route_stake *abi_route_accrueRewards *abi_route_claimRewards *abi_route_unstake *abi_route_setFreeze *abi_route_gas

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err