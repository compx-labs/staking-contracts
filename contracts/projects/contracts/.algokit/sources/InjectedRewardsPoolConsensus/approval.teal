#pragma version 10

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,address,address)void
*abi_route_createApplication:
	// migrationAdmin: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (migrationAdmin) for createApplication must be a address
	assert

	// treasuryAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (treasuryAddress) for createApplication must be a address
	assert

	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (adminAddress) for createApplication must be a address
	assert

	// execute createApplication(address,address,address)void
	callsub createApplication
	int 1
	return

// createApplication(adminAddress: Address, treasuryAddress: Address, migrationAdmin: Address): void
createApplication:
	proto 3 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:59
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:60
	// this.treasuryAddress.value = treasuryAddress
	byte 0x747265617375727941646472657373 // "treasuryAddress"
	frame_dig -2 // treasuryAddress: Address
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:61
	// this.migrationAdmin.value = migrationAdmin
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	frame_dig -3 // migrationAdmin: Address
	app_global_put
	retsub

// initApplication(uint64,uint64,pay)void
*abi_route_initApplication:
	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (payTxn) for initApplication must be a pay transaction
	assert

	// commision: uint64
	txna ApplicationArgs 2
	btoi

	// lstTokenId: uint64
	txna ApplicationArgs 1
	btoi

	// execute initApplication(uint64,uint64,pay)void
	callsub initApplication
	int 1
	return

// initApplication(lstTokenId: uint64, commision: uint64, payTxn: PayTxn): void
initApplication:
	proto 3 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:74
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init application
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:75
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:76
	// this.lstTokenId.value = lstTokenId
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	frame_dig -1 // lstTokenId: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:77
	// this.lstBalance.value = 0
	byte 0x6c737442616c616e6365 // "lstBalance"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:78
	// this.circulatingLST.value = 0
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:79
	// this.minimumBalance.value = payTxn.amount
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	frame_dig -3 // payTxn: PayTxn
	gtxns Amount
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:80
	// this.commisionPercentage.value = commision
	byte 0x636f6d6d6973696f6e50657263656e74616765 // "commisionPercentage"
	frame_dig -2 // commision: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:81
	// this.totalConsensusRewards.value = 0
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:82
	// this.commisionAmount.value = 0
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:83
	// this.maxStake.value = 69999999000000
	byte 0x6d61785374616b65 // "maxStake"
	int 69999999000000
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:84
	// this.stakedAssetId.value = 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	int 0
	app_global_put

	// *if0_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:86
	// this.lstTokenId.value !== 0
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	int 0
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:87
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:88
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:89
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:90
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// updateAdminAddress(address)void
*abi_route_updateAdminAddress:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for updateAdminAddress must be a address
	assert

	// execute updateAdminAddress(address)void
	callsub updateAdminAddress
	int 1
	return

// updateAdminAddress(adminAddress: Address): void
updateAdminAddress:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:99
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update admin address')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update admin address
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:100
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put
	retsub

// updateMigrationAdmin(address)void
*abi_route_updateMigrationAdmin:
	// migrationAdmin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (migrationAdmin) for updateMigrationAdmin must be a address
	assert

	// execute updateMigrationAdmin(address)void
	callsub updateMigrationAdmin
	int 1
	return

// updateMigrationAdmin(migrationAdmin: Address): void
updateMigrationAdmin:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:104
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update migration admin address')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update migration admin address
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:105
	// this.migrationAdmin.value = migrationAdmin
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	frame_dig -1 // migrationAdmin: Address
	app_global_put
	retsub

// updateMaxStake(uint64)void
*abi_route_updateMaxStake:
	// maxStake: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateMaxStake(uint64)void
	callsub updateMaxStake
	int 1
	return

// updateMaxStake(maxStake: uint64): void
updateMaxStake:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:109
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update max stake')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update max stake
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:110
	// this.maxStake.value = maxStake
	byte 0x6d61785374616b65 // "maxStake"
	frame_dig -1 // maxStake: uint64
	app_global_put
	retsub

// updateTreasuryAddress(address)void
*abi_route_updateTreasuryAddress:
	// treasuryAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (treasuryAddress) for updateTreasuryAddress must be a address
	assert

	// execute updateTreasuryAddress(address)void
	callsub updateTreasuryAddress
	int 1
	return

// updateTreasuryAddress(treasuryAddress: Address): void
updateTreasuryAddress:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:114
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update treasury address')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update treasury address
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:115
	// this.treasuryAddress.value = treasuryAddress
	byte 0x747265617375727941646472657373 // "treasuryAddress"
	frame_dig -1 // treasuryAddress: Address
	app_global_put
	retsub

// updateCommision(uint64)void
*abi_route_updateCommision:
	// commision: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateCommision(uint64)void
	callsub updateCommision
	int 1
	return

// updateCommision(commision: uint64): void
updateCommision:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:119
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update commision')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update commision
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:120
	// this.commisionPercentage.value = commision
	byte 0x636f6d6d6973696f6e50657263656e74616765 // "commisionPercentage"
	frame_dig -1 // commision: uint64
	app_global_put
	retsub

// updateCommisionAmount(uint64)void
*abi_route_updateCommisionAmount:
	// commisionAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateCommisionAmount(uint64)void
	callsub updateCommisionAmount
	int 1
	return

// updateCommisionAmount(commisionAmount: uint64): void
updateCommisionAmount:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:124
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update commision amount')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update commision amount
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:125
	// this.commisionAmount.value = commisionAmount
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	frame_dig -1 // commisionAmount: uint64
	app_global_put
	retsub

// updateConsenusRewards(uint64)void
*abi_route_updateConsenusRewards:
	// totalConsensusRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateConsenusRewards(uint64)void
	callsub updateConsenusRewards
	int 1
	return

// updateConsenusRewards(totalConsensusRewards: uint64): void
updateConsenusRewards:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:129
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update rewards
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:130
	// this.totalConsensusRewards.value = totalConsensusRewards
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	frame_dig -1 // totalConsensusRewards: uint64
	app_global_put
	retsub

// updateMinimumBalance(uint64)void
*abi_route_updateMinimumBalance:
	// minimumBalance: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateMinimumBalance(uint64)void
	callsub updateMinimumBalance
	int 1
	return

// updateMinimumBalance(minimumBalance: uint64): void
updateMinimumBalance:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:134
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update minimum balance')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update minimum balance
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:135
	// this.minimumBalance.value = minimumBalance
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	frame_dig -1 // minimumBalance: uint64
	app_global_put
	retsub

// optInToToken(pay,uint64)void
*abi_route_optInToToken:
	// tokenId: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for optInToToken must be a pay transaction
	assert

	// execute optInToToken(pay,uint64)void
	callsub optInToToken
	int 1
	return

// optInToToken(payTxn: PayTxn, tokenId: uint64): void
optInToToken:
	proto 2 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:139
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can opt in to token')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can opt in to token
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:141
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: 110000,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	int 110000
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"110000"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:146
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(tokenId),
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:147
	// xferAsset: AssetID.fromUint64(tokenId)
	frame_dig -2 // tokenId: uint64
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:148
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:149
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// payCommision(pay)void
*abi_route_payCommision:
	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (payTxn) for payCommision must be a pay transaction
	assert

	// execute payCommision(pay)void
	callsub payCommision
	int 1
	return

// payCommision(payTxn: PayTxn): void
payCommision:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:154
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can pay commision')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can pay commision
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:155
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: 1000,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	int 1000
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"1000"}
	assert

	// *if1_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:159
	// this.commisionAmount.value > 0
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	int 0
	>
	bz *if1_end

	// *if1_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:160
	// sendPayment({
	//         amount: this.commisionAmount.value,
	//         receiver: this.treasuryAddress.value,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:161
	// amount: this.commisionAmount.value
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:162
	// receiver: this.treasuryAddress.value
	byte 0x747265617375727941646472657373 // "treasuryAddress"
	app_global_get
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:163
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:164
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:166
	// this.commisionAmount.value = 0
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	int 0
	app_global_put

*if1_end:
	retsub

// getGoOnlineFee(): uint64
getGoOnlineFee:
	proto 0 1

	// contracts/InjectedRewardsPoolConsensus.algo.ts:175
	// return 2_000_000;
	int 2_000_000
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:187
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can go online')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can go online
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:189
	// extraFee = this.getGoOnlineFee()
	callsub getGoOnlineFee
	frame_bury 0 // extraFee: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:190
	// verifyPayTxn(feePayment, {
	//       receiver: this.app.address,
	//       amount: extraFee,
	//     })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:194
	// sendOnlineKeyRegistration({
	//       votePK: votePK,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: extraFee,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:195
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:196
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:197
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:198
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/InjectedRewardsPoolConsensus.algo.ts:199
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts/InjectedRewardsPoolConsensus.algo.ts:200
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts/InjectedRewardsPoolConsensus.algo.ts:201
	// fee: extraFee
	frame_dig 0 // extraFee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
goOffline:
	proto 0 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:206
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can go offline')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can go offline
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:207
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string,uint64)void
*abi_route_linkToNFD:
	// nfdRegistryAppId: uint64
	txna ApplicationArgs 3
	btoi

	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string,uint64)void
	callsub linkToNFD
	int 1
	return

// linkToNFD(nfdAppId: uint64, nfdName: string, nfdRegistryAppId: uint64): void
linkToNFD:
	proto 3 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:211
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can link to NFD')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can link to NFD
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:213
	// sendAppCall({
	//       applicationID: AppID.fromUint64(nfdRegistryAppId),
	//       applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)],
	//       applications: [AppID.fromUint64(nfdAppId)],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:214
	// applicationID: AppID.fromUint64(nfdRegistryAppId)
	frame_dig -3 // nfdRegistryAppId: uint64
	itxn_field ApplicationID

	// contracts/InjectedRewardsPoolConsensus.algo.ts:215
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)]
	byte 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppId: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// contracts/InjectedRewardsPoolConsensus.algo.ts:216
	// applications: [AppID.fromUint64(nfdAppId)]
	frame_dig -1 // nfdAppId: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addLST(axfer,uint64)void
*abi_route_addLST:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// axferTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (axferTxn) for addLST must be a axfer transaction
	assert

	// execute addLST(axfer,uint64)void
	callsub addLST
	int 1
	return

// addLST(axferTxn: AssetTransferTxn, quantity: uint64): void
addLST:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:221
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can send LST')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can send LST
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:222
	// lstTokenId = this.lstTokenId.value
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	frame_bury 0 // lstTokenId: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:224
	// verifyAssetTransferTxn(axferTxn, {
	//       assetAmount: quantity,
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender,
	//       xferAsset: AssetID.fromUint64(lstTokenId),
	//     })
	// verify assetAmount
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetAmount","expected":"quantity"}
	assert

	// verify assetReceiver
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"axferTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify xferAsset
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns XferAsset
	frame_dig 0 // lstTokenId: uint64
	==

	// transaction verification failed: {"txn":"axferTxn","field":"xferAsset","expected":"AssetID.fromUint64(lstTokenId)"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:230
	// this.lstBalance.value = this.lstBalance.value + quantity
	byte 0x6c737442616c616e6365 // "lstBalance"
	dup
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	app_global_put
	retsub

// removeLST(uint64)void
*abi_route_removeLST:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute removeLST(uint64)void
	callsub removeLST
	int 1
	return

// removeLST(quantity: uint64): void
removeLST:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:234
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can remove LST')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can remove LST
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:235
	// assert(this.lstBalance.value >= quantity, 'Invalid quantity')
	byte 0x6c737442616c616e6365 // "lstBalance"
	app_global_get
	frame_dig -1 // quantity: uint64
	>=

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:236
	// amountToRemove = quantity
	frame_dig -1 // quantity: uint64
	frame_bury 0 // amountToRemove: uint64

	// *if2_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:237
	// amountToRemove === 0
	frame_dig 0 // amountToRemove: uint64
	int 0
	==
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:238
	// amountToRemove = this.lstBalance.value
	byte 0x6c737442616c616e6365 // "lstBalance"
	app_global_get
	frame_bury 0 // amountToRemove: uint64

*if2_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:240
	// sendAssetTransfer({
	//       assetAmount: amountToRemove,
	//       assetReceiver: this.adminAddress.value,
	//       sender: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:241
	// assetAmount: amountToRemove
	frame_dig 0 // amountToRemove: uint64
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:242
	// assetReceiver: this.adminAddress.value
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:243
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:244
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:246
	// this.lstBalance.value = this.lstBalance.value - amountToRemove
	byte 0x6c737442616c616e6365 // "lstBalance"
	dup
	app_global_get
	frame_dig 0 // amountToRemove: uint64
	-
	app_global_put
	retsub

// pickupAlgoRewards()void
*abi_route_pickupAlgoRewards:
	// execute pickupAlgoRewards()void
	callsub pickupAlgoRewards
	int 1
	return

// pickupAlgoRewards(): void
pickupAlgoRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPoolConsensus.algo.ts:250
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can pickup rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can pickup rewards
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:254
	// amount =
	//       this.app.address.balance -
	//       this.minimumBalance.value -
	//       this.totalConsensusRewards.value -
	//       this.totalStaked.value -
	//       this.commisionAmount.value
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	app_global_get
	-
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	-
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	-
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	-
	frame_bury 0 // amount: uint64

	// *if3_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:261
	// amount > MINIMUM_ALGO_REWARD
	frame_dig 0 // amount: uint64
	int 1000000
	>
	bz *if3_end

	// *if3_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:262
	// newCommisionPayment = this.commisionAmount.value + (amount / 100) * this.commisionPercentage.value
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	frame_dig 0 // amount: uint64
	int 100
	/
	byte 0x636f6d6d6973696f6e50657263656e74616765 // "commisionPercentage"
	app_global_get
	*
	+
	frame_bury 1 // newCommisionPayment: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:263
	// amount = amount - newCommisionPayment
	frame_dig 0 // amount: uint64
	frame_dig 1 // newCommisionPayment: uint64
	-
	frame_bury 0 // amount: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:264
	// this.commisionAmount.value = this.commisionAmount.value + newCommisionPayment
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	dup
	app_global_get
	frame_dig 1 // newCommisionPayment: uint64
	+
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:265
	// this.totalConsensusRewards.value += amount
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	frame_dig 0 // amount: uint64
	+
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	swap
	app_global_put

*if3_end:
	retsub

// mintLST(stake: uint64, mintQuantity: uint64, payTxn: PayTxn, userAddress: Address): void
mintLST:
	proto 4 0

	// *if4_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:270
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if4_end

	// *if4_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:271
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if4_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:274
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: minPayment + stake,
	//     })
	// verify receiver
	frame_dig -3 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -3 // payTxn: PayTxn
	gtxns Amount
	int 1000
	frame_dig -1 // stake: uint64
	+
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"minPayment + stake"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:279
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//       assetReceiver: userAddress,
	//       sender: this.app.address,
	//       assetAmount: mintQuantity,
	//       fee: 1_000,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:280
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:281
	// assetReceiver: userAddress
	frame_dig -4 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:282
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:283
	// assetAmount: mintQuantity
	frame_dig -2 // mintQuantity: uint64
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:284
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if5_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:286
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if5_end

	// *if5_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:287
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if5_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:290
	// this.lstBalance.value = this.lstBalance.value - mintQuantity
	byte 0x6c737442616c616e6365 // "lstBalance"
	dup
	app_global_get
	frame_dig -2 // mintQuantity: uint64
	-
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:291
	// this.circulatingLST.value = this.circulatingLST.value + mintQuantity
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	dup
	app_global_get
	frame_dig -2 // mintQuantity: uint64
	+
	app_global_put

	// *if6_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:292
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if6_end

	// *if6_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:293
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if6_end:
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:298
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:299
	// sendAssetTransfer({
	//       assetCloseTo: this.adminAddress.value,
	//       assetReceiver: this.adminAddress.value,
	//       sender: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//       assetAmount: this.lstBalance.value,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:300
	// assetCloseTo: this.adminAddress.value
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	itxn_field AssetCloseTo

	// contracts/InjectedRewardsPoolConsensus.algo.ts:301
	// assetReceiver: this.adminAddress.value
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:302
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:303
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:304
	// assetAmount: this.lstBalance.value
	byte 0x6c737442616c616e6365 // "lstBalance"
	app_global_get
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// stake(pay,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for stake must be a pay transaction
	assert

	// execute stake(pay,uint64)void
	callsub stake
	int 1
	return

// stake(payTxn: PayTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/InjectedRewardsPoolConsensus.algo.ts:314
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:315
	// assert(this.totalStaked.value + quantity <= this.maxStake.value, 'Max stake reached')
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x6d61785374616b65 // "maxStake"
	app_global_get
	<=

	// Max stake reached
	assert

	// *if7_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:316
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if7_end

	// *if7_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:317
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if7_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:320
	// verifyPayTxn(payTxn, {
	//       sender: this.txn.sender,
	//       amount: quantity + 1000,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // payTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"payTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	int 1000
	+
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity + 1000"}
	assert

	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:326
	// lstRatio = 0
	int 0
	frame_bury 0 // lstRatio: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:327
	// lstDue = 0
	int 0
	frame_bury 1 // lstDue: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:328
	// nodeAlgo = this.totalStaked.value + this.totalConsensusRewards.value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	+
	frame_bury 2 // nodeAlgo: uint64

	// *if8_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:329
	// nodeAlgo === 0
	frame_dig 2 // nodeAlgo: uint64
	int 0
	==
	bz *if8_else

	// *if8_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:330
	// lstDue = quantity
	frame_dig -2 // quantity: uint64
	frame_bury 1 // lstDue: uint64
	b *if8_end

*if8_else:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:332
	// lstRatio = wideRatio([this.circulatingLST.value, 10000], [nodeAlgo])
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	app_global_get
	int 10000
	mulw
	int 0
	frame_dig 2 // nodeAlgo: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // lstRatio: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:333
	// lstDue = wideRatio([lstRatio, quantity], [10000])
	frame_dig 0 // lstRatio: uint64
	frame_dig -2 // quantity: uint64
	mulw
	int 0
	int 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // lstDue: uint64

*if8_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:335
	// this.mintLST(quantity, lstDue, payTxn, this.txn.sender)
	txn Sender
	frame_dig -1 // payTxn: PayTxn
	frame_dig 1 // lstDue: uint64
	frame_dig -2 // quantity: uint64
	callsub mintLST

	// contracts/InjectedRewardsPoolConsensus.algo.ts:337
	// this.totalStaked.value = this.totalStaked.value + quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	app_global_put
	retsub

// burnLST(axfer,pay,uint64,address)void
*abi_route_burnLST:
	// userAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (userAddress) for burnLST must be a address
	assert

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 2 (payTxn) for burnLST must be a pay transaction
	assert

	// axferTxn: axfer
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 3 (axferTxn) for burnLST must be a axfer transaction
	assert

	// execute burnLST(axfer,pay,uint64,address)void
	callsub burnLST
	int 1
	return

// burnLST(axferTxn: AssetTransferTxn, payTxn: PayTxn, quantity: uint64, userAddress: Address): void
burnLST:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/InjectedRewardsPoolConsensus.algo.ts:344
	// verifyAssetTransferTxn(axferTxn, {
	//       assetAmount: quantity,
	//       assetReceiver: this.app.address,
	//       sender: userAddress,
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//     })
	// verify assetAmount
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -3 // quantity: uint64
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetAmount","expected":"quantity"}
	assert

	// verify assetReceiver
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns Sender
	frame_dig -4 // userAddress: Address
	==

	// transaction verification failed: {"txn":"axferTxn","field":"sender","expected":"userAddress"}
	assert

	// verify xferAsset
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	==

	// transaction verification failed: {"txn":"axferTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.lstTokenId.value)"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:350
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: 1_000,
	//     })
	// verify receiver
	frame_dig -2 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -2 // payTxn: PayTxn
	gtxns Amount
	int 1_000
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"1_000"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:355
	// assert(this.circulatingLST.value >= quantity, 'Invalid quantity')
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	app_global_get
	frame_dig -3 // quantity: uint64
	>=

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:357
	// nodeAlgo = this.totalStaked.value + this.totalConsensusRewards.value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	+
	frame_bury 0 // nodeAlgo: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:358
	// lstRatio = wideRatio([nodeAlgo, 10000], [this.circulatingLST.value])
	frame_dig 0 // nodeAlgo: uint64
	int 10000
	mulw
	int 0
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	app_global_get
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // lstRatio: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:359
	// stakeTokenDue = wideRatio([lstRatio, quantity], [10000])
	frame_dig 1 // lstRatio: uint64
	frame_dig -3 // quantity: uint64
	mulw
	int 0
	int 10000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 2 // stakeTokenDue: uint64

	// *if9_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:361
	// stakeTokenDue < this.app.address.balance
	frame_dig 2 // stakeTokenDue: uint64
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	<
	bz *if9_end

	// *if9_consequent
	// *if10_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:362
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if10_else

	// *if10_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:363
	// sendPayment({
	//           amount: stakeTokenDue,
	//           receiver: userAddress,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:364
	// amount: stakeTokenDue
	frame_dig 2 // stakeTokenDue: uint64
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:365
	// receiver: userAddress
	frame_dig -4 // userAddress: Address
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:366
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:367
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if10_end

*if10_else:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:370
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: userAddress,
	//           sender: this.app.address,
	//           assetAmount: stakeTokenDue,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:371
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:372
	// assetReceiver: userAddress
	frame_dig -4 // userAddress: Address
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:373
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:374
	// assetAmount: stakeTokenDue
	frame_dig 2 // stakeTokenDue: uint64
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:375
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if10_end:

*if9_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:379
	// this.lstBalance.value = this.lstBalance.value + quantity
	byte 0x6c737442616c616e6365 // "lstBalance"
	dup
	app_global_get
	frame_dig -3 // quantity: uint64
	+
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:380
	// this.circulatingLST.value = this.circulatingLST.value - quantity
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	dup
	app_global_get
	frame_dig -3 // quantity: uint64
	-
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:381
	// this.totalStaked.value = this.totalStaked.value - quantity
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -3 // quantity: uint64
	-
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:382
	// this.totalConsensusRewards.value = this.totalConsensusRewards.value - (stakeTokenDue - quantity)
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	dup
	app_global_get
	frame_dig 2 // stakeTokenDue: uint64
	frame_dig -3 // quantity: uint64
	-
	-
	app_global_put
	retsub

// acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void
*abi_route_acceptMigration:
	// commisionAmount: uint64
	txna ApplicationArgs 5
	btoi

	// totalConsensusRewards: uint64
	txna ApplicationArgs 4
	btoi

	// circulatingLST: uint64
	txna ApplicationArgs 3
	btoi

	// totalStaked: uint64
	txna ApplicationArgs 2
	btoi

	// lstBalance: uint64
	txna ApplicationArgs 1
	btoi

	// lstTransfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 5 (lstTransfer) for acceptMigration must be a axfer transaction
	assert

	// algoTransfer: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 6 (algoTransfer) for acceptMigration must be a pay transaction
	assert

	// execute acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void
	callsub acceptMigration
	int 1
	return

// acceptMigration(algoTransfer: PayTxn, lstTransfer: AssetTransferTxn, lstBalance: uint64, totalStaked: uint64, circulatingLST: uint64, totalConsensusRewards: uint64, commisionAmount: uint64): void
acceptMigration:
	proto 7 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:396
	// verifyPayTxn(algoTransfer, {
	//       receiver: this.app.address,
	//       sender: this.adminAddress.value,
	//     })
	// verify receiver
	frame_dig -1 // algoTransfer: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"algoTransfer","field":"receiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -1 // algoTransfer: PayTxn
	gtxns Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"algoTransfer","field":"sender","expected":"this.adminAddress.value"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:400
	// verifyAssetTransferTxn(lstTransfer, {
	//       assetReceiver: this.app.address,
	//       sender: this.adminAddress.value,
	//     })
	// verify assetReceiver
	frame_dig -2 // lstTransfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"lstTransfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -2 // lstTransfer: AssetTransferTxn
	gtxns Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"lstTransfer","field":"sender","expected":"this.adminAddress.value"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:404
	// this.lstBalance.value = lstBalance
	byte 0x6c737442616c616e6365 // "lstBalance"
	frame_dig -3 // lstBalance: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:405
	// this.totalStaked.value = totalStaked
	byte 0x746f74616c5374616b6564 // "totalStaked"
	frame_dig -4 // totalStaked: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:406
	// this.circulatingLST.value = circulatingLST
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	frame_dig -5 // circulatingLST: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:407
	// this.totalConsensusRewards.value = totalConsensusRewards
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	frame_dig -6 // totalConsensusRewards: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:408
	// this.commisionAmount.value = commisionAmount
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	frame_dig -7 // commisionAmount: uint64
	app_global_put
	retsub

// migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)
*abi_route_migrateContract:
	// The ABI return prefix
	byte 0x151f7c75

	// mbrTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrTxn) for migrateContract must be a pay transaction
	assert

	// execute migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)
	callsub migrateContract
	concat
	log
	int 1
	return

// migrateContract(mbrTxn: PayTxn): MigrationParams
migrateContract:
	proto 1 1

	// contracts/InjectedRewardsPoolConsensus.algo.ts:413
	// assert(this.txn.sender === this.migrationAdmin.value, 'Only admin can migrate contract')
	txn Sender
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	app_global_get
	==

	// Only admin can migrate contract
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:415
	// this.goOffline()
	callsub goOffline

	// contracts/InjectedRewardsPoolConsensus.algo.ts:417
	// verifyPayTxn(mbrTxn, {
	//       sender: this.migrationAdmin.value,
	//       amount: 1_000_000,
	//     })
	// verify sender
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Sender
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	app_global_get
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"sender","expected":"this.migrationAdmin.value"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	int 1_000_000
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"1_000_000"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:422
	// sendPayment({
	//       amount: this.totalStaked.value + this.totalConsensusRewards.value + this.commisionAmount.value,
	//       receiver: this.migrationAdmin.value,
	//       sender: this.app.address,
	//       fee: 1_000,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:423
	// amount: this.totalStaked.value + this.totalConsensusRewards.value + this.commisionAmount.value
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	+
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	+
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:424
	// receiver: this.migrationAdmin.value
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	app_global_get
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:425
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:426
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:428
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//       assetReceiver: this.migrationAdmin.value,
	//       sender: this.app.address,
	//       assetAmount: this.lstBalance.value,
	//       fee: 1_000,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:429
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:430
	// assetReceiver: this.migrationAdmin.value
	byte 0x6d6967726174696f6e41646d696e // "migrationAdmin"
	app_global_get
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:431
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:432
	// assetAmount: this.lstBalance.value
	byte 0x6c737442616c616e6365 // "lstBalance"
	app_global_get
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:433
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:436
	// return {
	//       lstBalance: this.lstBalance.value,
	//       totalStaked: this.totalStaked.value,
	//       circulatingLST: this.circulatingLST.value,
	//       totalConsensusRewards: this.totalConsensusRewards.value,
	//       commisionAmount: this.commisionAmount.value,
	//     };
	byte 0x6c737442616c616e6365 // "lstBalance"
	app_global_get
	itob
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	itob
	concat
	byte 0x63697263756c6174696e674c5354 // "circulatingLST"
	app_global_get
	itob
	concat
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	itob
	concat
	byte 0x636f6d6d6973696f6e416d6f756e74 // "commisionAmount"
	app_global_get
	itob
	concat
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
gas:
	proto 0 0
	retsub

*create_NoOp:
	method "createApplication(address,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "initApplication(uint64,uint64,pay)void"
	method "updateAdminAddress(address)void"
	method "updateMigrationAdmin(address)void"
	method "updateMaxStake(uint64)void"
	method "updateTreasuryAddress(address)void"
	method "updateCommision(uint64)void"
	method "updateCommisionAmount(uint64)void"
	method "updateConsenusRewards(uint64)void"
	method "updateMinimumBalance(uint64)void"
	method "optInToToken(pay,uint64)void"
	method "payCommision(pay)void"
	method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	method "linkToNFD(uint64,string,uint64)void"
	method "addLST(axfer,uint64)void"
	method "removeLST(uint64)void"
	method "pickupAlgoRewards()void"
	method "stake(pay,uint64)void"
	method "burnLST(axfer,pay,uint64,address)void"
	method "acceptMigration(pay,axfer,uint64,uint64,uint64,uint64,uint64)void"
	method "migrateContract(pay)(uint64,uint64,uint64,uint64,uint64)"
	method "gas()void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_updateAdminAddress *abi_route_updateMigrationAdmin *abi_route_updateMaxStake *abi_route_updateTreasuryAddress *abi_route_updateCommision *abi_route_updateCommisionAmount *abi_route_updateConsenusRewards *abi_route_updateMinimumBalance *abi_route_optInToToken *abi_route_payCommision *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD *abi_route_addLST *abi_route_removeLST *abi_route_pickupAlgoRewards *abi_route_stake *abi_route_burnLST *abi_route_acceptMigration *abi_route_migrateContract *abi_route_gas

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err