#pragma version 10

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	int 1
	return

// createApplication(adminAddress: Address): void
createApplication:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:63
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put
	retsub

// initApplication(uint64,uint64,uint64,uint64)void
*abi_route_initApplication:
	// lstTokenId: uint64
	txna ApplicationArgs 4
	btoi

	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 3
	btoi

	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// stakedAsset: uint64
	txna ApplicationArgs 1
	btoi

	// execute initApplication(uint64,uint64,uint64,uint64)void
	callsub initApplication
	int 1
	return

// initApplication(stakedAsset: uint64, rewardAssetId: uint64, minStakePeriodForRewards: uint64, lstTokenId: uint64): void
initApplication:
	proto 4 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:72
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init application
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:74
	// this.stakedAssetId.value = stakedAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	frame_dig -1 // stakedAsset: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:75
	// this.rewardAssetId.value = rewardAssetId
	byte 0x72657761726441737365744964 // "rewardAssetId"
	frame_dig -2 // rewardAssetId: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:76
	// this.totalStaked.value = 0
	byte 0x746f74616c5374616b6564 // "totalStaked"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:77
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -3 // minStakePeriodForRewards: uint64
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:78
	// this.lastRewardInjectionTime.value = 0
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:79
	// this.freeze.value = false
	byte 0x667265657a65 // "freeze"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:80
	// this.injectedASARewards.value = 0
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:81
	// this.numStakers.value = 0
	byte 0x6e756d5374616b657273 // "numStakers"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:82
	// this.algoInjectedRewards.value = 0
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:83
	// this.totalConsensusRewards.value = 0
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	int 0
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:84
	// this.lstTokenId.value = lstTokenId
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	frame_dig -4 // lstTokenId: uint64
	app_global_put

	// *if0_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:86
	// this.stakedAssetId.value !== 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:87
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(stakedAsset),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:88
	// xferAsset: AssetID.fromUint64(stakedAsset)
	frame_dig -1 // stakedAsset: uint64
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:89
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:90
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// updateMinStakePeriod(uint64)void
*abi_route_updateMinStakePeriod:
	// minStakePeriodForRewards: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateMinStakePeriod(uint64)void
	callsub updateMinStakePeriod
	int 1
	return

// updateMinStakePeriod(minStakePeriodForRewards: uint64): void
updateMinStakePeriod:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:96
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update min stake period')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update min stake period
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:97
	// this.minStakePeriodForRewards.value = minStakePeriodForRewards
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	frame_dig -1 // minStakePeriodForRewards: uint64
	app_global_put
	retsub

// updateAdminAddress(address)void
*abi_route_updateAdminAddress:
	// adminAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (adminAddress) for updateAdminAddress must be a address
	assert

	// execute updateAdminAddress(address)void
	callsub updateAdminAddress
	int 1
	return

// updateAdminAddress(adminAddress: Address): void
updateAdminAddress:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:100
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can update admin address')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can update admin address
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:101
	// this.adminAddress.value = adminAddress
	byte 0x61646d696e41646472657373 // "adminAddress"
	frame_dig -1 // adminAddress: Address
	app_global_put
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// contracts/InjectedRewardsPoolConsensus.algo.ts:108
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE
	int 2500
	frame_dig -1 // totalNumBytes: uint64
	int 400
	*
	+
	retsub

// getMBRForPoolCreation()(uint64)
*abi_route_getMBRForPoolCreation:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getMBRForPoolCreation()(uint64)
	callsub getMBRForPoolCreation
	concat
	log
	int 1
	return

// getMBRForPoolCreation(): mbrReturn
getMBRForPoolCreation:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPoolConsensus.algo.ts:112
	// nonAlgoRewardMBR = 0
	int 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if1_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:113
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:114
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if1_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:116
	// mbr = ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	int 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	int 24007
	callsub costForBoxStorage
	+
	int 127
	callsub costForBoxStorage
	+
	frame_bury 1 // mbr: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:121
	// return {
	//       mbrPayment: mbr
	//     }
	frame_dig 1 // mbr: uint64
	itob

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	int 1
	return

// initStorage(mbrPayment: PayTxn): void
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPoolConsensus.algo.ts:127
	// assert(!this.stakers.exists, 'staking pool already initialized')
	byte 0x7374616b657273 // "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:128
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can init storage')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can init storage
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:130
	// nonAlgoRewardMBR = 0
	int 0
	frame_bury 0 // nonAlgoRewardMBR: uint64

	// *if2_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:131
	// this.rewardAssetId.value !== 0
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	int 0
	!=
	bz *if2_end

	// *if2_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:132
	// nonAlgoRewardMBR += ASSET_HOLDING_FEE
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 100000
	+
	frame_bury 0 // nonAlgoRewardMBR: uint64

*if2_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:134
	// poolMBR = ALGORAND_ACCOUNT_MIN_BALANCE +
	//       nonAlgoRewardMBR +
	//       this.costForBoxStorage(7 + len<StakeInfo>() * MAX_STAKERS_PER_POOL) +
	//       this.costForBoxStorage(7 + len<uint64>() * 15)
	int 100000
	frame_dig 0 // nonAlgoRewardMBR: uint64
	+
	int 24007
	callsub costForBoxStorage
	+
	int 127
	callsub costForBoxStorage
	+
	frame_bury 1 // poolMBR: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:140
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: poolMBR })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 1 // poolMBR: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"poolMBR"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:141
	// this.stakers.create()
	byte 0x7374616b657273 // "stakers"
	int 24000
	box_create
	pop

	// contracts/InjectedRewardsPoolConsensus.algo.ts:142
	// this.minimumBalance.value = poolMBR
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	frame_dig 1 // poolMBR: uint64
	app_global_put

	// *if3_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:144
	// nonAlgoRewardMBR > 0
	frame_dig 0 // nonAlgoRewardMBR: uint64
	int 0
	>
	bz *if3_end

	// *if3_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:146
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:147
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:148
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:149
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if3_end:
	retsub

// injectRewards(axfer,uint64,uint64)void
*abi_route_injectRewards:
	// rewardAssetId: uint64
	txna ApplicationArgs 2
	btoi

	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// rewardTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 2 (rewardTxn) for injectRewards must be a axfer transaction
	assert

	// execute injectRewards(axfer,uint64,uint64)void
	callsub injectRewards
	int 1
	return

// injectRewards(rewardTxn: AssetTransferTxn, quantity: uint64, rewardAssetId: uint64): void
injectRewards:
	proto 3 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:157
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:159
	// verifyAssetTransferTxn(rewardTxn, {
	//       sender: this.adminAddress.value,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(rewardAssetId),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"sender","expected":"this.adminAddress.value"}
	assert

	// verify assetReceiver
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns XferAsset
	frame_dig -3 // rewardAssetId: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"xferAsset","expected":"AssetID.fromUint64(rewardAssetId)"}
	assert

	// verify assetAmount
	frame_dig -1 // rewardTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"rewardTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:165
	// this.injectedASARewards.value += quantity
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:166
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// injectAlgoRewards(pay,uint64)void
*abi_route_injectAlgoRewards:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// payTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (payTxn) for injectAlgoRewards must be a pay transaction
	assert

	// execute injectAlgoRewards(pay,uint64)void
	callsub injectAlgoRewards
	int 1
	return

// injectAlgoRewards(payTxn: PayTxn, quantity: uint64): void
injectAlgoRewards:
	proto 2 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:170
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:172
	// verifyPayTxn(payTxn, {
	//       receiver: this.app.address,
	//       amount: quantity,
	//     })
	// verify receiver
	frame_dig -1 // payTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payTxn: PayTxn
	gtxns Amount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"payTxn","field":"amount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:177
	// this.algoInjectedRewards.value += quantity
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	frame_dig -2 // quantity: uint64
	+
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:178
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put
	retsub

// pickupAlgoRewards()void
*abi_route_pickupAlgoRewards:
	// execute pickupAlgoRewards()void
	callsub pickupAlgoRewards
	int 1
	return

// pickupAlgoRewards(): void
pickupAlgoRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:183
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can inject rewards')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can inject rewards
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:185
	// amount = this.app.address.balance - this.minimumBalance.value - this.totalConsensusRewards.value - this.algoInjectedRewards.value
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	byte 0x6d696e696d756d42616c616e6365 // "minimumBalance"
	app_global_get
	-
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	-
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	-
	frame_bury 0 // amount: uint64

	// *if4_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:186
	// amount > MINIMUM_ALGO_REWARD
	frame_dig 0 // amount: uint64
	int 1000000
	>
	bz *if4_end

	// *if4_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:187
	// this.algoInjectedRewards.value += amount
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	frame_dig 0 // amount: uint64
	+
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	swap
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:188
	// this.lastRewardInjectionTime.value = globals.latestTimestamp
	byte 0x6c617374526577617264496e6a656374696f6e54696d65 // "lastRewardInjectionTime"
	global LatestTimestamp
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:189
	// this.totalConsensusRewards.value += amount
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	app_global_get
	frame_dig 0 // amount: uint64
	+
	byte 0x746f74616c436f6e73656e73757352657761726473 // "totalConsensusRewards"
	swap
	app_global_put

*if4_end:
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:195
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can delete application')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can delete application
	assert
	retsub

// stake(axfer,uint64)void
*abi_route_stake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// stakeTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (stakeTxn) for stake must be a axfer transaction
	assert

	// execute stake(axfer,uint64)void
	callsub stake
	int 1
	return

// stake(stakeTxn: AssetTransferTxn, quantity: uint64): void
stake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/InjectedRewardsPoolConsensus.algo.ts:210
	// currentTimeStamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // currentTimeStamp: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:211
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -2 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// *if5_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:212
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if5_end

	// *if5_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:213
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if5_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:215
	// verifyAssetTransferTxn(stakeTxn, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//       assetAmount: quantity,
	//     })
	// verify sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns XferAsset
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"xferAsset","expected":"AssetID.fromUint64(this.stakedAssetId.value)"}
	assert

	// verify assetAmount
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"stakeTxn","field":"assetAmount","expected":"quantity"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:221
	// actionComplete: boolean = false
	int 0
	frame_bury 1 // actionComplete: boolean

	// *if6_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:222
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if6_end

	// *if6_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:223
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if6_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:225
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	int 0
	frame_bury 2 // i: uint64

*for_0:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:225
	// i < this.stakers.value.length
	frame_dig 2 // i: uint64
	int 250
	<
	bz *for_0_end

	// *if7_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:226
	// actionComplete
	frame_dig 1 // actionComplete: boolean
	bz *if7_end

	// *if7_consequent
	b *for_0_end

*if7_end:
	// *if8_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:228
	// this.stakers.value[i].account === this.txn.sender
	frame_dig 2 // i: uint64
	int 96
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	txn Sender
	==
	bz *if8_elseif1_condition

	// *if8_consequent
	// *if9_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:231
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if9_end

	// *if9_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:232
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if9_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:235
	// staker = clone(this.stakers.value[i])
	frame_dig 2 // i: uint64
	int 96
	* // acc * typeLength
	int 96
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:236
	// staker.stake += stakeTxn.assetAmount
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	replace3
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if10_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:238
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if10_end

	// *if10_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:239
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if10_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:241
	// staker.stakeDuration = 0
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 40
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:242
	// staker.stakeStartTime = currentTimeStamp
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 48 // headOffset
	frame_dig 0 // currentTimeStamp: uint64
	itob
	replace3
	frame_bury 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if11_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:243
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if11_end

	// *if11_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:244
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if11_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:246
	// this.stakers.value[i] = staker
	frame_dig 2 // i: uint64
	int 96
	* // acc * typeLength
	frame_dig 3 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// *if12_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:247
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if12_end

	// *if12_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:248
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if12_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:250
	// this.totalStaked.value += stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	byte 0x746f74616c5374616b6564 // "totalStaked"
	swap
	app_global_put

	// contracts/InjectedRewardsPoolConsensus.algo.ts:251
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean
	b *if8_end

*if8_elseif1_condition:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:253
	// this.stakers.value[i].account === globals.zeroAddress
	frame_dig 2 // i: uint64
	int 96
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	bz *if8_end

	// *if8_elseif1_consequent
	// *if13_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:254
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if13_end

	// *if13_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:255
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if13_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:257
	// this.totalStaked.value = this.totalStaked.value + stakeTxn.assetAmount
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	+
	app_global_put

	// *if14_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:258
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if14_end

	// *if14_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:259
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if14_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:261
	// this.stakers.value[i] = {
	//           account: this.txn.sender,
	//           stake: stakeTxn.assetAmount,
	//           stakeDuration: 0,
	//           stakeStartTime: currentTimeStamp,
	//           algoAccuredRewards: 0,
	//           lastUpdateTime: currentTimeStamp,
	//           accruedASARewards: 0,
	//           userSharePercentage: 0,
	//           lstMinted: 0
	//         }
	frame_dig 2 // i: uint64
	int 96
	* // acc * typeLength
	txn Sender
	frame_dig -1 // stakeTxn: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // currentTimeStamp: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	frame_dig 0 // currentTimeStamp: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// *if15_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:272
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if15_end

	// *if15_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:273
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if15_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:275
	// this.numStakers.value = this.numStakers.value + 1
	byte 0x6e756d5374616b657273 // "numStakers"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// *if16_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:276
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if16_end

	// *if16_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:277
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if16_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:279
	// actionComplete = true
	int 1
	frame_bury 1 // actionComplete: boolean

*if8_end:
	// *if17_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:282
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if17_end

	// *if17_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:283
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if17_end:

*for_0_continue:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:225
	// i += 1
	frame_dig 2 // i: uint64
	int 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:286
	// assert(actionComplete, 'Stake  failed')
	frame_dig 1 // actionComplete: boolean

	// Stake  failed
	assert
	retsub

// accrueRewards()void
*abi_route_accrueRewards:
	// execute accrueRewards()void
	callsub accrueRewards
	int 1
	return

// accrueRewards(): void
accrueRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 9

	// contracts/InjectedRewardsPoolConsensus.algo.ts:292
	// algoRewards = this.algoInjectedRewards.value
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	app_global_get
	frame_bury 0 // algoRewards: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:294
	// additionalASARewards = this.injectedASARewards.value
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	app_global_get
	frame_bury 1 // additionalASARewards: uint64

	// *if18_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:295
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if18_end

	// *if18_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:296
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if18_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:298
	// totalViableStake = 0
	int 0
	frame_bury 2 // totalViableStake: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:299
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 3 // i: uint64

*for_1:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:299
	// i < this.numStakers.value
	frame_dig 3 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_1_end

	// *if19_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:300
	// this.stakers.value[i].stake > 0
	frame_dig 3 // i: uint64
	int 96
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	int 0
	>
	bz *if19_end

	// *if19_consequent
	// *if20_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:301
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if20_end

	// *if20_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:302
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if20_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:304
	// this.stakers.value[i].stakeDuration = globals.latestTimestamp - this.stakers.value[i].stakeStartTime
	frame_dig 3 // i: uint64
	int 96
	* // acc * typeLength
	int 40 // headOffset
	+
	global LatestTimestamp
	frame_dig 3 // i: uint64
	int 96
	* // acc * typeLength
	int 48 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	-
	itob
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// *if21_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:306
	// this.stakers.value[i].stakeDuration >= this.minStakePeriodForRewards.value
	frame_dig 3 // i: uint64
	int 96
	* // acc * typeLength
	int 40 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	>=
	bz *if21_end

	// *if21_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:307
	// totalViableStake += this.stakers.value[i].stake
	frame_dig 2 // totalViableStake: uint64
	frame_dig 3 // i: uint64
	int 96
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	+
	frame_bury 2 // totalViableStake: uint64

*if21_end:

*if19_end:

*for_1_continue:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:299
	// i += 1
	frame_dig 3 // i: uint64
	int 1
	+
	frame_bury 3 // i: uint64
	b *for_1

*for_1_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:312
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 4 // i: uint64

*for_2:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:312
	// i < this.numStakers.value
	frame_dig 4 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_2_end

	// *if22_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:313
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if22_end

	// *if22_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:314
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if22_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:316
	// stake = this.stakers.value[i].stake
	frame_dig 4 // i: uint64
	int 96
	* // acc * typeLength
	int 32 // headOffset
	+
	int 8
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	btoi
	frame_bury 5 // stake: uint64

	// *if23_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:318
	// stake > 0
	frame_dig 5 // stake: uint64
	int 0
	>
	bz *if23_end

	// *if23_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:319
	// staker = clone(this.stakers.value[i])
	frame_dig 4 // i: uint64
	int 96
	* // acc * typeLength
	int 96
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if24_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:321
	// staker.stakeDuration > this.minStakePeriodForRewards.value
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	byte 0x6d696e5374616b65506572696f64466f7252657761726473 // "minStakePeriodForRewards"
	app_global_get
	>
	bz *if24_end

	// *if24_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:323
	// stakerShare = wideRatio([stake, PRECISION], [totalViableStake])
	frame_dig 5 // stake: uint64
	int 1000000000000000
	mulw
	int 0
	frame_dig 2 // totalViableStake: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 7 // stakerShare: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:324
	// staker.userSharePercentage = stakerShare
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 80 // headOffset
	frame_dig 7 // stakerShare: uint64
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if25_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:326
	// algoRewards > 0
	frame_dig 0 // algoRewards: uint64
	int 0
	>
	bz *if25_end

	// *if25_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:327
	// algoRewardRate = wideRatio([algoRewards, stakerShare], [PRECISION])
	frame_dig 0 // algoRewards: uint64
	frame_dig 7 // stakerShare: uint64
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // algoRewardRate: uint64

	// *if26_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:328
	// algoRewardRate === 0
	frame_dig 8 // algoRewardRate: uint64
	int 0
	==
	bz *if26_end

	// *if26_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:329
	// algoRewardRate = 1
	int 1
	frame_bury 8 // algoRewardRate: uint64

*if26_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:331
	// staker.algoAccuredRewards = staker.algoAccuredRewards + algoRewardRate
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 56 // headOffset
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 8 // algoRewardRate: uint64
	+
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:332
	// this.algoInjectedRewards.value = this.algoInjectedRewards.value - algoRewardRate
	byte 0x616c676f496e6a656374656452657761726473 // "algoInjectedRewards"
	dup
	app_global_get
	frame_dig 8 // algoRewardRate: uint64
	-
	app_global_put

	// *if27_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:334
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if27_end

	// *if27_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:335
	// staker.stake = staker.stake + algoRewardRate
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 8 // algoRewardRate: uint64
	+
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:336
	// this.totalStaked.value = this.totalStaked.value + algoRewardRate
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 8 // algoRewardRate: uint64
	+
	app_global_put

*if27_end:

*if25_end:
	// *if28_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:340
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if28_end

	// *if28_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:341
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if28_end:
	// *if29_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:344
	// additionalASARewards > 0
	frame_dig 1 // additionalASARewards: uint64
	int 0
	>
	bz *if29_end

	// *if29_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:345
	// rewardRate = wideRatio([additionalASARewards, stakerShare], [PRECISION])
	frame_dig 1 // additionalASARewards: uint64
	frame_dig 7 // stakerShare: uint64
	mulw
	int 0
	int 1000000000000000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 9 // rewardRate: uint64

	// *if30_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:346
	// rewardRate === 0
	frame_dig 9 // rewardRate: uint64
	int 0
	==
	bz *if30_end

	// *if30_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:347
	// rewardRate = 1
	int 1
	frame_bury 9 // rewardRate: uint64

*if30_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:351
	// this.injectedASARewards.value = this.injectedASARewards.value - rewardRate
	byte 0x696e6a656374656441534152657761726473 // "injectedASARewards"
	dup
	app_global_get
	frame_dig 9 // rewardRate: uint64
	-
	app_global_put

	// *if31_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:352
	// this.rewardAssetId.value === this.stakedAssetId.value
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	==
	bz *if31_else

	// *if31_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:354
	// staker.stake = staker.stake + rewardRate
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 9 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:355
	// this.totalStaked.value = this.totalStaked.value + rewardRate
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig 9 // rewardRate: uint64
	+
	app_global_put
	b *if31_end

*if31_else:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:357
	// staker.accruedASARewards = staker.accruedASARewards + rewardRate
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 72 // headOffset
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	frame_dig 9 // rewardRate: uint64
	+
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if31_end:

*if29_end:

*if24_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:361
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 64 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:362
	// this.stakers.value[i] = staker
	frame_dig 4 // i: uint64
	int 96
	* // acc * typeLength
	frame_dig 6 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

*if23_end:

*for_2_continue:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:312
	// i += 1
	frame_dig 4 // i: uint64
	int 1
	+
	frame_bury 4 // i: uint64
	b *for_2

*for_2_end:
	retsub

// getStaker(address: Address): StakeInfo
getStaker:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:368
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:368
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_3_end

	// *if32_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:369
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if32_end

	// *if32_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:370
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if32_end:
	// *if33_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:372
	// this.stakers.value[i].account === address
	frame_dig 0 // i: uint64
	int 96
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // address: Address
	==
	bz *if33_end

	// *if33_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:373
	// return clone(this.stakers.value[i]);
	frame_dig 0 // i: uint64
	int 96
	* // acc * typeLength
	int 96
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	b *getStaker*return

*if33_end:

*for_3_continue:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:368
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:376
	// return {
	//       account: globals.zeroAddress,
	//       stake: 0,
	//       stakeDuration: 0,
	//       stakeStartTime: 0,
	//       lastUpdateTime: 0,
	//       algoAccuredRewards: 0,
	//       accruedASARewards: 0,
	//       userSharePercentage: 0,
	//       lstMinted: 0
	//     }
	global ZeroAddress
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat

*getStaker*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// setStaker(stakerAccount: Address, staker: StakeInfo): void
setStaker:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:389
	// for (let i = 0; i < this.numStakers.value; i += 1)
	int 0
	frame_bury 0 // i: uint64

*for_4:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:389
	// i < this.numStakers.value
	frame_dig 0 // i: uint64
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	<
	bz *for_4_end

	// *if34_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:390
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if34_end

	// *if34_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:391
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if34_end:
	// *if35_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:393
	// this.stakers.value[i].account === stakerAccount
	frame_dig 0 // i: uint64
	int 96
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	frame_dig -1 // stakerAccount: Address
	==
	bz *if35_end

	// *if35_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:394
	// this.stakers.value[i] = staker
	frame_dig 0 // i: uint64
	int 96
	* // acc * typeLength
	frame_dig -2 // staker: StakeInfo
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_replace

	// contracts/InjectedRewardsPoolConsensus.algo.ts:395
	// return;
	retsub

*if35_end:

*for_4_continue:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:389
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b *for_4

*for_4_end:
	retsub

// claimRewards()void
*abi_route_claimRewards:
	// execute claimRewards()void
	callsub claimRewards
	int 1
	return

// claimRewards(): void
claimRewards:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if36_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:401
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if36_end

	// *if36_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:402
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if36_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:404
	// staker = this.getStaker(this.txn.sender)
	txn Sender
	callsub getStaker
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if37_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:407
	// staker.algoAccuredRewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	int 0
	>
	bz *if37_end

	// *if37_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:408
	// sendPayment({
	//         amount: staker.algoAccuredRewards,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:409
	// amount: staker.algoAccuredRewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:410
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:411
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:412
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:414
	// staker.algoAccuredRewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 56
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if37_end:
	// *if38_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:418
	// staker.accruedASARewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	int 0
	>
	bz *if38_end

	// *if38_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:419
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: staker.accruedASARewards,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:420
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:421
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:422
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:423
	// assetAmount: staker.accruedASARewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:424
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:426
	// staker.accruedASARewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 72
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if38_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:430
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 64 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:431
	// this.setStaker(staker.account, staker)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// *if39_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:432
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if39_end

	// *if39_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:433
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if39_end:
	retsub

// unstake(uint64)void
*abi_route_unstake:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute unstake(uint64)void
	callsub unstake
	int 1
	return

// unstake(quantity: uint64): void
unstake:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/InjectedRewardsPoolConsensus.algo.ts:438
	// staker = this.getStaker(this.txn.sender)
	txn Sender
	callsub getStaker
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// *if40_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:443
	// staker.stake > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	>
	bz *if40_end

	// *if40_consequent
	// *if41_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:444
	// this.stakedAssetId.value === 0
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	int 0
	==
	bz *if41_else

	// *if41_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:445
	// sendPayment({
	//           amount: quantity === 0 ? staker.stake : quantity,
	//           receiver: this.txn.sender,
	//           sender: this.app.address,
	//           fee: 1_000,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:446
	// amount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary0_false
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary0_end

*ternary0_false:
	frame_dig -1 // quantity: uint64

*ternary0_end:
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:447
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:448
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:449
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if41_end

*if41_else:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:453
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.stakedAssetId.value),
	//           assetReceiver: this.txn.sender,
	//           sender: this.app.address,
	//           assetAmount: quantity === 0 ? staker.stake : quantity,
	//           fee: 1_000,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:454
	// xferAsset: AssetID.fromUint64(this.stakedAssetId.value)
	byte 0x7374616b656441737365744964 // "stakedAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:455
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:456
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:457
	// assetAmount: quantity === 0 ? staker.stake : quantity
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary1_false
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // quantity: uint64

*ternary1_end:
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:458
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if41_end:

*if40_end:
	// *if42_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:464
	// staker.algoAccuredRewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	int 0
	>
	bz *if42_end

	// *if42_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:465
	// sendPayment({
	//         amount: staker.algoAccuredRewards,
	//         receiver: this.txn.sender,
	//         sender: this.app.address,
	//         fee: 1_000,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:466
	// amount: staker.algoAccuredRewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	itxn_field Amount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:467
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:468
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:469
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:471
	// staker.algoAccuredRewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 56
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if42_end:
	// *if43_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:475
	// staker.accruedASARewards > 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	int 0
	>
	bz *if43_end

	// *if43_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:476
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(this.rewardAssetId.value),
	//         assetReceiver: this.txn.sender,
	//         sender: this.app.address,
	//         assetAmount: staker.accruedASARewards,
	//         fee: 1_000,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:477
	// xferAsset: AssetID.fromUint64(this.rewardAssetId.value)
	byte 0x72657761726441737365744964 // "rewardAssetId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:478
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:479
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:480
	// assetAmount: staker.accruedASARewards
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 72 8
	btoi
	itxn_field AssetAmount

	// contracts/InjectedRewardsPoolConsensus.algo.ts:481
	// fee: 1_000
	int 1_000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:483
	// staker.accruedASARewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 72
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if43_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:487
	// this.totalStaked.value = this.totalStaked.value - (quantity === 0 ? staker.stake : quantity)
	byte 0x746f74616c5374616b6564 // "totalStaked"
	dup
	app_global_get
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *ternary3_false
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	b *ternary3_end

*ternary3_false:
	frame_dig -1 // quantity: uint64

*ternary3_end:
	-
	app_global_put

	// *if44_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:489
	// globals.opcodeBudget < 300
	global OpcodeBudget
	int 300
	<
	bz *if44_end

	// *if44_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:490
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if44_end:
	// *if45_condition
	// contracts/InjectedRewardsPoolConsensus.algo.ts:493
	// quantity === 0
	frame_dig -1 // quantity: uint64
	int 0
	==
	bz *if45_else

	// *if45_consequent
	// contracts/InjectedRewardsPoolConsensus.algo.ts:494
	// removedStaker: StakeInfo = {
	//         account: globals.zeroAddress,
	//         stake: 0,
	//         stakeDuration: 0,
	//         stakeStartTime: 0,
	//         lastUpdateTime: 0,
	//         algoAccuredRewards: 0,
	//         accruedASARewards: 0,
	//         userSharePercentage: 0,
	//         lstMinted: 0
	//       }
	global ZeroAddress
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	frame_bury 1 // removedStaker: StakeInfo

	// contracts/InjectedRewardsPoolConsensus.algo.ts:505
	// this.setStaker(staker.account, removedStaker)
	frame_dig 1 // removedStaker: StakeInfo
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// contracts/InjectedRewardsPoolConsensus.algo.ts:507
	// lastStaker = this.getStaker(this.stakers.value[this.numStakers.value].account)
	byte 0x6e756d5374616b657273 // "numStakers"
	app_global_get
	int 96
	* // acc * typeLength
	int 0
	+
	int 32
	byte 0x7374616b657273 // "stakers"
	cover 2
	box_extract
	callsub getStaker
	frame_bury 2 // lastStaker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:508
	// this.setStaker(staker.account, lastStaker)
	frame_dig 2 // lastStaker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker

	// contracts/InjectedRewardsPoolConsensus.algo.ts:510
	// this.numStakers.value = this.numStakers.value - 1
	byte 0x6e756d5374616b657273 // "numStakers"
	dup
	app_global_get
	int 1
	-
	app_global_put
	b *if45_end

*if45_else:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:514
	// staker.stake = staker.stake - quantity
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 32 // headOffset
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // quantity: uint64
	-
	itob
	replace3
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:515
	// staker.accruedASARewards = 0
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	byte 0x0000000000000000
	replace2 72
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

*if45_end:
	// contracts/InjectedRewardsPoolConsensus.algo.ts:517
	// staker.lastUpdateTime = globals.latestTimestamp
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 64 // headOffset
	global LatestTimestamp
	itob
	replace3
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:518
	// this.setStaker(staker.account, staker)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker
	retsub

// setFreeze(bool)void
*abi_route_setFreeze:
	// enabled: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==

	// argument 0 (enabled) for setFreeze must be a bool
	assert
	int 0
	getbit

	// execute setFreeze(bool)void
	callsub setFreeze
	int 1
	return

// setFreeze(enabled: boolean): void
setFreeze:
	proto 1 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:522
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can freeze payouts')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can freeze payouts
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:523
	// this.freeze.value = enabled
	byte 0x667265657a65 // "freeze"
	frame_dig -1 // enabled: boolean
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// getGoOnlineFee(): uint64
getGoOnlineFee:
	proto 0 1

	// contracts/InjectedRewardsPoolConsensus.algo.ts:531
	// return 2000;
	int 2000
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	int 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:543
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can go online')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can go online
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:545
	// extraFee = this.getGoOnlineFee()
	callsub getGoOnlineFee
	frame_bury 0 // extraFee: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:546
	// verifyPayTxn(feePayment, { receiver: this.app.address, amount: extraFee })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:547
	// sendOnlineKeyRegistration({
	//       votePK: votePK,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: extraFee,
	//     })
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:548
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:549
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:550
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// contracts/InjectedRewardsPoolConsensus.algo.ts:551
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// contracts/InjectedRewardsPoolConsensus.algo.ts:552
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// contracts/InjectedRewardsPoolConsensus.algo.ts:553
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// contracts/InjectedRewardsPoolConsensus.algo.ts:554
	// fee: extraFee
	frame_dig 0 // extraFee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	int 1
	return

// goOffline(): void
goOffline:
	proto 0 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:560
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can go offline')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can go offline
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:561
	// sendOfflineKeyRegistration({})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string,uint64)void
*abi_route_linkToNFD:
	// nfdRegistryAppId: uint64
	txna ApplicationArgs 3
	btoi

	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string,uint64)void
	callsub linkToNFD
	int 1
	return

// linkToNFD(nfdAppId: uint64, nfdName: string, nfdRegistryAppId: uint64): void
linkToNFD:
	proto 3 0

	// contracts/InjectedRewardsPoolConsensus.algo.ts:565
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can link to NFD')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can link to NFD
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:567
	// sendAppCall({
	//       applicationID: AppID.fromUint64(nfdRegistryAppId),
	//       applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)],
	//       applications: [AppID.fromUint64(nfdAppId)],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:568
	// applicationID: AppID.fromUint64(nfdRegistryAppId)
	frame_dig -3 // nfdRegistryAppId: uint64
	itxn_field ApplicationID

	// contracts/InjectedRewardsPoolConsensus.algo.ts:569
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)]
	byte 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppId: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// contracts/InjectedRewardsPoolConsensus.algo.ts:570
	// applications: [AppID.fromUint64(nfdAppId)]
	frame_dig -1 // nfdAppId: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addLST(axfer,uint64)void
*abi_route_addLST:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// axferTxn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (axferTxn) for addLST must be a axfer transaction
	assert

	// execute addLST(axfer,uint64)void
	callsub addLST
	int 1
	return

// addLST(axferTxn: AssetTransferTxn, quantity: uint64): void
addLST:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/InjectedRewardsPoolConsensus.algo.ts:575
	// assert(this.txn.sender === this.adminAddress.value, 'Only admin can send LST')
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==

	// Only admin can send LST
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:576
	// lstTokenId = this.lstTokenId.value
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	frame_bury 0 // lstTokenId: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:578
	// verifyAssetTransferTxn(axferTxn, {
	//       assetAmount: quantity,
	//       assetReceiver: this.app.address,
	//       assetSender: this.txn.sender,
	//       xferAsset: AssetID.fromUint64(lstTokenId)
	//     })
	// verify assetAmount
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -2 // quantity: uint64
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetAmount","expected":"quantity"}
	assert

	// verify assetReceiver
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetSender
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns AssetSender
	txn Sender
	==

	// transaction verification failed: {"txn":"axferTxn","field":"assetSender","expected":"this.txn.sender"}
	assert

	// verify xferAsset
	frame_dig -1 // axferTxn: AssetTransferTxn
	gtxns XferAsset
	frame_dig 0 // lstTokenId: uint64
	==

	// transaction verification failed: {"txn":"axferTxn","field":"xferAsset","expected":"AssetID.fromUint64(lstTokenId)"}
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:585
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(lstTokenId),
	//       assetReceiver: this.app.address,
	//       sender: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:586
	// xferAsset: AssetID.fromUint64(lstTokenId)
	frame_dig 0 // lstTokenId: uint64
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:587
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:588
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:589
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// mintLST(uint64)void
*abi_route_mintLST:
	// quantity: uint64
	txna ApplicationArgs 1
	btoi

	// execute mintLST(uint64)void
	callsub mintLST
	int 1
	return

// mintLST(quantity: uint64): void
mintLST:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/InjectedRewardsPoolConsensus.algo.ts:594
	// staker = this.getStaker(this.txn.sender)
	txn Sender
	callsub getStaker
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:595
	// assert(staker.account !== globals.zeroAddress, 'Invalid staker')
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=

	// Invalid staker
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:596
	// assert(staker.stake > 0, 'No staked assets')
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	int 0
	>

	// No staked assets
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:597
	// assert(staker.stake < staker.lstMinted, 'Already minted max LST')
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	<

	// Already minted max LST
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:598
	// assert(quantity > 0, 'Invalid quantity')
	frame_dig -1 // quantity: uint64
	int 0
	>

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:600
	// lstMintRemaining = staker.stake - staker.lstMinted
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	-
	frame_bury 1 // lstMintRemaining: uint64

	// contracts/InjectedRewardsPoolConsensus.algo.ts:601
	// assert(quantity <= lstMintRemaining, 'Invalid quantity')
	frame_dig -1 // quantity: uint64
	frame_dig 1 // lstMintRemaining: uint64
	<=

	// Invalid quantity
	assert

	// contracts/InjectedRewardsPoolConsensus.algo.ts:603
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.lstTokenId.value),
	//       assetReceiver: this.txn.sender,
	//       sender: this.app.address,
	//       assetAmount: quantity,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/InjectedRewardsPoolConsensus.algo.ts:604
	// xferAsset: AssetID.fromUint64(this.lstTokenId.value)
	byte 0x6c7374546f6b656e4964 // "lstTokenId"
	app_global_get
	itxn_field XferAsset

	// contracts/InjectedRewardsPoolConsensus.algo.ts:605
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/InjectedRewardsPoolConsensus.algo.ts:606
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/InjectedRewardsPoolConsensus.algo.ts:607
	// assetAmount: quantity
	frame_dig -1 // quantity: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/InjectedRewardsPoolConsensus.algo.ts:609
	// staker.lstMinted = staker.lstMinted + quantity
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	int 88 // headOffset
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 88 8
	btoi
	frame_dig -1 // quantity: uint64
	+
	itob
	replace3
	frame_bury 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)

	// contracts/InjectedRewardsPoolConsensus.algo.ts:610
	// this.setStaker(staker.account, staker)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	frame_dig 0 // staker: (address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	extract 0 32
	callsub setStaker
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	int 1
	return

// gas(): void
gas:
	proto 0 0
	retsub

*create_NoOp:
	method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "initApplication(uint64,uint64,uint64,uint64)void"
	method "updateMinStakePeriod(uint64)void"
	method "updateAdminAddress(address)void"
	method "getMBRForPoolCreation()(uint64)"
	method "initStorage(pay)void"
	method "injectRewards(axfer,uint64,uint64)void"
	method "injectAlgoRewards(pay,uint64)void"
	method "pickupAlgoRewards()void"
	method "stake(axfer,uint64)void"
	method "accrueRewards()void"
	method "claimRewards()void"
	method "unstake(uint64)void"
	method "setFreeze(bool)void"
	method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "goOffline()void"
	method "linkToNFD(uint64,string,uint64)void"
	method "addLST(axfer,uint64)void"
	method "mintLST(uint64)void"
	method "gas()void"
	txna ApplicationArgs 0
	match *abi_route_initApplication *abi_route_updateMinStakePeriod *abi_route_updateAdminAddress *abi_route_getMBRForPoolCreation *abi_route_initStorage *abi_route_injectRewards *abi_route_injectAlgoRewards *abi_route_pickupAlgoRewards *abi_route_stake *abi_route_accrueRewards *abi_route_claimRewards *abi_route_unstake *abi_route_setFreeze *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD *abi_route_addLST *abi_route_mintLST *abi_route_gas

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err